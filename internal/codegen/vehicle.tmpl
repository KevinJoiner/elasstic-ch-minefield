// Code generated by "vss-translator" DO NOT EDIT.
package vsstable

import (
	_ "embed"

)

//go:embed {{ sqlFileName }}
var VSSTableCreateQuery string

const (
{{- range .DataSignals}}
	// Field{{ .GOName }} {{ .Desc }}
	Field{{ .GOName }} = "{{ .CHName }}"
{{- end}}
)

type Vehicle struct {
{{- range .DataSignals }}
	{{ if .Deprecated }}// Deprecated field{{ end -}}
	// {{ .GOName }} {{ .Desc }}
	{{ .GOName }} {{ .GOType }} `ch:"{{ .CHName }}" json:"{{ .CHName }},omitempty"`
{{- end }}
}

// InsertStatement for inserting a vehicle and all its fields into the table.
{{$first := true}}
const InsertStatment = "INSERT INTO vss ({{- range .DataSignals -}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.CHName}}{{end}})"
const InsertStatmentValues = InsertStatment + " Values"

type Appender interface {
	Append(vals ...any) error
}
func (v *Vehicle) AppendTo(appender Appender) error{
	return appender.Append(
		{{- range .DataSignals -}}
		v.{{ .GOName }},
		{{end -}}
	)
}

func GetColumns(vehicles []*Vehicle) []proto.InputColumn {
	var (
	{{- range .DataSignals -}}
		col{{ .GOName }} = {{ .CHColType }}
	{{end -}}
	)

	for _, vehicle := range vehicles {
	{{ range .DataSignals -}}
		col{{ .GOName }}.Append(vehicle.{{ .GOName}})
	{{end -}}
	}

	input := []proto.InputColumn{
	{{- range .DataSignals -}}
		{Name: Field{{ .GOName }}, Data: col{{ .GOName }}},
	{{end -}}
	}

	return input
}