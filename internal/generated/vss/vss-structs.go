// Code generated by "vss-translator" DO NOT EDIT.
package vsstable

import _ "embed"

//go:embed vss-table.sql
var VSSTableCreateQuery string

const (
	// FieldVehicle High-level vehicle data.
	FieldVehicle = "Vehicle"
	// FieldVehicleADAS All Advanced Driver Assist Systems data.
	FieldVehicleADAS = "Vehicle_ADAS"
	// FieldVehicleADASABS Antilock Braking System signals.
	FieldVehicleADASABS = "Vehicle_ADAS_ABS"
	// FieldVehicleADASABSIsEnabled Indicates if ABS is enabled. True = Enabled. False = Disabled.
	FieldVehicleADASABSIsEnabled = "Vehicle_ADAS_ABS_IsEnabled"
	// FieldVehicleADASABSIsEngaged Indicates if ABS is currently regulating brake pressure. True = Engaged. False = Not Engaged.
	FieldVehicleADASABSIsEngaged = "Vehicle_ADAS_ABS_IsEngaged"
	// FieldVehicleADASABSIsError Indicates if ABS incurred an error condition. True = Error. False = No Error.
	FieldVehicleADASABSIsError = "Vehicle_ADAS_ABS_IsError"
	// FieldVehicleADASActiveAutonomyLevel Indicates the currently active level of driving automation according to the SAE J3016 (Taxonomy and Definitions for Terms Related to Driving Automation Systems for On-Road Motor Vehicles).
	FieldVehicleADASActiveAutonomyLevel = "Vehicle_ADAS_ActiveAutonomyLevel"
	// FieldVehicleADASCruiseControl Signals from Cruise Control system.
	FieldVehicleADASCruiseControl = "Vehicle_ADAS_CruiseControl"
	// FieldVehicleADASCruiseControlIsActive Indicates if cruise control system is active (i.e. actively controls speed). True = Active. False = Inactive.
	FieldVehicleADASCruiseControlIsActive = "Vehicle_ADAS_CruiseControl_IsActive"
	// FieldVehicleADASCruiseControlIsEnabled Indicates if cruise control system is enabled (e.g. ready to receive configurations and settings) True = Enabled. False = Disabled.
	FieldVehicleADASCruiseControlIsEnabled = "Vehicle_ADAS_CruiseControl_IsEnabled"
	// FieldVehicleADASCruiseControlIsError Indicates if cruise control system incurred an error condition. True = Error. False = No Error.
	FieldVehicleADASCruiseControlIsError = "Vehicle_ADAS_CruiseControl_IsError"
	// FieldVehicleADASCruiseControlSpeedSet Set cruise control speed in kilometers per hour.
	FieldVehicleADASCruiseControlSpeedSet = "Vehicle_ADAS_CruiseControl_SpeedSet"
	// FieldVehicleADASDMS Driver Monitoring System signals.
	FieldVehicleADASDMS = "Vehicle_ADAS_DMS"
	// FieldVehicleADASDMSIsEnabled Indicates if DMS is enabled. True = Enabled. False = Disabled.
	FieldVehicleADASDMSIsEnabled = "Vehicle_ADAS_DMS_IsEnabled"
	// FieldVehicleADASDMSIsError Indicates if DMS incurred an error condition. True = Error. False = No Error.
	FieldVehicleADASDMSIsError = "Vehicle_ADAS_DMS_IsError"
	// FieldVehicleADASDMSIsWarning Indicates if DMS has registered a driver alert condition.
	FieldVehicleADASDMSIsWarning = "Vehicle_ADAS_DMS_IsWarning"
	// FieldVehicleADASEBA Emergency Brake Assist (EBA) System signals.
	FieldVehicleADASEBA = "Vehicle_ADAS_EBA"
	// FieldVehicleADASEBAIsEnabled Indicates if EBA is enabled. True = Enabled. False = Disabled.
	FieldVehicleADASEBAIsEnabled = "Vehicle_ADAS_EBA_IsEnabled"
	// FieldVehicleADASEBAIsEngaged Indicates if EBA is currently regulating brake pressure. True = Engaged. False = Not Engaged.
	FieldVehicleADASEBAIsEngaged = "Vehicle_ADAS_EBA_IsEngaged"
	// FieldVehicleADASEBAIsError Indicates if EBA incurred an error condition. True = Error. False = No Error.
	FieldVehicleADASEBAIsError = "Vehicle_ADAS_EBA_IsError"
	// FieldVehicleADASEBD Electronic Brakeforce Distribution (EBD) System signals.
	FieldVehicleADASEBD = "Vehicle_ADAS_EBD"
	// FieldVehicleADASEBDIsEnabled Indicates if EBD is enabled. True = Enabled. False = Disabled.
	FieldVehicleADASEBDIsEnabled = "Vehicle_ADAS_EBD_IsEnabled"
	// FieldVehicleADASEBDIsEngaged Indicates if EBD is currently regulating vehicle brakeforce distribution. True = Engaged. False = Not Engaged.
	FieldVehicleADASEBDIsEngaged = "Vehicle_ADAS_EBD_IsEngaged"
	// FieldVehicleADASEBDIsError Indicates if EBD incurred an error condition. True = Error. False = No Error.
	FieldVehicleADASEBDIsError = "Vehicle_ADAS_EBD_IsError"
	// FieldVehicleADASESC Electronic Stability Control System signals.
	FieldVehicleADASESC = "Vehicle_ADAS_ESC"
	// FieldVehicleADASESCIsEnabled Indicates if ESC is enabled. True = Enabled. False = Disabled.
	FieldVehicleADASESCIsEnabled = "Vehicle_ADAS_ESC_IsEnabled"
	// FieldVehicleADASESCIsEngaged Indicates if ESC is currently regulating vehicle stability. True = Engaged. False = Not Engaged.
	FieldVehicleADASESCIsEngaged = "Vehicle_ADAS_ESC_IsEngaged"
	// FieldVehicleADASESCIsError Indicates if ESC incurred an error condition. True = Error. False = No Error.
	FieldVehicleADASESCIsError = "Vehicle_ADAS_ESC_IsError"
	// FieldVehicleADASESCIsStrongCrossWindDetected Indicates if the ESC system is detecting strong cross winds. True = Strong cross winds detected. False = No strong cross winds detected.
	FieldVehicleADASESCIsStrongCrossWindDetected = "Vehicle_ADAS_ESC_IsStrongCrossWindDetected"
	// FieldVehicleADASESCRoadFriction Road friction values reported by the ESC system.
	FieldVehicleADASESCRoadFriction = "Vehicle_ADAS_ESC_RoadFriction"
	// FieldVehicleADASESCRoadFrictionLowerBound Lower bound road friction, as calculated by the ESC system. 5% possibility that road friction is below this value. 0 = no friction, 100 = maximum friction.
	FieldVehicleADASESCRoadFrictionLowerBound = "Vehicle_ADAS_ESC_RoadFriction_LowerBound"
	// FieldVehicleADASESCRoadFrictionMostProbable Most probable road friction, as calculated by the ESC system. Exact meaning of most probable is implementation specific. 0 = no friction, 100 = maximum friction.
	FieldVehicleADASESCRoadFrictionMostProbable = "Vehicle_ADAS_ESC_RoadFriction_MostProbable"
	// FieldVehicleADASESCRoadFrictionUpperBound Upper bound road friction, as calculated by the ESC system. 95% possibility that road friction is below this value. 0 = no friction, 100 = maximum friction.
	FieldVehicleADASESCRoadFrictionUpperBound = "Vehicle_ADAS_ESC_RoadFriction_UpperBound"
	// FieldVehicleADASIsAutoPowerOptimize Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
	FieldVehicleADASIsAutoPowerOptimize = "Vehicle_ADAS_IsAutoPowerOptimize"
	// FieldVehicleADASLaneDepartureDetection Signals from Lane Departure Detection System.
	FieldVehicleADASLaneDepartureDetection = "Vehicle_ADAS_LaneDepartureDetection"
	// FieldVehicleADASLaneDepartureDetectionIsEnabled Indicates if lane departure detection system is enabled. True = Enabled. False = Disabled.
	FieldVehicleADASLaneDepartureDetectionIsEnabled = "Vehicle_ADAS_LaneDepartureDetection_IsEnabled"
	// FieldVehicleADASLaneDepartureDetectionIsError Indicates if lane departure system incurred an error condition. True = Error. False = No Error.
	FieldVehicleADASLaneDepartureDetectionIsError = "Vehicle_ADAS_LaneDepartureDetection_IsError"
	// FieldVehicleADASLaneDepartureDetectionIsWarning Indicates if lane departure detection registered a lane departure.
	FieldVehicleADASLaneDepartureDetectionIsWarning = "Vehicle_ADAS_LaneDepartureDetection_IsWarning"
	// FieldVehicleADASObstacleDetection Signals form Obstacle Sensor System.
	FieldVehicleADASObstacleDetection = "Vehicle_ADAS_ObstacleDetection"
	// FieldVehicleADASObstacleDetectionIsEnabled Indicates if obstacle sensor system is enabled (i.e. monitoring for obstacles). True = Enabled. False = Disabled.
	FieldVehicleADASObstacleDetectionIsEnabled = "Vehicle_ADAS_ObstacleDetection_IsEnabled"
	// FieldVehicleADASObstacleDetectionIsError Indicates if obstacle sensor system incurred an error condition. True = Error. False = No Error.
	FieldVehicleADASObstacleDetectionIsError = "Vehicle_ADAS_ObstacleDetection_IsError"
	// FieldVehicleADASObstacleDetectionIsWarning Indicates if obstacle sensor system registered an obstacle.
	FieldVehicleADASObstacleDetectionIsWarning = "Vehicle_ADAS_ObstacleDetection_IsWarning"
	// FieldVehicleADASPowerOptimizeLevel Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
	FieldVehicleADASPowerOptimizeLevel = "Vehicle_ADAS_PowerOptimizeLevel"
	// FieldVehicleADASSupportedAutonomyLevel Indicates the highest level of driving automation according to the SAE J3016 taxonomy the vehicle is capable of.
	FieldVehicleADASSupportedAutonomyLevel = "Vehicle_ADAS_SupportedAutonomyLevel"
	// FieldVehicleADASTCS Traction Control System signals.
	FieldVehicleADASTCS = "Vehicle_ADAS_TCS"
	// FieldVehicleADASTCSIsEnabled Indicates if TCS is enabled. True = Enabled. False = Disabled.
	FieldVehicleADASTCSIsEnabled = "Vehicle_ADAS_TCS_IsEnabled"
	// FieldVehicleADASTCSIsEngaged Indicates if TCS is currently regulating traction. True = Engaged. False = Not Engaged.
	FieldVehicleADASTCSIsEngaged = "Vehicle_ADAS_TCS_IsEngaged"
	// FieldVehicleADASTCSIsError Indicates if TCS incurred an error condition. True = Error. False = No Error.
	FieldVehicleADASTCSIsError = "Vehicle_ADAS_TCS_IsError"
	// FieldVehicleAcceleration Spatial acceleration. Axis definitions according to ISO 8855.
	FieldVehicleAcceleration = "Vehicle_Acceleration"
	// FieldVehicleAccelerationLateral Vehicle acceleration in Y (lateral acceleration).
	FieldVehicleAccelerationLateral = "Vehicle_Acceleration_Lateral"
	// FieldVehicleAccelerationLongitudinal Vehicle acceleration in X (longitudinal acceleration).
	FieldVehicleAccelerationLongitudinal = "Vehicle_Acceleration_Longitudinal"
	// FieldVehicleAccelerationVertical Vehicle acceleration in Z (vertical acceleration).
	FieldVehicleAccelerationVertical = "Vehicle_Acceleration_Vertical"
	// FieldVehicleAngularVelocity Spatial rotation. Axis definitions according to ISO 8855.
	FieldVehicleAngularVelocity = "Vehicle_AngularVelocity"
	// FieldVehicleAngularVelocityPitch Vehicle rotation rate along Y (lateral).
	FieldVehicleAngularVelocityPitch = "Vehicle_AngularVelocity_Pitch"
	// FieldVehicleAngularVelocityRoll Vehicle rotation rate along X (longitudinal).
	FieldVehicleAngularVelocityRoll = "Vehicle_AngularVelocity_Roll"
	// FieldVehicleAngularVelocityYaw Vehicle rotation rate along Z (vertical).
	FieldVehicleAngularVelocityYaw = "Vehicle_AngularVelocity_Yaw"
	// FieldVehicleAverageSpeed Average speed for the current trip.
	FieldVehicleAverageSpeed = "Vehicle_AverageSpeed"
	// FieldVehicleBody All body components.
	FieldVehicleBody = "Vehicle_Body"
	// FieldVehicleBodyBodyType Body type code as defined by ISO 3779.
	FieldVehicleBodyBodyType = "Vehicle_Body_BodyType"
	// FieldVehicleBodyHood Hood status. Start position for Hood is Closed.
	FieldVehicleBodyHood = "Vehicle_Body_Hood"
	// FieldVehicleBodyHoodIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	FieldVehicleBodyHoodIsOpen = "Vehicle_Body_Hood_IsOpen"
	// FieldVehicleBodyHoodPosition Item position. 0 = Start position 100 = End position.
	FieldVehicleBodyHoodPosition = "Vehicle_Body_Hood_Position"
	// FieldVehicleBodyHoodSwitch Switch controlling sliding action such as window, sunroof, or blind.
	FieldVehicleBodyHoodSwitch = "Vehicle_Body_Hood_Switch"
	// FieldVehicleBodyHorn Horn signals.
	FieldVehicleBodyHorn = "Vehicle_Body_Horn"
	// FieldVehicleBodyHornIsActive Horn active or inactive. True = Active. False = Inactive.
	FieldVehicleBodyHornIsActive = "Vehicle_Body_Horn_IsActive"
	// FieldVehicleBodyIsAutoPowerOptimize Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
	FieldVehicleBodyIsAutoPowerOptimize = "Vehicle_Body_IsAutoPowerOptimize"
	// FieldVehicleBodyLights Exterior lights.
	FieldVehicleBodyLights = "Vehicle_Body_Lights"
	// FieldVehicleBodyLightsBackup Backup lights.
	FieldVehicleBodyLightsBackup = "Vehicle_Body_Lights_Backup"
	// FieldVehicleBodyLightsBackupIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	FieldVehicleBodyLightsBackupIsDefect = "Vehicle_Body_Lights_Backup_IsDefect"
	// FieldVehicleBodyLightsBackupIsOn Indicates if light is on or off. True = On. False = Off.
	FieldVehicleBodyLightsBackupIsOn = "Vehicle_Body_Lights_Backup_IsOn"
	// FieldVehicleBodyLightsBeam Beam lights.
	FieldVehicleBodyLightsBeam = "Vehicle_Body_Lights_Beam"
	// FieldVehicleBodyLightsBeamHigh Beam lights.
	FieldVehicleBodyLightsBeamHigh = "Vehicle_Body_Lights_Beam_High"
	// FieldVehicleBodyLightsBeamHighIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	FieldVehicleBodyLightsBeamHighIsDefect = "Vehicle_Body_Lights_Beam_High_IsDefect"
	// FieldVehicleBodyLightsBeamHighIsOn Indicates if light is on or off. True = On. False = Off.
	FieldVehicleBodyLightsBeamHighIsOn = "Vehicle_Body_Lights_Beam_High_IsOn"
	// FieldVehicleBodyLightsBeamLow Beam lights.
	FieldVehicleBodyLightsBeamLow = "Vehicle_Body_Lights_Beam_Low"
	// FieldVehicleBodyLightsBeamLowIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	FieldVehicleBodyLightsBeamLowIsDefect = "Vehicle_Body_Lights_Beam_Low_IsDefect"
	// FieldVehicleBodyLightsBeamLowIsOn Indicates if light is on or off. True = On. False = Off.
	FieldVehicleBodyLightsBeamLowIsOn = "Vehicle_Body_Lights_Beam_Low_IsOn"
	// FieldVehicleBodyLightsBrake Brake lights.
	FieldVehicleBodyLightsBrake = "Vehicle_Body_Lights_Brake"
	// FieldVehicleBodyLightsBrakeIsActive Indicates if break-light is active. INACTIVE means lights are off. ACTIVE means lights are on. ADAPTIVE means that break-light is indicating emergency-breaking.
	FieldVehicleBodyLightsBrakeIsActive = "Vehicle_Body_Lights_Brake_IsActive"
	// FieldVehicleBodyLightsBrakeIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	FieldVehicleBodyLightsBrakeIsDefect = "Vehicle_Body_Lights_Brake_IsDefect"
	// FieldVehicleBodyLightsDirectionIndicator Indicator lights.
	FieldVehicleBodyLightsDirectionIndicator = "Vehicle_Body_Lights_DirectionIndicator"
	// FieldVehicleBodyLightsDirectionIndicatorLeft Indicator lights.
	FieldVehicleBodyLightsDirectionIndicatorLeft = "Vehicle_Body_Lights_DirectionIndicator_Left"
	// FieldVehicleBodyLightsDirectionIndicatorLeftIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	FieldVehicleBodyLightsDirectionIndicatorLeftIsDefect = "Vehicle_Body_Lights_DirectionIndicator_Left_IsDefect"
	// FieldVehicleBodyLightsDirectionIndicatorLeftIsSignaling Indicates if light is signaling or off. True = signaling. False = Off.
	FieldVehicleBodyLightsDirectionIndicatorLeftIsSignaling = "Vehicle_Body_Lights_DirectionIndicator_Left_IsSignaling"
	// FieldVehicleBodyLightsDirectionIndicatorRight Indicator lights.
	FieldVehicleBodyLightsDirectionIndicatorRight = "Vehicle_Body_Lights_DirectionIndicator_Right"
	// FieldVehicleBodyLightsDirectionIndicatorRightIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	FieldVehicleBodyLightsDirectionIndicatorRightIsDefect = "Vehicle_Body_Lights_DirectionIndicator_Right_IsDefect"
	// FieldVehicleBodyLightsDirectionIndicatorRightIsSignaling Indicates if light is signaling or off. True = signaling. False = Off.
	FieldVehicleBodyLightsDirectionIndicatorRightIsSignaling = "Vehicle_Body_Lights_DirectionIndicator_Right_IsSignaling"
	// FieldVehicleBodyLightsFog Fog lights.
	FieldVehicleBodyLightsFog = "Vehicle_Body_Lights_Fog"
	// FieldVehicleBodyLightsFogFront Fog lights.
	FieldVehicleBodyLightsFogFront = "Vehicle_Body_Lights_Fog_Front"
	// FieldVehicleBodyLightsFogFrontIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	FieldVehicleBodyLightsFogFrontIsDefect = "Vehicle_Body_Lights_Fog_Front_IsDefect"
	// FieldVehicleBodyLightsFogFrontIsOn Indicates if light is on or off. True = On. False = Off.
	FieldVehicleBodyLightsFogFrontIsOn = "Vehicle_Body_Lights_Fog_Front_IsOn"
	// FieldVehicleBodyLightsFogRear Fog lights.
	FieldVehicleBodyLightsFogRear = "Vehicle_Body_Lights_Fog_Rear"
	// FieldVehicleBodyLightsFogRearIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	FieldVehicleBodyLightsFogRearIsDefect = "Vehicle_Body_Lights_Fog_Rear_IsDefect"
	// FieldVehicleBodyLightsFogRearIsOn Indicates if light is on or off. True = On. False = Off.
	FieldVehicleBodyLightsFogRearIsOn = "Vehicle_Body_Lights_Fog_Rear_IsOn"
	// FieldVehicleBodyLightsHazard Hazard lights.
	FieldVehicleBodyLightsHazard = "Vehicle_Body_Lights_Hazard"
	// FieldVehicleBodyLightsHazardIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	FieldVehicleBodyLightsHazardIsDefect = "Vehicle_Body_Lights_Hazard_IsDefect"
	// FieldVehicleBodyLightsHazardIsSignaling Indicates if light is signaling or off. True = signaling. False = Off.
	FieldVehicleBodyLightsHazardIsSignaling = "Vehicle_Body_Lights_Hazard_IsSignaling"
	// FieldVehicleBodyLightsIsHighBeamSwitchOn Status of the high beam switch. True = high beam enabled. False = high beam not enabled.
	FieldVehicleBodyLightsIsHighBeamSwitchOn = "Vehicle_Body_Lights_IsHighBeamSwitchOn"
	// FieldVehicleBodyLightsLicensePlate License plate lights.
	FieldVehicleBodyLightsLicensePlate = "Vehicle_Body_Lights_LicensePlate"
	// FieldVehicleBodyLightsLicensePlateIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	FieldVehicleBodyLightsLicensePlateIsDefect = "Vehicle_Body_Lights_LicensePlate_IsDefect"
	// FieldVehicleBodyLightsLicensePlateIsOn Indicates if light is on or off. True = On. False = Off.
	FieldVehicleBodyLightsLicensePlateIsOn = "Vehicle_Body_Lights_LicensePlate_IsOn"
	// FieldVehicleBodyLightsLightSwitch Status of the vehicle main light switch.
	FieldVehicleBodyLightsLightSwitch = "Vehicle_Body_Lights_LightSwitch"
	// FieldVehicleBodyLightsParking Parking lights.
	FieldVehicleBodyLightsParking = "Vehicle_Body_Lights_Parking"
	// FieldVehicleBodyLightsParkingIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	FieldVehicleBodyLightsParkingIsDefect = "Vehicle_Body_Lights_Parking_IsDefect"
	// FieldVehicleBodyLightsParkingIsOn Indicates if light is on or off. True = On. False = Off.
	FieldVehicleBodyLightsParkingIsOn = "Vehicle_Body_Lights_Parking_IsOn"
	// FieldVehicleBodyLightsRunning Daytime running lights (DRL).
	FieldVehicleBodyLightsRunning = "Vehicle_Body_Lights_Running"
	// FieldVehicleBodyLightsRunningIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	FieldVehicleBodyLightsRunningIsDefect = "Vehicle_Body_Lights_Running_IsDefect"
	// FieldVehicleBodyLightsRunningIsOn Indicates if light is on or off. True = On. False = Off.
	FieldVehicleBodyLightsRunningIsOn = "Vehicle_Body_Lights_Running_IsOn"
	// FieldVehicleBodyMirrors All mirrors.
	FieldVehicleBodyMirrors = "Vehicle_Body_Mirrors"
	// FieldVehicleBodyMirrorsDriverSide All mirrors.
	FieldVehicleBodyMirrorsDriverSide = "Vehicle_Body_Mirrors_DriverSide"
	// FieldVehicleBodyMirrorsDriverSideIsFolded Is mirror folded? True = Fully or partially folded. False = Fully unfolded.
	FieldVehicleBodyMirrorsDriverSideIsFolded = "Vehicle_Body_Mirrors_DriverSide_IsFolded"
	// FieldVehicleBodyMirrorsDriverSideIsHeatingOn Mirror Heater on or off. True = Heater On. False = Heater Off.
	FieldVehicleBodyMirrorsDriverSideIsHeatingOn = "Vehicle_Body_Mirrors_DriverSide_IsHeatingOn"
	// FieldVehicleBodyMirrorsDriverSideIsLocked Is mirror movement locked? True = Locked, mirror will not react to Tilt/Pan change. False = Unlocked.
	FieldVehicleBodyMirrorsDriverSideIsLocked = "Vehicle_Body_Mirrors_DriverSide_IsLocked"
	// FieldVehicleBodyMirrorsDriverSidePan Mirror pan as a percent. 0 = Center Position. 100 = Fully Left Position. -100 = Fully Right Position.
	FieldVehicleBodyMirrorsDriverSidePan = "Vehicle_Body_Mirrors_DriverSide_Pan"
	// FieldVehicleBodyMirrorsDriverSideTilt Mirror tilt as a percent. 0 = Center Position. 100 = Fully Upward Position. -100 = Fully Downward Position.
	FieldVehicleBodyMirrorsDriverSideTilt = "Vehicle_Body_Mirrors_DriverSide_Tilt"
	// FieldVehicleBodyMirrorsPassengerSide All mirrors.
	FieldVehicleBodyMirrorsPassengerSide = "Vehicle_Body_Mirrors_PassengerSide"
	// FieldVehicleBodyMirrorsPassengerSideIsFolded Is mirror folded? True = Fully or partially folded. False = Fully unfolded.
	FieldVehicleBodyMirrorsPassengerSideIsFolded = "Vehicle_Body_Mirrors_PassengerSide_IsFolded"
	// FieldVehicleBodyMirrorsPassengerSideIsHeatingOn Mirror Heater on or off. True = Heater On. False = Heater Off.
	FieldVehicleBodyMirrorsPassengerSideIsHeatingOn = "Vehicle_Body_Mirrors_PassengerSide_IsHeatingOn"
	// FieldVehicleBodyMirrorsPassengerSideIsLocked Is mirror movement locked? True = Locked, mirror will not react to Tilt/Pan change. False = Unlocked.
	FieldVehicleBodyMirrorsPassengerSideIsLocked = "Vehicle_Body_Mirrors_PassengerSide_IsLocked"
	// FieldVehicleBodyMirrorsPassengerSidePan Mirror pan as a percent. 0 = Center Position. 100 = Fully Left Position. -100 = Fully Right Position.
	FieldVehicleBodyMirrorsPassengerSidePan = "Vehicle_Body_Mirrors_PassengerSide_Pan"
	// FieldVehicleBodyMirrorsPassengerSideTilt Mirror tilt as a percent. 0 = Center Position. 100 = Fully Upward Position. -100 = Fully Downward Position.
	FieldVehicleBodyMirrorsPassengerSideTilt = "Vehicle_Body_Mirrors_PassengerSide_Tilt"
	// FieldVehicleBodyPowerOptimizeLevel Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
	FieldVehicleBodyPowerOptimizeLevel = "Vehicle_Body_PowerOptimizeLevel"
	// FieldVehicleBodyRaindetection Rain sensor signals.
	FieldVehicleBodyRaindetection = "Vehicle_Body_Raindetection"
	// FieldVehicleBodyRaindetectionIntensity Rain intensity. 0 = Dry, No Rain. 100 = Covered.
	FieldVehicleBodyRaindetectionIntensity = "Vehicle_Body_Raindetection_Intensity"
	// FieldVehicleBodyRearMainSpoilerPosition Rear spoiler position, 0% = Spoiler fully stowed. 100% = Spoiler fully exposed.
	FieldVehicleBodyRearMainSpoilerPosition = "Vehicle_Body_RearMainSpoilerPosition"
	// FieldVehicleBodyRefuelPosition Location of the fuel cap or charge port.
	FieldVehicleBodyRefuelPosition = "Vehicle_Body_RefuelPosition"
	// FieldVehicleBodyTrunk Trunk status. Start position for Trunk is Closed.
	FieldVehicleBodyTrunk = "Vehicle_Body_Trunk"
	// FieldVehicleBodyTrunkFront Trunk status. Start position for Trunk is Closed.
	FieldVehicleBodyTrunkFront = "Vehicle_Body_Trunk_Front"
	// FieldVehicleBodyTrunkFrontIsLightOn Is trunk light on
	FieldVehicleBodyTrunkFrontIsLightOn = "Vehicle_Body_Trunk_Front_IsLightOn"
	// FieldVehicleBodyTrunkFrontIsLocked Is item locked or unlocked. True = Locked. False = Unlocked.
	FieldVehicleBodyTrunkFrontIsLocked = "Vehicle_Body_Trunk_Front_IsLocked"
	// FieldVehicleBodyTrunkFrontIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	FieldVehicleBodyTrunkFrontIsOpen = "Vehicle_Body_Trunk_Front_IsOpen"
	// FieldVehicleBodyTrunkFrontPosition Item position. 0 = Start position 100 = End position.
	FieldVehicleBodyTrunkFrontPosition = "Vehicle_Body_Trunk_Front_Position"
	// FieldVehicleBodyTrunkFrontSwitch Switch controlling sliding action such as window, sunroof, or blind.
	FieldVehicleBodyTrunkFrontSwitch = "Vehicle_Body_Trunk_Front_Switch"
	// FieldVehicleBodyTrunkRear Trunk status. Start position for Trunk is Closed.
	FieldVehicleBodyTrunkRear = "Vehicle_Body_Trunk_Rear"
	// FieldVehicleBodyTrunkRearIsLightOn Is trunk light on
	FieldVehicleBodyTrunkRearIsLightOn = "Vehicle_Body_Trunk_Rear_IsLightOn"
	// FieldVehicleBodyTrunkRearIsLocked Is item locked or unlocked. True = Locked. False = Unlocked.
	FieldVehicleBodyTrunkRearIsLocked = "Vehicle_Body_Trunk_Rear_IsLocked"
	// FieldVehicleBodyTrunkRearIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	FieldVehicleBodyTrunkRearIsOpen = "Vehicle_Body_Trunk_Rear_IsOpen"
	// FieldVehicleBodyTrunkRearPosition Item position. 0 = Start position 100 = End position.
	FieldVehicleBodyTrunkRearPosition = "Vehicle_Body_Trunk_Rear_Position"
	// FieldVehicleBodyTrunkRearSwitch Switch controlling sliding action such as window, sunroof, or blind.
	FieldVehicleBodyTrunkRearSwitch = "Vehicle_Body_Trunk_Rear_Switch"
	// FieldVehicleBodyWindshield Windshield signals.
	FieldVehicleBodyWindshield = "Vehicle_Body_Windshield"
	// FieldVehicleBodyWindshieldFront Windshield signals.
	FieldVehicleBodyWindshieldFront = "Vehicle_Body_Windshield_Front"
	// FieldVehicleBodyWindshieldFrontIsHeatingOn Windshield heater status. False - off, True - on.
	FieldVehicleBodyWindshieldFrontIsHeatingOn = "Vehicle_Body_Windshield_Front_IsHeatingOn"
	// FieldVehicleBodyWindshieldFrontWasherFluid Windshield washer fluid signals
	FieldVehicleBodyWindshieldFrontWasherFluid = "Vehicle_Body_Windshield_Front_WasherFluid"
	// FieldVehicleBodyWindshieldFrontWasherFluidIsLevelLow Low level indication for washer fluid. True = Level Low. False = Level OK.
	FieldVehicleBodyWindshieldFrontWasherFluidIsLevelLow = "Vehicle_Body_Windshield_Front_WasherFluid_IsLevelLow"
	// FieldVehicleBodyWindshieldFrontWasherFluidLevel Washer fluid level as a percent. 0 = Empty. 100 = Full.
	FieldVehicleBodyWindshieldFrontWasherFluidLevel = "Vehicle_Body_Windshield_Front_WasherFluid_Level"
	// FieldVehicleBodyWindshieldFrontWiping Windshield wiper signals.
	FieldVehicleBodyWindshieldFrontWiping = "Vehicle_Body_Windshield_Front_Wiping"
	// FieldVehicleBodyWindshieldFrontWipingIntensity Relative intensity/sensitivity for interval and rain sensor mode as requested by user/driver. Has no significance if Windshield.Wiping.Mode is OFF/SLOW/MEDIUM/FAST 0 - wipers inactive. 1 - minimum intensity (lowest frequency/sensitivity, longest interval). 2/3/4/... - higher intensity (higher frequency/sensitivity, shorter interval). Maximum value supported is vehicle specific.
	FieldVehicleBodyWindshieldFrontWipingIntensity = "Vehicle_Body_Windshield_Front_Wiping_Intensity"
	// FieldVehicleBodyWindshieldFrontWipingIsWipersWorn Wiper wear status. True = Worn, Replacement recommended or required. False = Not Worn.
	FieldVehicleBodyWindshieldFrontWipingIsWipersWorn = "Vehicle_Body_Windshield_Front_Wiping_IsWipersWorn"
	// FieldVehicleBodyWindshieldFrontWipingMode Wiper mode requested by user/driver. INTERVAL indicates intermittent wiping, with fixed time interval between each wipe. RAIN_SENSOR indicates intermittent wiping based on rain intensity.
	FieldVehicleBodyWindshieldFrontWipingMode = "Vehicle_Body_Windshield_Front_Wiping_Mode"
	// FieldVehicleBodyWindshieldFrontWipingSystem Signals to control behavior of wipers in detail. By default VSS expects only one instance.
	FieldVehicleBodyWindshieldFrontWipingSystem = "Vehicle_Body_Windshield_Front_Wiping_System"
	// FieldVehicleBodyWindshieldFrontWipingSystemActualPosition Actual position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific.
	FieldVehicleBodyWindshieldFrontWipingSystemActualPosition = "Vehicle_Body_Windshield_Front_Wiping_System_ActualPosition"
	// FieldVehicleBodyWindshieldFrontWipingSystemDriveCurrent Actual current used by wiper drive.
	FieldVehicleBodyWindshieldFrontWipingSystemDriveCurrent = "Vehicle_Body_Windshield_Front_Wiping_System_DriveCurrent"
	// FieldVehicleBodyWindshieldFrontWipingSystemFrequency Wiping frequency/speed, measured in cycles per minute. The signal concerns the actual speed of the wiper blades when moving. Intervals/pauses are excluded, i.e. the value corresponds to the number of cycles that would be completed in 1 minute if wiping permanently over default range.
	FieldVehicleBodyWindshieldFrontWipingSystemFrequency = "Vehicle_Body_Windshield_Front_Wiping_System_Frequency"
	// FieldVehicleBodyWindshieldFrontWipingSystemIsBlocked Indicates if wiper movement is blocked. True = Movement blocked. False = Movement not blocked.
	FieldVehicleBodyWindshieldFrontWipingSystemIsBlocked = "Vehicle_Body_Windshield_Front_Wiping_System_IsBlocked"
	// FieldVehicleBodyWindshieldFrontWipingSystemIsEndingWipeCycle Indicates if current wipe movement is completed or near completion. True = Movement is completed or near completion. Changes to RequestedPosition will be executed first after reaching previous RequestedPosition, if it has not already been reached. False = Movement is not near completion. Any change to RequestedPosition will be executed immediately. Change of direction may not be allowed.
	FieldVehicleBodyWindshieldFrontWipingSystemIsEndingWipeCycle = "Vehicle_Body_Windshield_Front_Wiping_System_IsEndingWipeCycle"
	// FieldVehicleBodyWindshieldFrontWipingSystemIsOverheated Indicates if wiper system is overheated. True = Wiper system overheated. False = Wiper system not overheated.
	FieldVehicleBodyWindshieldFrontWipingSystemIsOverheated = "Vehicle_Body_Windshield_Front_Wiping_System_IsOverheated"
	// FieldVehicleBodyWindshieldFrontWipingSystemIsPositionReached Indicates if a requested position has been reached. IsPositionReached refers to the previous position in case the TargetPosition is updated while IsEndingWipeCycle=True. True = Current or Previous TargetPosition reached. False = Position not (yet) reached, or wipers have moved away from the reached position.
	FieldVehicleBodyWindshieldFrontWipingSystemIsPositionReached = "Vehicle_Body_Windshield_Front_Wiping_System_IsPositionReached"
	// FieldVehicleBodyWindshieldFrontWipingSystemIsWiperError Indicates system failure. True if wiping is disabled due to system failure.
	FieldVehicleBodyWindshieldFrontWipingSystemIsWiperError = "Vehicle_Body_Windshield_Front_Wiping_System_IsWiperError"
	// FieldVehicleBodyWindshieldFrontWipingSystemIsWiping Indicates wiper movement. True if wiper blades are moving. Change of direction shall be considered as IsWiping if wipers will continue to move directly after the change of direction.
	FieldVehicleBodyWindshieldFrontWipingSystemIsWiping = "Vehicle_Body_Windshield_Front_Wiping_System_IsWiping"
	// FieldVehicleBodyWindshieldFrontWipingSystemMode Requested mode of wiper system. STOP_HOLD means that the wipers shall move to position given by TargetPosition and then hold the position. WIPE means that wipers shall move to the position given by TargetPosition and then hold the position if no new TargetPosition is requested. PLANT_MODE means that wiping is disabled. Exact behavior is vehicle specific. EMERGENCY_STOP means that wiping shall be immediately stopped without holding the position.
	FieldVehicleBodyWindshieldFrontWipingSystemMode = "Vehicle_Body_Windshield_Front_Wiping_System_Mode"
	// FieldVehicleBodyWindshieldFrontWipingSystemTargetPosition Requested position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific. System behavior when receiving TargetPosition depends on Mode and IsEndingWipeCycle. Supported values are vehicle specific and might be dynamically corrected. If IsEndingWipeCycle=True then wipers will complete current movement before actuating new TargetPosition. If IsEndingWipeCycle=False then wipers will directly change destination if the TargetPosition is changed.
	FieldVehicleBodyWindshieldFrontWipingSystemTargetPosition = "Vehicle_Body_Windshield_Front_Wiping_System_TargetPosition"
	// FieldVehicleBodyWindshieldFrontWipingWiperWear Wiper wear as percent. 0 = No Wear. 100 = Worn. Replacement required. Method for calculating or estimating wiper wear is vehicle specific. For windshields with multiple wipers the wear reported shall correspond to the most worn wiper.
	FieldVehicleBodyWindshieldFrontWipingWiperWear = "Vehicle_Body_Windshield_Front_Wiping_WiperWear"
	// FieldVehicleBodyWindshieldRear Windshield signals.
	FieldVehicleBodyWindshieldRear = "Vehicle_Body_Windshield_Rear"
	// FieldVehicleBodyWindshieldRearIsHeatingOn Windshield heater status. False - off, True - on.
	FieldVehicleBodyWindshieldRearIsHeatingOn = "Vehicle_Body_Windshield_Rear_IsHeatingOn"
	// FieldVehicleBodyWindshieldRearWasherFluid Windshield washer fluid signals
	FieldVehicleBodyWindshieldRearWasherFluid = "Vehicle_Body_Windshield_Rear_WasherFluid"
	// FieldVehicleBodyWindshieldRearWasherFluidIsLevelLow Low level indication for washer fluid. True = Level Low. False = Level OK.
	FieldVehicleBodyWindshieldRearWasherFluidIsLevelLow = "Vehicle_Body_Windshield_Rear_WasherFluid_IsLevelLow"
	// FieldVehicleBodyWindshieldRearWasherFluidLevel Washer fluid level as a percent. 0 = Empty. 100 = Full.
	FieldVehicleBodyWindshieldRearWasherFluidLevel = "Vehicle_Body_Windshield_Rear_WasherFluid_Level"
	// FieldVehicleBodyWindshieldRearWiping Windshield wiper signals.
	FieldVehicleBodyWindshieldRearWiping = "Vehicle_Body_Windshield_Rear_Wiping"
	// FieldVehicleBodyWindshieldRearWipingIntensity Relative intensity/sensitivity for interval and rain sensor mode as requested by user/driver. Has no significance if Windshield.Wiping.Mode is OFF/SLOW/MEDIUM/FAST 0 - wipers inactive. 1 - minimum intensity (lowest frequency/sensitivity, longest interval). 2/3/4/... - higher intensity (higher frequency/sensitivity, shorter interval). Maximum value supported is vehicle specific.
	FieldVehicleBodyWindshieldRearWipingIntensity = "Vehicle_Body_Windshield_Rear_Wiping_Intensity"
	// FieldVehicleBodyWindshieldRearWipingIsWipersWorn Wiper wear status. True = Worn, Replacement recommended or required. False = Not Worn.
	FieldVehicleBodyWindshieldRearWipingIsWipersWorn = "Vehicle_Body_Windshield_Rear_Wiping_IsWipersWorn"
	// FieldVehicleBodyWindshieldRearWipingMode Wiper mode requested by user/driver. INTERVAL indicates intermittent wiping, with fixed time interval between each wipe. RAIN_SENSOR indicates intermittent wiping based on rain intensity.
	FieldVehicleBodyWindshieldRearWipingMode = "Vehicle_Body_Windshield_Rear_Wiping_Mode"
	// FieldVehicleBodyWindshieldRearWipingSystem Signals to control behavior of wipers in detail. By default VSS expects only one instance.
	FieldVehicleBodyWindshieldRearWipingSystem = "Vehicle_Body_Windshield_Rear_Wiping_System"
	// FieldVehicleBodyWindshieldRearWipingSystemActualPosition Actual position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific.
	FieldVehicleBodyWindshieldRearWipingSystemActualPosition = "Vehicle_Body_Windshield_Rear_Wiping_System_ActualPosition"
	// FieldVehicleBodyWindshieldRearWipingSystemDriveCurrent Actual current used by wiper drive.
	FieldVehicleBodyWindshieldRearWipingSystemDriveCurrent = "Vehicle_Body_Windshield_Rear_Wiping_System_DriveCurrent"
	// FieldVehicleBodyWindshieldRearWipingSystemFrequency Wiping frequency/speed, measured in cycles per minute. The signal concerns the actual speed of the wiper blades when moving. Intervals/pauses are excluded, i.e. the value corresponds to the number of cycles that would be completed in 1 minute if wiping permanently over default range.
	FieldVehicleBodyWindshieldRearWipingSystemFrequency = "Vehicle_Body_Windshield_Rear_Wiping_System_Frequency"
	// FieldVehicleBodyWindshieldRearWipingSystemIsBlocked Indicates if wiper movement is blocked. True = Movement blocked. False = Movement not blocked.
	FieldVehicleBodyWindshieldRearWipingSystemIsBlocked = "Vehicle_Body_Windshield_Rear_Wiping_System_IsBlocked"
	// FieldVehicleBodyWindshieldRearWipingSystemIsEndingWipeCycle Indicates if current wipe movement is completed or near completion. True = Movement is completed or near completion. Changes to RequestedPosition will be executed first after reaching previous RequestedPosition, if it has not already been reached. False = Movement is not near completion. Any change to RequestedPosition will be executed immediately. Change of direction may not be allowed.
	FieldVehicleBodyWindshieldRearWipingSystemIsEndingWipeCycle = "Vehicle_Body_Windshield_Rear_Wiping_System_IsEndingWipeCycle"
	// FieldVehicleBodyWindshieldRearWipingSystemIsOverheated Indicates if wiper system is overheated. True = Wiper system overheated. False = Wiper system not overheated.
	FieldVehicleBodyWindshieldRearWipingSystemIsOverheated = "Vehicle_Body_Windshield_Rear_Wiping_System_IsOverheated"
	// FieldVehicleBodyWindshieldRearWipingSystemIsPositionReached Indicates if a requested position has been reached. IsPositionReached refers to the previous position in case the TargetPosition is updated while IsEndingWipeCycle=True. True = Current or Previous TargetPosition reached. False = Position not (yet) reached, or wipers have moved away from the reached position.
	FieldVehicleBodyWindshieldRearWipingSystemIsPositionReached = "Vehicle_Body_Windshield_Rear_Wiping_System_IsPositionReached"
	// FieldVehicleBodyWindshieldRearWipingSystemIsWiperError Indicates system failure. True if wiping is disabled due to system failure.
	FieldVehicleBodyWindshieldRearWipingSystemIsWiperError = "Vehicle_Body_Windshield_Rear_Wiping_System_IsWiperError"
	// FieldVehicleBodyWindshieldRearWipingSystemIsWiping Indicates wiper movement. True if wiper blades are moving. Change of direction shall be considered as IsWiping if wipers will continue to move directly after the change of direction.
	FieldVehicleBodyWindshieldRearWipingSystemIsWiping = "Vehicle_Body_Windshield_Rear_Wiping_System_IsWiping"
	// FieldVehicleBodyWindshieldRearWipingSystemMode Requested mode of wiper system. STOP_HOLD means that the wipers shall move to position given by TargetPosition and then hold the position. WIPE means that wipers shall move to the position given by TargetPosition and then hold the position if no new TargetPosition is requested. PLANT_MODE means that wiping is disabled. Exact behavior is vehicle specific. EMERGENCY_STOP means that wiping shall be immediately stopped without holding the position.
	FieldVehicleBodyWindshieldRearWipingSystemMode = "Vehicle_Body_Windshield_Rear_Wiping_System_Mode"
	// FieldVehicleBodyWindshieldRearWipingSystemTargetPosition Requested position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific. System behavior when receiving TargetPosition depends on Mode and IsEndingWipeCycle. Supported values are vehicle specific and might be dynamically corrected. If IsEndingWipeCycle=True then wipers will complete current movement before actuating new TargetPosition. If IsEndingWipeCycle=False then wipers will directly change destination if the TargetPosition is changed.
	FieldVehicleBodyWindshieldRearWipingSystemTargetPosition = "Vehicle_Body_Windshield_Rear_Wiping_System_TargetPosition"
	// FieldVehicleBodyWindshieldRearWipingWiperWear Wiper wear as percent. 0 = No Wear. 100 = Worn. Replacement required. Method for calculating or estimating wiper wear is vehicle specific. For windshields with multiple wipers the wear reported shall correspond to the most worn wiper.
	FieldVehicleBodyWindshieldRearWipingWiperWear = "Vehicle_Body_Windshield_Rear_Wiping_WiperWear"
	// FieldVehicleCabin All in-cabin components, including doors.
	FieldVehicleCabin = "Vehicle_Cabin"
	// FieldVehicleCabinConvertible Convertible roof.
	FieldVehicleCabinConvertible = "Vehicle_Cabin_Convertible"
	// FieldVehicleCabinConvertibleStatus Roof status on convertible vehicles.
	FieldVehicleCabinConvertibleStatus = "Vehicle_Cabin_Convertible_Status"
	// FieldVehicleCabinDoor All doors, including windows and switches.
	FieldVehicleCabinDoor = "Vehicle_Cabin_Door"
	// FieldVehicleCabinDoorRow1 All doors, including windows and switches.
	FieldVehicleCabinDoorRow1 = "Vehicle_Cabin_Door_Row1"
	// FieldVehicleCabinDoorRow1DriverSide All doors, including windows and switches.
	FieldVehicleCabinDoorRow1DriverSide = "Vehicle_Cabin_Door_Row1_DriverSide"
	// FieldVehicleCabinDoorRow1DriverSideIsChildLockActive Is door child lock active. True = Door cannot be opened from inside. False = Door can be opened from inside.
	FieldVehicleCabinDoorRow1DriverSideIsChildLockActive = "Vehicle_Cabin_Door_Row1_DriverSide_IsChildLockActive"
	// FieldVehicleCabinDoorRow1DriverSideIsLocked Is item locked or unlocked. True = Locked. False = Unlocked.
	FieldVehicleCabinDoorRow1DriverSideIsLocked = "Vehicle_Cabin_Door_Row1_DriverSide_IsLocked"
	// FieldVehicleCabinDoorRow1DriverSideIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	FieldVehicleCabinDoorRow1DriverSideIsOpen = "Vehicle_Cabin_Door_Row1_DriverSide_IsOpen"
	// FieldVehicleCabinDoorRow1DriverSidePosition Item position. 0 = Start position 100 = End position.
	FieldVehicleCabinDoorRow1DriverSidePosition = "Vehicle_Cabin_Door_Row1_DriverSide_Position"
	// FieldVehicleCabinDoorRow1DriverSideShade Side window shade. Open = Retracted, Closed = Deployed. Start position for Shade is Open/Retracted.
	FieldVehicleCabinDoorRow1DriverSideShade = "Vehicle_Cabin_Door_Row1_DriverSide_Shade"
	// FieldVehicleCabinDoorRow1DriverSideShadeIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	FieldVehicleCabinDoorRow1DriverSideShadeIsOpen = "Vehicle_Cabin_Door_Row1_DriverSide_Shade_IsOpen"
	// FieldVehicleCabinDoorRow1DriverSideShadePosition Item position. 0 = Start position 100 = End position.
	FieldVehicleCabinDoorRow1DriverSideShadePosition = "Vehicle_Cabin_Door_Row1_DriverSide_Shade_Position"
	// FieldVehicleCabinDoorRow1DriverSideShadeSwitch Switch controlling sliding action such as window, sunroof, or blind.
	FieldVehicleCabinDoorRow1DriverSideShadeSwitch = "Vehicle_Cabin_Door_Row1_DriverSide_Shade_Switch"
	// FieldVehicleCabinDoorRow1DriverSideSwitch Switch controlling sliding action such as window, sunroof, or blind.
	FieldVehicleCabinDoorRow1DriverSideSwitch = "Vehicle_Cabin_Door_Row1_DriverSide_Switch"
	// FieldVehicleCabinDoorRow1DriverSideWindow Door window status. Start position for Window is Closed.
	FieldVehicleCabinDoorRow1DriverSideWindow = "Vehicle_Cabin_Door_Row1_DriverSide_Window"
	// FieldVehicleCabinDoorRow1DriverSideWindowIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	FieldVehicleCabinDoorRow1DriverSideWindowIsOpen = "Vehicle_Cabin_Door_Row1_DriverSide_Window_IsOpen"
	// FieldVehicleCabinDoorRow1DriverSideWindowPosition Item position. 0 = Start position 100 = End position.
	FieldVehicleCabinDoorRow1DriverSideWindowPosition = "Vehicle_Cabin_Door_Row1_DriverSide_Window_Position"
	// FieldVehicleCabinDoorRow1DriverSideWindowSwitch Switch controlling sliding action such as window, sunroof, or blind.
	FieldVehicleCabinDoorRow1DriverSideWindowSwitch = "Vehicle_Cabin_Door_Row1_DriverSide_Window_Switch"
	// FieldVehicleCabinDoorRow1PassengerSide All doors, including windows and switches.
	FieldVehicleCabinDoorRow1PassengerSide = "Vehicle_Cabin_Door_Row1_PassengerSide"
	// FieldVehicleCabinDoorRow1PassengerSideIsChildLockActive Is door child lock active. True = Door cannot be opened from inside. False = Door can be opened from inside.
	FieldVehicleCabinDoorRow1PassengerSideIsChildLockActive = "Vehicle_Cabin_Door_Row1_PassengerSide_IsChildLockActive"
	// FieldVehicleCabinDoorRow1PassengerSideIsLocked Is item locked or unlocked. True = Locked. False = Unlocked.
	FieldVehicleCabinDoorRow1PassengerSideIsLocked = "Vehicle_Cabin_Door_Row1_PassengerSide_IsLocked"
	// FieldVehicleCabinDoorRow1PassengerSideIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	FieldVehicleCabinDoorRow1PassengerSideIsOpen = "Vehicle_Cabin_Door_Row1_PassengerSide_IsOpen"
	// FieldVehicleCabinDoorRow1PassengerSidePosition Item position. 0 = Start position 100 = End position.
	FieldVehicleCabinDoorRow1PassengerSidePosition = "Vehicle_Cabin_Door_Row1_PassengerSide_Position"
	// FieldVehicleCabinDoorRow1PassengerSideShade Side window shade. Open = Retracted, Closed = Deployed. Start position for Shade is Open/Retracted.
	FieldVehicleCabinDoorRow1PassengerSideShade = "Vehicle_Cabin_Door_Row1_PassengerSide_Shade"
	// FieldVehicleCabinDoorRow1PassengerSideShadeIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	FieldVehicleCabinDoorRow1PassengerSideShadeIsOpen = "Vehicle_Cabin_Door_Row1_PassengerSide_Shade_IsOpen"
	// FieldVehicleCabinDoorRow1PassengerSideShadePosition Item position. 0 = Start position 100 = End position.
	FieldVehicleCabinDoorRow1PassengerSideShadePosition = "Vehicle_Cabin_Door_Row1_PassengerSide_Shade_Position"
	// FieldVehicleCabinDoorRow1PassengerSideShadeSwitch Switch controlling sliding action such as window, sunroof, or blind.
	FieldVehicleCabinDoorRow1PassengerSideShadeSwitch = "Vehicle_Cabin_Door_Row1_PassengerSide_Shade_Switch"
	// FieldVehicleCabinDoorRow1PassengerSideSwitch Switch controlling sliding action such as window, sunroof, or blind.
	FieldVehicleCabinDoorRow1PassengerSideSwitch = "Vehicle_Cabin_Door_Row1_PassengerSide_Switch"
	// FieldVehicleCabinDoorRow1PassengerSideWindow Door window status. Start position for Window is Closed.
	FieldVehicleCabinDoorRow1PassengerSideWindow = "Vehicle_Cabin_Door_Row1_PassengerSide_Window"
	// FieldVehicleCabinDoorRow1PassengerSideWindowIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	FieldVehicleCabinDoorRow1PassengerSideWindowIsOpen = "Vehicle_Cabin_Door_Row1_PassengerSide_Window_IsOpen"
	// FieldVehicleCabinDoorRow1PassengerSideWindowPosition Item position. 0 = Start position 100 = End position.
	FieldVehicleCabinDoorRow1PassengerSideWindowPosition = "Vehicle_Cabin_Door_Row1_PassengerSide_Window_Position"
	// FieldVehicleCabinDoorRow1PassengerSideWindowSwitch Switch controlling sliding action such as window, sunroof, or blind.
	FieldVehicleCabinDoorRow1PassengerSideWindowSwitch = "Vehicle_Cabin_Door_Row1_PassengerSide_Window_Switch"
	// FieldVehicleCabinDoorRow2 All doors, including windows and switches.
	FieldVehicleCabinDoorRow2 = "Vehicle_Cabin_Door_Row2"
	// FieldVehicleCabinDoorRow2DriverSide All doors, including windows and switches.
	FieldVehicleCabinDoorRow2DriverSide = "Vehicle_Cabin_Door_Row2_DriverSide"
	// FieldVehicleCabinDoorRow2DriverSideIsChildLockActive Is door child lock active. True = Door cannot be opened from inside. False = Door can be opened from inside.
	FieldVehicleCabinDoorRow2DriverSideIsChildLockActive = "Vehicle_Cabin_Door_Row2_DriverSide_IsChildLockActive"
	// FieldVehicleCabinDoorRow2DriverSideIsLocked Is item locked or unlocked. True = Locked. False = Unlocked.
	FieldVehicleCabinDoorRow2DriverSideIsLocked = "Vehicle_Cabin_Door_Row2_DriverSide_IsLocked"
	// FieldVehicleCabinDoorRow2DriverSideIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	FieldVehicleCabinDoorRow2DriverSideIsOpen = "Vehicle_Cabin_Door_Row2_DriverSide_IsOpen"
	// FieldVehicleCabinDoorRow2DriverSidePosition Item position. 0 = Start position 100 = End position.
	FieldVehicleCabinDoorRow2DriverSidePosition = "Vehicle_Cabin_Door_Row2_DriverSide_Position"
	// FieldVehicleCabinDoorRow2DriverSideShade Side window shade. Open = Retracted, Closed = Deployed. Start position for Shade is Open/Retracted.
	FieldVehicleCabinDoorRow2DriverSideShade = "Vehicle_Cabin_Door_Row2_DriverSide_Shade"
	// FieldVehicleCabinDoorRow2DriverSideShadeIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	FieldVehicleCabinDoorRow2DriverSideShadeIsOpen = "Vehicle_Cabin_Door_Row2_DriverSide_Shade_IsOpen"
	// FieldVehicleCabinDoorRow2DriverSideShadePosition Item position. 0 = Start position 100 = End position.
	FieldVehicleCabinDoorRow2DriverSideShadePosition = "Vehicle_Cabin_Door_Row2_DriverSide_Shade_Position"
	// FieldVehicleCabinDoorRow2DriverSideShadeSwitch Switch controlling sliding action such as window, sunroof, or blind.
	FieldVehicleCabinDoorRow2DriverSideShadeSwitch = "Vehicle_Cabin_Door_Row2_DriverSide_Shade_Switch"
	// FieldVehicleCabinDoorRow2DriverSideSwitch Switch controlling sliding action such as window, sunroof, or blind.
	FieldVehicleCabinDoorRow2DriverSideSwitch = "Vehicle_Cabin_Door_Row2_DriverSide_Switch"
	// FieldVehicleCabinDoorRow2DriverSideWindow Door window status. Start position for Window is Closed.
	FieldVehicleCabinDoorRow2DriverSideWindow = "Vehicle_Cabin_Door_Row2_DriverSide_Window"
	// FieldVehicleCabinDoorRow2DriverSideWindowIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	FieldVehicleCabinDoorRow2DriverSideWindowIsOpen = "Vehicle_Cabin_Door_Row2_DriverSide_Window_IsOpen"
	// FieldVehicleCabinDoorRow2DriverSideWindowPosition Item position. 0 = Start position 100 = End position.
	FieldVehicleCabinDoorRow2DriverSideWindowPosition = "Vehicle_Cabin_Door_Row2_DriverSide_Window_Position"
	// FieldVehicleCabinDoorRow2DriverSideWindowSwitch Switch controlling sliding action such as window, sunroof, or blind.
	FieldVehicleCabinDoorRow2DriverSideWindowSwitch = "Vehicle_Cabin_Door_Row2_DriverSide_Window_Switch"
	// FieldVehicleCabinDoorRow2PassengerSide All doors, including windows and switches.
	FieldVehicleCabinDoorRow2PassengerSide = "Vehicle_Cabin_Door_Row2_PassengerSide"
	// FieldVehicleCabinDoorRow2PassengerSideIsChildLockActive Is door child lock active. True = Door cannot be opened from inside. False = Door can be opened from inside.
	FieldVehicleCabinDoorRow2PassengerSideIsChildLockActive = "Vehicle_Cabin_Door_Row2_PassengerSide_IsChildLockActive"
	// FieldVehicleCabinDoorRow2PassengerSideIsLocked Is item locked or unlocked. True = Locked. False = Unlocked.
	FieldVehicleCabinDoorRow2PassengerSideIsLocked = "Vehicle_Cabin_Door_Row2_PassengerSide_IsLocked"
	// FieldVehicleCabinDoorRow2PassengerSideIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	FieldVehicleCabinDoorRow2PassengerSideIsOpen = "Vehicle_Cabin_Door_Row2_PassengerSide_IsOpen"
	// FieldVehicleCabinDoorRow2PassengerSidePosition Item position. 0 = Start position 100 = End position.
	FieldVehicleCabinDoorRow2PassengerSidePosition = "Vehicle_Cabin_Door_Row2_PassengerSide_Position"
	// FieldVehicleCabinDoorRow2PassengerSideShade Side window shade. Open = Retracted, Closed = Deployed. Start position for Shade is Open/Retracted.
	FieldVehicleCabinDoorRow2PassengerSideShade = "Vehicle_Cabin_Door_Row2_PassengerSide_Shade"
	// FieldVehicleCabinDoorRow2PassengerSideShadeIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	FieldVehicleCabinDoorRow2PassengerSideShadeIsOpen = "Vehicle_Cabin_Door_Row2_PassengerSide_Shade_IsOpen"
	// FieldVehicleCabinDoorRow2PassengerSideShadePosition Item position. 0 = Start position 100 = End position.
	FieldVehicleCabinDoorRow2PassengerSideShadePosition = "Vehicle_Cabin_Door_Row2_PassengerSide_Shade_Position"
	// FieldVehicleCabinDoorRow2PassengerSideShadeSwitch Switch controlling sliding action such as window, sunroof, or blind.
	FieldVehicleCabinDoorRow2PassengerSideShadeSwitch = "Vehicle_Cabin_Door_Row2_PassengerSide_Shade_Switch"
	// FieldVehicleCabinDoorRow2PassengerSideSwitch Switch controlling sliding action such as window, sunroof, or blind.
	FieldVehicleCabinDoorRow2PassengerSideSwitch = "Vehicle_Cabin_Door_Row2_PassengerSide_Switch"
	// FieldVehicleCabinDoorRow2PassengerSideWindow Door window status. Start position for Window is Closed.
	FieldVehicleCabinDoorRow2PassengerSideWindow = "Vehicle_Cabin_Door_Row2_PassengerSide_Window"
	// FieldVehicleCabinDoorRow2PassengerSideWindowIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	FieldVehicleCabinDoorRow2PassengerSideWindowIsOpen = "Vehicle_Cabin_Door_Row2_PassengerSide_Window_IsOpen"
	// FieldVehicleCabinDoorRow2PassengerSideWindowPosition Item position. 0 = Start position 100 = End position.
	FieldVehicleCabinDoorRow2PassengerSideWindowPosition = "Vehicle_Cabin_Door_Row2_PassengerSide_Window_Position"
	// FieldVehicleCabinDoorRow2PassengerSideWindowSwitch Switch controlling sliding action such as window, sunroof, or blind.
	FieldVehicleCabinDoorRow2PassengerSideWindowSwitch = "Vehicle_Cabin_Door_Row2_PassengerSide_Window_Switch"
	// FieldVehicleCabinDoorCount Number of doors in vehicle.
	FieldVehicleCabinDoorCount = "Vehicle_Cabin_DoorCount"
	// FieldVehicleCabinDriverPosition The position of the driver seat in row 1.
	FieldVehicleCabinDriverPosition = "Vehicle_Cabin_DriverPosition"
	// FieldVehicleCabinHVAC Climate control
	FieldVehicleCabinHVAC = "Vehicle_Cabin_HVAC"
	// FieldVehicleCabinHVACAmbientAirTemperature Ambient air temperature inside the vehicle.
	FieldVehicleCabinHVACAmbientAirTemperature = "Vehicle_Cabin_HVAC_AmbientAirTemperature"
	// FieldVehicleCabinHVACIsAirConditioningActive Is Air conditioning active.
	FieldVehicleCabinHVACIsAirConditioningActive = "Vehicle_Cabin_HVAC_IsAirConditioningActive"
	// FieldVehicleCabinHVACIsAutoPowerOptimize Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
	FieldVehicleCabinHVACIsAutoPowerOptimize = "Vehicle_Cabin_HVAC_IsAutoPowerOptimize"
	// FieldVehicleCabinHVACIsFrontDefrosterActive Is front defroster active.
	FieldVehicleCabinHVACIsFrontDefrosterActive = "Vehicle_Cabin_HVAC_IsFrontDefrosterActive"
	// FieldVehicleCabinHVACIsRearDefrosterActive Is rear defroster active.
	FieldVehicleCabinHVACIsRearDefrosterActive = "Vehicle_Cabin_HVAC_IsRearDefrosterActive"
	// FieldVehicleCabinHVACIsRecirculationActive Is recirculation active.
	FieldVehicleCabinHVACIsRecirculationActive = "Vehicle_Cabin_HVAC_IsRecirculationActive"
	// FieldVehicleCabinHVACPowerOptimizeLevel Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
	FieldVehicleCabinHVACPowerOptimizeLevel = "Vehicle_Cabin_HVAC_PowerOptimizeLevel"
	// FieldVehicleCabinHVACStation HVAC for single station in the vehicle
	FieldVehicleCabinHVACStation = "Vehicle_Cabin_HVAC_Station"
	// FieldVehicleCabinHVACStationRow1 HVAC for single station in the vehicle
	FieldVehicleCabinHVACStationRow1 = "Vehicle_Cabin_HVAC_Station_Row1"
	// FieldVehicleCabinHVACStationRow1Driver HVAC for single station in the vehicle
	FieldVehicleCabinHVACStationRow1Driver = "Vehicle_Cabin_HVAC_Station_Row1_Driver"
	// FieldVehicleCabinHVACStationRow1DriverAirDistribution Direction of airstream
	FieldVehicleCabinHVACStationRow1DriverAirDistribution = "Vehicle_Cabin_HVAC_Station_Row1_Driver_AirDistribution"
	// FieldVehicleCabinHVACStationRow1DriverFanSpeed Fan Speed, 0 = off. 100 = max
	FieldVehicleCabinHVACStationRow1DriverFanSpeed = "Vehicle_Cabin_HVAC_Station_Row1_Driver_FanSpeed"
	// FieldVehicleCabinHVACStationRow1DriverTemperature Temperature
	FieldVehicleCabinHVACStationRow1DriverTemperature = "Vehicle_Cabin_HVAC_Station_Row1_Driver_Temperature"
	// FieldVehicleCabinHVACStationRow1Passenger HVAC for single station in the vehicle
	FieldVehicleCabinHVACStationRow1Passenger = "Vehicle_Cabin_HVAC_Station_Row1_Passenger"
	// FieldVehicleCabinHVACStationRow1PassengerAirDistribution Direction of airstream
	FieldVehicleCabinHVACStationRow1PassengerAirDistribution = "Vehicle_Cabin_HVAC_Station_Row1_Passenger_AirDistribution"
	// FieldVehicleCabinHVACStationRow1PassengerFanSpeed Fan Speed, 0 = off. 100 = max
	FieldVehicleCabinHVACStationRow1PassengerFanSpeed = "Vehicle_Cabin_HVAC_Station_Row1_Passenger_FanSpeed"
	// FieldVehicleCabinHVACStationRow1PassengerTemperature Temperature
	FieldVehicleCabinHVACStationRow1PassengerTemperature = "Vehicle_Cabin_HVAC_Station_Row1_Passenger_Temperature"
	// FieldVehicleCabinHVACStationRow2 HVAC for single station in the vehicle
	FieldVehicleCabinHVACStationRow2 = "Vehicle_Cabin_HVAC_Station_Row2"
	// FieldVehicleCabinHVACStationRow2Driver HVAC for single station in the vehicle
	FieldVehicleCabinHVACStationRow2Driver = "Vehicle_Cabin_HVAC_Station_Row2_Driver"
	// FieldVehicleCabinHVACStationRow2DriverAirDistribution Direction of airstream
	FieldVehicleCabinHVACStationRow2DriverAirDistribution = "Vehicle_Cabin_HVAC_Station_Row2_Driver_AirDistribution"
	// FieldVehicleCabinHVACStationRow2DriverFanSpeed Fan Speed, 0 = off. 100 = max
	FieldVehicleCabinHVACStationRow2DriverFanSpeed = "Vehicle_Cabin_HVAC_Station_Row2_Driver_FanSpeed"
	// FieldVehicleCabinHVACStationRow2DriverTemperature Temperature
	FieldVehicleCabinHVACStationRow2DriverTemperature = "Vehicle_Cabin_HVAC_Station_Row2_Driver_Temperature"
	// FieldVehicleCabinHVACStationRow2Passenger HVAC for single station in the vehicle
	FieldVehicleCabinHVACStationRow2Passenger = "Vehicle_Cabin_HVAC_Station_Row2_Passenger"
	// FieldVehicleCabinHVACStationRow2PassengerAirDistribution Direction of airstream
	FieldVehicleCabinHVACStationRow2PassengerAirDistribution = "Vehicle_Cabin_HVAC_Station_Row2_Passenger_AirDistribution"
	// FieldVehicleCabinHVACStationRow2PassengerFanSpeed Fan Speed, 0 = off. 100 = max
	FieldVehicleCabinHVACStationRow2PassengerFanSpeed = "Vehicle_Cabin_HVAC_Station_Row2_Passenger_FanSpeed"
	// FieldVehicleCabinHVACStationRow2PassengerTemperature Temperature
	FieldVehicleCabinHVACStationRow2PassengerTemperature = "Vehicle_Cabin_HVAC_Station_Row2_Passenger_Temperature"
	// FieldVehicleCabinHVACStationRow3 HVAC for single station in the vehicle
	FieldVehicleCabinHVACStationRow3 = "Vehicle_Cabin_HVAC_Station_Row3"
	// FieldVehicleCabinHVACStationRow3Driver HVAC for single station in the vehicle
	FieldVehicleCabinHVACStationRow3Driver = "Vehicle_Cabin_HVAC_Station_Row3_Driver"
	// FieldVehicleCabinHVACStationRow3DriverAirDistribution Direction of airstream
	FieldVehicleCabinHVACStationRow3DriverAirDistribution = "Vehicle_Cabin_HVAC_Station_Row3_Driver_AirDistribution"
	// FieldVehicleCabinHVACStationRow3DriverFanSpeed Fan Speed, 0 = off. 100 = max
	FieldVehicleCabinHVACStationRow3DriverFanSpeed = "Vehicle_Cabin_HVAC_Station_Row3_Driver_FanSpeed"
	// FieldVehicleCabinHVACStationRow3DriverTemperature Temperature
	FieldVehicleCabinHVACStationRow3DriverTemperature = "Vehicle_Cabin_HVAC_Station_Row3_Driver_Temperature"
	// FieldVehicleCabinHVACStationRow3Passenger HVAC for single station in the vehicle
	FieldVehicleCabinHVACStationRow3Passenger = "Vehicle_Cabin_HVAC_Station_Row3_Passenger"
	// FieldVehicleCabinHVACStationRow3PassengerAirDistribution Direction of airstream
	FieldVehicleCabinHVACStationRow3PassengerAirDistribution = "Vehicle_Cabin_HVAC_Station_Row3_Passenger_AirDistribution"
	// FieldVehicleCabinHVACStationRow3PassengerFanSpeed Fan Speed, 0 = off. 100 = max
	FieldVehicleCabinHVACStationRow3PassengerFanSpeed = "Vehicle_Cabin_HVAC_Station_Row3_Passenger_FanSpeed"
	// FieldVehicleCabinHVACStationRow3PassengerTemperature Temperature
	FieldVehicleCabinHVACStationRow3PassengerTemperature = "Vehicle_Cabin_HVAC_Station_Row3_Passenger_Temperature"
	// FieldVehicleCabinHVACStationRow4 HVAC for single station in the vehicle
	FieldVehicleCabinHVACStationRow4 = "Vehicle_Cabin_HVAC_Station_Row4"
	// FieldVehicleCabinHVACStationRow4Driver HVAC for single station in the vehicle
	FieldVehicleCabinHVACStationRow4Driver = "Vehicle_Cabin_HVAC_Station_Row4_Driver"
	// FieldVehicleCabinHVACStationRow4DriverAirDistribution Direction of airstream
	FieldVehicleCabinHVACStationRow4DriverAirDistribution = "Vehicle_Cabin_HVAC_Station_Row4_Driver_AirDistribution"
	// FieldVehicleCabinHVACStationRow4DriverFanSpeed Fan Speed, 0 = off. 100 = max
	FieldVehicleCabinHVACStationRow4DriverFanSpeed = "Vehicle_Cabin_HVAC_Station_Row4_Driver_FanSpeed"
	// FieldVehicleCabinHVACStationRow4DriverTemperature Temperature
	FieldVehicleCabinHVACStationRow4DriverTemperature = "Vehicle_Cabin_HVAC_Station_Row4_Driver_Temperature"
	// FieldVehicleCabinHVACStationRow4Passenger HVAC for single station in the vehicle
	FieldVehicleCabinHVACStationRow4Passenger = "Vehicle_Cabin_HVAC_Station_Row4_Passenger"
	// FieldVehicleCabinHVACStationRow4PassengerAirDistribution Direction of airstream
	FieldVehicleCabinHVACStationRow4PassengerAirDistribution = "Vehicle_Cabin_HVAC_Station_Row4_Passenger_AirDistribution"
	// FieldVehicleCabinHVACStationRow4PassengerFanSpeed Fan Speed, 0 = off. 100 = max
	FieldVehicleCabinHVACStationRow4PassengerFanSpeed = "Vehicle_Cabin_HVAC_Station_Row4_Passenger_FanSpeed"
	// FieldVehicleCabinHVACStationRow4PassengerTemperature Temperature
	FieldVehicleCabinHVACStationRow4PassengerTemperature = "Vehicle_Cabin_HVAC_Station_Row4_Passenger_Temperature"
	// FieldVehicleCabinInfotainment Infotainment system.
	FieldVehicleCabinInfotainment = "Vehicle_Cabin_Infotainment"
	// FieldVehicleCabinInfotainmentHMI HMI related signals
	FieldVehicleCabinInfotainmentHMI = "Vehicle_Cabin_Infotainment_HMI"
	// FieldVehicleCabinInfotainmentHMIBrightness Brightness of the HMI, relative to supported range. 0 = Lowest brightness possible. 100 = Maximum Brightness possible.
	FieldVehicleCabinInfotainmentHMIBrightness = "Vehicle_Cabin_Infotainment_HMI_Brightness"
	// FieldVehicleCabinInfotainmentHMICurrentLanguage ISO 639-1 standard language code for the current HMI
	FieldVehicleCabinInfotainmentHMICurrentLanguage = "Vehicle_Cabin_Infotainment_HMI_CurrentLanguage"
	// FieldVehicleCabinInfotainmentHMIDateFormat Date format used in the current HMI
	FieldVehicleCabinInfotainmentHMIDateFormat = "Vehicle_Cabin_Infotainment_HMI_DateFormat"
	// FieldVehicleCabinInfotainmentHMIDayNightMode Current display theme
	FieldVehicleCabinInfotainmentHMIDayNightMode = "Vehicle_Cabin_Infotainment_HMI_DayNightMode"
	// FieldVehicleCabinInfotainmentHMIDisplayOffDuration Duration in seconds before the display is turned off. Value shall be 0 if screen never shall turn off.
	FieldVehicleCabinInfotainmentHMIDisplayOffDuration = "Vehicle_Cabin_Infotainment_HMI_DisplayOffDuration"
	// FieldVehicleCabinInfotainmentHMIDistanceUnit Distance unit used in the current HMI
	FieldVehicleCabinInfotainmentHMIDistanceUnit = "Vehicle_Cabin_Infotainment_HMI_DistanceUnit"
	// FieldVehicleCabinInfotainmentHMIEVEconomyUnits EV fuel economy unit used in the current HMI
	FieldVehicleCabinInfotainmentHMIEVEconomyUnits = "Vehicle_Cabin_Infotainment_HMI_EVEconomyUnits"
	// FieldVehicleCabinInfotainmentHMIEVEnergyUnits EV energy unit used in the current HMI
	FieldVehicleCabinInfotainmentHMIEVEnergyUnits = "Vehicle_Cabin_Infotainment_HMI_EVEnergyUnits"
	// FieldVehicleCabinInfotainmentHMIFontSize Font size used in the current HMI
	FieldVehicleCabinInfotainmentHMIFontSize = "Vehicle_Cabin_Infotainment_HMI_FontSize"
	// FieldVehicleCabinInfotainmentHMIFuelEconomyUnits Fuel economy unit used in the current HMI
	FieldVehicleCabinInfotainmentHMIFuelEconomyUnits = "Vehicle_Cabin_Infotainment_HMI_FuelEconomyUnits"
	// FieldVehicleCabinInfotainmentHMIFuelVolumeUnit Fuel volume unit used in the current HMI
	FieldVehicleCabinInfotainmentHMIFuelVolumeUnit = "Vehicle_Cabin_Infotainment_HMI_FuelVolumeUnit"
	// FieldVehicleCabinInfotainmentHMIIsScreenAlwaysOn Used to prevent the screen going black if no action placed.
	FieldVehicleCabinInfotainmentHMIIsScreenAlwaysOn = "Vehicle_Cabin_Infotainment_HMI_IsScreenAlwaysOn"
	// FieldVehicleCabinInfotainmentHMILastActionTime Time for last hmi action, formatted according to ISO 8601 with UTC time zone.
	FieldVehicleCabinInfotainmentHMILastActionTime = "Vehicle_Cabin_Infotainment_HMI_LastActionTime"
	// FieldVehicleCabinInfotainmentHMISpeedUnit Speed unit used in the current HMI
	FieldVehicleCabinInfotainmentHMISpeedUnit = "Vehicle_Cabin_Infotainment_HMI_SpeedUnit"
	// FieldVehicleCabinInfotainmentHMITemperatureUnit Temperature unit used in the current HMI
	FieldVehicleCabinInfotainmentHMITemperatureUnit = "Vehicle_Cabin_Infotainment_HMI_TemperatureUnit"
	// FieldVehicleCabinInfotainmentHMITimeFormat Time format used in the current HMI
	FieldVehicleCabinInfotainmentHMITimeFormat = "Vehicle_Cabin_Infotainment_HMI_TimeFormat"
	// FieldVehicleCabinInfotainmentHMITirePressureUnit Tire pressure unit used in the current HMI
	FieldVehicleCabinInfotainmentHMITirePressureUnit = "Vehicle_Cabin_Infotainment_HMI_TirePressureUnit"
	// FieldVehicleCabinInfotainmentIsAutoPowerOptimize Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
	FieldVehicleCabinInfotainmentIsAutoPowerOptimize = "Vehicle_Cabin_Infotainment_IsAutoPowerOptimize"
	// FieldVehicleCabinInfotainmentMedia All Media actions
	FieldVehicleCabinInfotainmentMedia = "Vehicle_Cabin_Infotainment_Media"
	// FieldVehicleCabinInfotainmentMediaAction Tells if the media was
	FieldVehicleCabinInfotainmentMediaAction = "Vehicle_Cabin_Infotainment_Media_Action"
	// FieldVehicleCabinInfotainmentMediaDeclinedURI URI of suggested media that was declined
	FieldVehicleCabinInfotainmentMediaDeclinedURI = "Vehicle_Cabin_Infotainment_Media_DeclinedURI"
	// FieldVehicleCabinInfotainmentMediaPlayed Collection of signals updated in concert when a new media is played
	FieldVehicleCabinInfotainmentMediaPlayed = "Vehicle_Cabin_Infotainment_Media_Played"
	// FieldVehicleCabinInfotainmentMediaPlayedAlbum Name of album being played
	FieldVehicleCabinInfotainmentMediaPlayedAlbum = "Vehicle_Cabin_Infotainment_Media_Played_Album"
	// FieldVehicleCabinInfotainmentMediaPlayedArtist Name of artist being played
	FieldVehicleCabinInfotainmentMediaPlayedArtist = "Vehicle_Cabin_Infotainment_Media_Played_Artist"
	// FieldVehicleCabinInfotainmentMediaPlayedPlaybackRate Current playback rate of media being played.
	FieldVehicleCabinInfotainmentMediaPlayedPlaybackRate = "Vehicle_Cabin_Infotainment_Media_Played_PlaybackRate"
	// FieldVehicleCabinInfotainmentMediaPlayedSource Media selected for playback
	FieldVehicleCabinInfotainmentMediaPlayedSource = "Vehicle_Cabin_Infotainment_Media_Played_Source"
	// FieldVehicleCabinInfotainmentMediaPlayedTrack Name of track being played
	FieldVehicleCabinInfotainmentMediaPlayedTrack = "Vehicle_Cabin_Infotainment_Media_Played_Track"
	// FieldVehicleCabinInfotainmentMediaPlayedURI User Resource associated with the media
	FieldVehicleCabinInfotainmentMediaPlayedURI = "Vehicle_Cabin_Infotainment_Media_Played_URI"
	// FieldVehicleCabinInfotainmentMediaSelectedURI URI of suggested media that was selected
	FieldVehicleCabinInfotainmentMediaSelectedURI = "Vehicle_Cabin_Infotainment_Media_SelectedURI"
	// FieldVehicleCabinInfotainmentMediaVolume Current Media Volume
	FieldVehicleCabinInfotainmentMediaVolume = "Vehicle_Cabin_Infotainment_Media_Volume"
	// FieldVehicleCabinInfotainmentNavigation All navigation actions
	FieldVehicleCabinInfotainmentNavigation = "Vehicle_Cabin_Infotainment_Navigation"
	// FieldVehicleCabinInfotainmentNavigationDestinationSet A navigation has been selected.
	FieldVehicleCabinInfotainmentNavigationDestinationSet = "Vehicle_Cabin_Infotainment_Navigation_DestinationSet"
	// FieldVehicleCabinInfotainmentNavigationDestinationSetLatitude Latitude of destination in WGS 84 geodetic coordinates.
	FieldVehicleCabinInfotainmentNavigationDestinationSetLatitude = "Vehicle_Cabin_Infotainment_Navigation_DestinationSet_Latitude"
	// FieldVehicleCabinInfotainmentNavigationDestinationSetLongitude Longitude of destination in WGS 84 geodetic coordinates.
	FieldVehicleCabinInfotainmentNavigationDestinationSetLongitude = "Vehicle_Cabin_Infotainment_Navigation_DestinationSet_Longitude"
	// FieldVehicleCabinInfotainmentNavigationGuidanceVoice Navigation guidance state that was selected.
	FieldVehicleCabinInfotainmentNavigationGuidanceVoice = "Vehicle_Cabin_Infotainment_Navigation_GuidanceVoice"
	// FieldVehicleCabinInfotainmentNavigationMap All map actions
	FieldVehicleCabinInfotainmentNavigationMap = "Vehicle_Cabin_Infotainment_Navigation_Map"
	// FieldVehicleCabinInfotainmentNavigationMapIsAutoScaleModeUsed Used to select auto-scaling mode. This feature dynamically adjusts the zoom level of the map to provide an optimal view based on the current speed of the vehicle
	FieldVehicleCabinInfotainmentNavigationMapIsAutoScaleModeUsed = "Vehicle_Cabin_Infotainment_Navigation_Map_IsAutoScaleModeUsed"
	// FieldVehicleCabinInfotainmentNavigationMute Navigation mute state that was selected.
	FieldVehicleCabinInfotainmentNavigationMute = "Vehicle_Cabin_Infotainment_Navigation_Mute"
	// FieldVehicleCabinInfotainmentNavigationVolume Current navigation volume
	FieldVehicleCabinInfotainmentNavigationVolume = "Vehicle_Cabin_Infotainment_Navigation_Volume"
	// FieldVehicleCabinInfotainmentPowerOptimizeLevel Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
	FieldVehicleCabinInfotainmentPowerOptimizeLevel = "Vehicle_Cabin_Infotainment_PowerOptimizeLevel"
	// FieldVehicleCabinInfotainmentSmartphoneProjection All smartphone projection actions.
	FieldVehicleCabinInfotainmentSmartphoneProjection = "Vehicle_Cabin_Infotainment_SmartphoneProjection"
	// FieldVehicleCabinInfotainmentSmartphoneProjectionActive Projection activation info.
	FieldVehicleCabinInfotainmentSmartphoneProjectionActive = "Vehicle_Cabin_Infotainment_SmartphoneProjection_Active"
	// FieldVehicleCabinInfotainmentSmartphoneProjectionSource Connectivity source selected for projection.
	FieldVehicleCabinInfotainmentSmartphoneProjectionSource = "Vehicle_Cabin_Infotainment_SmartphoneProjection_Source"
	// FieldVehicleCabinInfotainmentSmartphoneProjectionSupportedMode Supportable list for projection.
	FieldVehicleCabinInfotainmentSmartphoneProjectionSupportedMode = "Vehicle_Cabin_Infotainment_SmartphoneProjection_SupportedMode"
	// FieldVehicleCabinIsAutoPowerOptimize Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
	FieldVehicleCabinIsAutoPowerOptimize = "Vehicle_Cabin_IsAutoPowerOptimize"
	// FieldVehicleCabinIsWindowChildLockEngaged Is window child lock engaged. True = Engaged. False = Disengaged.
	FieldVehicleCabinIsWindowChildLockEngaged = "Vehicle_Cabin_IsWindowChildLockEngaged"
	// FieldVehicleCabinLight Light that is part of the Cabin.
	FieldVehicleCabinLight = "Vehicle_Cabin_Light"
	// FieldVehicleCabinLightAmbientLight Decorative coloured light inside the cabin, usually mounted on the door, ceiling, etc.
	FieldVehicleCabinLightAmbientLight = "Vehicle_Cabin_Light_AmbientLight"
	// FieldVehicleCabinLightAmbientLightRow1 Decorative coloured light inside the cabin, usually mounted on the door, ceiling, etc.
	FieldVehicleCabinLightAmbientLightRow1 = "Vehicle_Cabin_Light_AmbientLight_Row1"
	// FieldVehicleCabinLightAmbientLightRow1DriverSide Decorative coloured light inside the cabin, usually mounted on the door, ceiling, etc.
	FieldVehicleCabinLightAmbientLightRow1DriverSide = "Vehicle_Cabin_Light_AmbientLight_Row1_DriverSide"
	// FieldVehicleCabinLightAmbientLightRow1DriverSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	FieldVehicleCabinLightAmbientLightRow1DriverSideColor = "Vehicle_Cabin_Light_AmbientLight_Row1_DriverSide_Color"
	// FieldVehicleCabinLightAmbientLightRow1DriverSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	FieldVehicleCabinLightAmbientLightRow1DriverSideIntensity = "Vehicle_Cabin_Light_AmbientLight_Row1_DriverSide_Intensity"
	// FieldVehicleCabinLightAmbientLightRow1DriverSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	FieldVehicleCabinLightAmbientLightRow1DriverSideIsLightOn = "Vehicle_Cabin_Light_AmbientLight_Row1_DriverSide_IsLightOn"
	// FieldVehicleCabinLightAmbientLightRow1PassengerSide Decorative coloured light inside the cabin, usually mounted on the door, ceiling, etc.
	FieldVehicleCabinLightAmbientLightRow1PassengerSide = "Vehicle_Cabin_Light_AmbientLight_Row1_PassengerSide"
	// FieldVehicleCabinLightAmbientLightRow1PassengerSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	FieldVehicleCabinLightAmbientLightRow1PassengerSideColor = "Vehicle_Cabin_Light_AmbientLight_Row1_PassengerSide_Color"
	// FieldVehicleCabinLightAmbientLightRow1PassengerSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	FieldVehicleCabinLightAmbientLightRow1PassengerSideIntensity = "Vehicle_Cabin_Light_AmbientLight_Row1_PassengerSide_Intensity"
	// FieldVehicleCabinLightAmbientLightRow1PassengerSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	FieldVehicleCabinLightAmbientLightRow1PassengerSideIsLightOn = "Vehicle_Cabin_Light_AmbientLight_Row1_PassengerSide_IsLightOn"
	// FieldVehicleCabinLightAmbientLightRow2 Decorative coloured light inside the cabin, usually mounted on the door, ceiling, etc.
	FieldVehicleCabinLightAmbientLightRow2 = "Vehicle_Cabin_Light_AmbientLight_Row2"
	// FieldVehicleCabinLightAmbientLightRow2DriverSide Decorative coloured light inside the cabin, usually mounted on the door, ceiling, etc.
	FieldVehicleCabinLightAmbientLightRow2DriverSide = "Vehicle_Cabin_Light_AmbientLight_Row2_DriverSide"
	// FieldVehicleCabinLightAmbientLightRow2DriverSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	FieldVehicleCabinLightAmbientLightRow2DriverSideColor = "Vehicle_Cabin_Light_AmbientLight_Row2_DriverSide_Color"
	// FieldVehicleCabinLightAmbientLightRow2DriverSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	FieldVehicleCabinLightAmbientLightRow2DriverSideIntensity = "Vehicle_Cabin_Light_AmbientLight_Row2_DriverSide_Intensity"
	// FieldVehicleCabinLightAmbientLightRow2DriverSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	FieldVehicleCabinLightAmbientLightRow2DriverSideIsLightOn = "Vehicle_Cabin_Light_AmbientLight_Row2_DriverSide_IsLightOn"
	// FieldVehicleCabinLightAmbientLightRow2PassengerSide Decorative coloured light inside the cabin, usually mounted on the door, ceiling, etc.
	FieldVehicleCabinLightAmbientLightRow2PassengerSide = "Vehicle_Cabin_Light_AmbientLight_Row2_PassengerSide"
	// FieldVehicleCabinLightAmbientLightRow2PassengerSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	FieldVehicleCabinLightAmbientLightRow2PassengerSideColor = "Vehicle_Cabin_Light_AmbientLight_Row2_PassengerSide_Color"
	// FieldVehicleCabinLightAmbientLightRow2PassengerSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	FieldVehicleCabinLightAmbientLightRow2PassengerSideIntensity = "Vehicle_Cabin_Light_AmbientLight_Row2_PassengerSide_Intensity"
	// FieldVehicleCabinLightAmbientLightRow2PassengerSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	FieldVehicleCabinLightAmbientLightRow2PassengerSideIsLightOn = "Vehicle_Cabin_Light_AmbientLight_Row2_PassengerSide_IsLightOn"
	// FieldVehicleCabinLightInteractiveLightBar Decorative coloured light bar that supports effects, usually mounted on the dashboard (e.g. BMW i7 Interactive bar).
	FieldVehicleCabinLightInteractiveLightBar = "Vehicle_Cabin_Light_InteractiveLightBar"
	// FieldVehicleCabinLightInteractiveLightBarColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	FieldVehicleCabinLightInteractiveLightBarColor = "Vehicle_Cabin_Light_InteractiveLightBar_Color"
	// FieldVehicleCabinLightInteractiveLightBarEffect Light effect selection from a predefined set of allowed values.
	FieldVehicleCabinLightInteractiveLightBarEffect = "Vehicle_Cabin_Light_InteractiveLightBar_Effect"
	// FieldVehicleCabinLightInteractiveLightBarIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	FieldVehicleCabinLightInteractiveLightBarIntensity = "Vehicle_Cabin_Light_InteractiveLightBar_Intensity"
	// FieldVehicleCabinLightInteractiveLightBarIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	FieldVehicleCabinLightInteractiveLightBarIsLightOn = "Vehicle_Cabin_Light_InteractiveLightBar_IsLightOn"
	// FieldVehicleCabinLightIsDomeOn Is central dome light on
	FieldVehicleCabinLightIsDomeOn = "Vehicle_Cabin_Light_IsDomeOn"
	// FieldVehicleCabinLightIsGloveBoxOn Is glove box light on
	FieldVehicleCabinLightIsGloveBoxOn = "Vehicle_Cabin_Light_IsGloveBoxOn"
	// FieldVehicleCabinLightPerceivedAmbientLight The percentage of ambient light that is measured (e.g., by a sensor) inside the cabin. 0 = No ambient light. 100 = Full brightness.
	FieldVehicleCabinLightPerceivedAmbientLight = "Vehicle_Cabin_Light_PerceivedAmbientLight"
	// FieldVehicleCabinLightSpotlight Spotlight for a specific area in the vehicle.
	FieldVehicleCabinLightSpotlight = "Vehicle_Cabin_Light_Spotlight"
	// FieldVehicleCabinLightSpotlightRow1 Spotlight for a specific area in the vehicle.
	FieldVehicleCabinLightSpotlightRow1 = "Vehicle_Cabin_Light_Spotlight_Row1"
	// FieldVehicleCabinLightSpotlightRow1DriverSide Spotlight for a specific area in the vehicle.
	FieldVehicleCabinLightSpotlightRow1DriverSide = "Vehicle_Cabin_Light_Spotlight_Row1_DriverSide"
	// FieldVehicleCabinLightSpotlightRow1DriverSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	FieldVehicleCabinLightSpotlightRow1DriverSideColor = "Vehicle_Cabin_Light_Spotlight_Row1_DriverSide_Color"
	// FieldVehicleCabinLightSpotlightRow1DriverSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	FieldVehicleCabinLightSpotlightRow1DriverSideIntensity = "Vehicle_Cabin_Light_Spotlight_Row1_DriverSide_Intensity"
	// FieldVehicleCabinLightSpotlightRow1DriverSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	FieldVehicleCabinLightSpotlightRow1DriverSideIsLightOn = "Vehicle_Cabin_Light_Spotlight_Row1_DriverSide_IsLightOn"
	// FieldVehicleCabinLightSpotlightRow1PassengerSide Spotlight for a specific area in the vehicle.
	FieldVehicleCabinLightSpotlightRow1PassengerSide = "Vehicle_Cabin_Light_Spotlight_Row1_PassengerSide"
	// FieldVehicleCabinLightSpotlightRow1PassengerSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	FieldVehicleCabinLightSpotlightRow1PassengerSideColor = "Vehicle_Cabin_Light_Spotlight_Row1_PassengerSide_Color"
	// FieldVehicleCabinLightSpotlightRow1PassengerSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	FieldVehicleCabinLightSpotlightRow1PassengerSideIntensity = "Vehicle_Cabin_Light_Spotlight_Row1_PassengerSide_Intensity"
	// FieldVehicleCabinLightSpotlightRow1PassengerSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	FieldVehicleCabinLightSpotlightRow1PassengerSideIsLightOn = "Vehicle_Cabin_Light_Spotlight_Row1_PassengerSide_IsLightOn"
	// FieldVehicleCabinLightSpotlightRow2 Spotlight for a specific area in the vehicle.
	FieldVehicleCabinLightSpotlightRow2 = "Vehicle_Cabin_Light_Spotlight_Row2"
	// FieldVehicleCabinLightSpotlightRow2DriverSide Spotlight for a specific area in the vehicle.
	FieldVehicleCabinLightSpotlightRow2DriverSide = "Vehicle_Cabin_Light_Spotlight_Row2_DriverSide"
	// FieldVehicleCabinLightSpotlightRow2DriverSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	FieldVehicleCabinLightSpotlightRow2DriverSideColor = "Vehicle_Cabin_Light_Spotlight_Row2_DriverSide_Color"
	// FieldVehicleCabinLightSpotlightRow2DriverSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	FieldVehicleCabinLightSpotlightRow2DriverSideIntensity = "Vehicle_Cabin_Light_Spotlight_Row2_DriverSide_Intensity"
	// FieldVehicleCabinLightSpotlightRow2DriverSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	FieldVehicleCabinLightSpotlightRow2DriverSideIsLightOn = "Vehicle_Cabin_Light_Spotlight_Row2_DriverSide_IsLightOn"
	// FieldVehicleCabinLightSpotlightRow2PassengerSide Spotlight for a specific area in the vehicle.
	FieldVehicleCabinLightSpotlightRow2PassengerSide = "Vehicle_Cabin_Light_Spotlight_Row2_PassengerSide"
	// FieldVehicleCabinLightSpotlightRow2PassengerSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	FieldVehicleCabinLightSpotlightRow2PassengerSideColor = "Vehicle_Cabin_Light_Spotlight_Row2_PassengerSide_Color"
	// FieldVehicleCabinLightSpotlightRow2PassengerSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	FieldVehicleCabinLightSpotlightRow2PassengerSideIntensity = "Vehicle_Cabin_Light_Spotlight_Row2_PassengerSide_Intensity"
	// FieldVehicleCabinLightSpotlightRow2PassengerSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	FieldVehicleCabinLightSpotlightRow2PassengerSideIsLightOn = "Vehicle_Cabin_Light_Spotlight_Row2_PassengerSide_IsLightOn"
	// FieldVehicleCabinLightSpotlightRow3 Spotlight for a specific area in the vehicle.
	FieldVehicleCabinLightSpotlightRow3 = "Vehicle_Cabin_Light_Spotlight_Row3"
	// FieldVehicleCabinLightSpotlightRow3DriverSide Spotlight for a specific area in the vehicle.
	FieldVehicleCabinLightSpotlightRow3DriverSide = "Vehicle_Cabin_Light_Spotlight_Row3_DriverSide"
	// FieldVehicleCabinLightSpotlightRow3DriverSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	FieldVehicleCabinLightSpotlightRow3DriverSideColor = "Vehicle_Cabin_Light_Spotlight_Row3_DriverSide_Color"
	// FieldVehicleCabinLightSpotlightRow3DriverSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	FieldVehicleCabinLightSpotlightRow3DriverSideIntensity = "Vehicle_Cabin_Light_Spotlight_Row3_DriverSide_Intensity"
	// FieldVehicleCabinLightSpotlightRow3DriverSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	FieldVehicleCabinLightSpotlightRow3DriverSideIsLightOn = "Vehicle_Cabin_Light_Spotlight_Row3_DriverSide_IsLightOn"
	// FieldVehicleCabinLightSpotlightRow3PassengerSide Spotlight for a specific area in the vehicle.
	FieldVehicleCabinLightSpotlightRow3PassengerSide = "Vehicle_Cabin_Light_Spotlight_Row3_PassengerSide"
	// FieldVehicleCabinLightSpotlightRow3PassengerSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	FieldVehicleCabinLightSpotlightRow3PassengerSideColor = "Vehicle_Cabin_Light_Spotlight_Row3_PassengerSide_Color"
	// FieldVehicleCabinLightSpotlightRow3PassengerSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	FieldVehicleCabinLightSpotlightRow3PassengerSideIntensity = "Vehicle_Cabin_Light_Spotlight_Row3_PassengerSide_Intensity"
	// FieldVehicleCabinLightSpotlightRow3PassengerSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	FieldVehicleCabinLightSpotlightRow3PassengerSideIsLightOn = "Vehicle_Cabin_Light_Spotlight_Row3_PassengerSide_IsLightOn"
	// FieldVehicleCabinLightSpotlightRow4 Spotlight for a specific area in the vehicle.
	FieldVehicleCabinLightSpotlightRow4 = "Vehicle_Cabin_Light_Spotlight_Row4"
	// FieldVehicleCabinLightSpotlightRow4DriverSide Spotlight for a specific area in the vehicle.
	FieldVehicleCabinLightSpotlightRow4DriverSide = "Vehicle_Cabin_Light_Spotlight_Row4_DriverSide"
	// FieldVehicleCabinLightSpotlightRow4DriverSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	FieldVehicleCabinLightSpotlightRow4DriverSideColor = "Vehicle_Cabin_Light_Spotlight_Row4_DriverSide_Color"
	// FieldVehicleCabinLightSpotlightRow4DriverSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	FieldVehicleCabinLightSpotlightRow4DriverSideIntensity = "Vehicle_Cabin_Light_Spotlight_Row4_DriverSide_Intensity"
	// FieldVehicleCabinLightSpotlightRow4DriverSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	FieldVehicleCabinLightSpotlightRow4DriverSideIsLightOn = "Vehicle_Cabin_Light_Spotlight_Row4_DriverSide_IsLightOn"
	// FieldVehicleCabinLightSpotlightRow4PassengerSide Spotlight for a specific area in the vehicle.
	FieldVehicleCabinLightSpotlightRow4PassengerSide = "Vehicle_Cabin_Light_Spotlight_Row4_PassengerSide"
	// FieldVehicleCabinLightSpotlightRow4PassengerSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	FieldVehicleCabinLightSpotlightRow4PassengerSideColor = "Vehicle_Cabin_Light_Spotlight_Row4_PassengerSide_Color"
	// FieldVehicleCabinLightSpotlightRow4PassengerSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	FieldVehicleCabinLightSpotlightRow4PassengerSideIntensity = "Vehicle_Cabin_Light_Spotlight_Row4_PassengerSide_Intensity"
	// FieldVehicleCabinLightSpotlightRow4PassengerSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	FieldVehicleCabinLightSpotlightRow4PassengerSideIsLightOn = "Vehicle_Cabin_Light_Spotlight_Row4_PassengerSide_IsLightOn"
	// FieldVehicleCabinPowerOptimizeLevel Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
	FieldVehicleCabinPowerOptimizeLevel = "Vehicle_Cabin_PowerOptimizeLevel"
	// FieldVehicleCabinRearShade Rear window shade. Open = Retracted, Closed = Deployed. Start position for RearShade is Open/Retracted.
	FieldVehicleCabinRearShade = "Vehicle_Cabin_RearShade"
	// FieldVehicleCabinRearShadeIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	FieldVehicleCabinRearShadeIsOpen = "Vehicle_Cabin_RearShade_IsOpen"
	// FieldVehicleCabinRearShadePosition Item position. 0 = Start position 100 = End position.
	FieldVehicleCabinRearShadePosition = "Vehicle_Cabin_RearShade_Position"
	// FieldVehicleCabinRearShadeSwitch Switch controlling sliding action such as window, sunroof, or blind.
	FieldVehicleCabinRearShadeSwitch = "Vehicle_Cabin_RearShade_Switch"
	// FieldVehicleCabinRearviewMirror Rear-view mirror.
	FieldVehicleCabinRearviewMirror = "Vehicle_Cabin_RearviewMirror"
	// FieldVehicleCabinRearviewMirrorDimmingLevel Dimming level of rear-view mirror. 0 = Undimmed. 100 = Fully dimmed.
	FieldVehicleCabinRearviewMirrorDimmingLevel = "Vehicle_Cabin_RearviewMirror_DimmingLevel"
	// FieldVehicleCabinSeat All seats.
	FieldVehicleCabinSeat = "Vehicle_Cabin_Seat"
	// FieldVehicleCabinSeatRow1 All seats.
	FieldVehicleCabinSeatRow1 = "Vehicle_Cabin_Seat_Row1"
	// FieldVehicleCabinSeatRow1DriverSide All seats.
	FieldVehicleCabinSeatRow1DriverSide = "Vehicle_Cabin_Seat_Row1_DriverSide"
	// FieldVehicleCabinSeatRow1DriverSideAirbag Airbag signals.
	FieldVehicleCabinSeatRow1DriverSideAirbag = "Vehicle_Cabin_Seat_Row1_DriverSide_Airbag"
	// FieldVehicleCabinSeatRow1DriverSideAirbagIsDeployed Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.
	FieldVehicleCabinSeatRow1DriverSideAirbagIsDeployed = "Vehicle_Cabin_Seat_Row1_DriverSide_Airbag_IsDeployed"
	// FieldVehicleCabinSeatRow1DriverSideBackrest Describes signals related to the backrest of the seat.
	FieldVehicleCabinSeatRow1DriverSideBackrest = "Vehicle_Cabin_Seat_Row1_DriverSide_Backrest"
	// FieldVehicleCabinSeatRow1DriverSideBackrestLumbar Adjustable lumbar support mechanisms in seats allow the user to change the seat back shape.
	FieldVehicleCabinSeatRow1DriverSideBackrestLumbar = "Vehicle_Cabin_Seat_Row1_DriverSide_Backrest_Lumbar"
	// FieldVehicleCabinSeatRow1DriverSideBackrestLumbarHeight Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.
	FieldVehicleCabinSeatRow1DriverSideBackrestLumbarHeight = "Vehicle_Cabin_Seat_Row1_DriverSide_Backrest_Lumbar_Height"
	// FieldVehicleCabinSeatRow1DriverSideBackrestLumbarSupport Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.
	FieldVehicleCabinSeatRow1DriverSideBackrestLumbarSupport = "Vehicle_Cabin_Seat_Row1_DriverSide_Backrest_Lumbar_Support"
	// FieldVehicleCabinSeatRow1DriverSideBackrestRecline Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.
	FieldVehicleCabinSeatRow1DriverSideBackrestRecline = "Vehicle_Cabin_Seat_Row1_DriverSide_Backrest_Recline"
	// FieldVehicleCabinSeatRow1DriverSideBackrestSideBolster Backrest side bolster (lumbar side support) settings.
	FieldVehicleCabinSeatRow1DriverSideBackrestSideBolster = "Vehicle_Cabin_Seat_Row1_DriverSide_Backrest_SideBolster"
	// FieldVehicleCabinSeatRow1DriverSideBackrestSideBolsterSupport Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.
	FieldVehicleCabinSeatRow1DriverSideBackrestSideBolsterSupport = "Vehicle_Cabin_Seat_Row1_DriverSide_Backrest_SideBolster_Support"
	// FieldVehicleCabinSeatRow1DriverSideHeadrest Headrest settings.
	FieldVehicleCabinSeatRow1DriverSideHeadrest = "Vehicle_Cabin_Seat_Row1_DriverSide_Headrest"
	// FieldVehicleCabinSeatRow1DriverSideHeadrestAngle Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.
	FieldVehicleCabinSeatRow1DriverSideHeadrestAngle = "Vehicle_Cabin_Seat_Row1_DriverSide_Headrest_Angle"
	// FieldVehicleCabinSeatRow1DriverSideHeadrestHeight Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.
	FieldVehicleCabinSeatRow1DriverSideHeadrestHeight = "Vehicle_Cabin_Seat_Row1_DriverSide_Headrest_Height"
	// FieldVehicleCabinSeatRow1DriverSideHeating Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat.
	FieldVehicleCabinSeatRow1DriverSideHeating = "Vehicle_Cabin_Seat_Row1_DriverSide_Heating"
	// FieldVehicleCabinSeatRow1DriverSideHeatingCooling Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.
	FieldVehicleCabinSeatRow1DriverSideHeatingCooling = "Vehicle_Cabin_Seat_Row1_DriverSide_HeatingCooling"
	// FieldVehicleCabinSeatRow1DriverSideHeight Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.
	FieldVehicleCabinSeatRow1DriverSideHeight = "Vehicle_Cabin_Seat_Row1_DriverSide_Height"
	// FieldVehicleCabinSeatRow1DriverSideIsBelted Is the belt engaged.
	FieldVehicleCabinSeatRow1DriverSideIsBelted = "Vehicle_Cabin_Seat_Row1_DriverSide_IsBelted"
	// FieldVehicleCabinSeatRow1DriverSideIsOccupied Does the seat have a passenger in it.
	FieldVehicleCabinSeatRow1DriverSideIsOccupied = "Vehicle_Cabin_Seat_Row1_DriverSide_IsOccupied"
	// FieldVehicleCabinSeatRow1DriverSideMassage Seat massage level. 0 = off. 100 = max massage.
	FieldVehicleCabinSeatRow1DriverSideMassage = "Vehicle_Cabin_Seat_Row1_DriverSide_Massage"
	// FieldVehicleCabinSeatRow1DriverSideOccupant Occupant data.
	FieldVehicleCabinSeatRow1DriverSideOccupant = "Vehicle_Cabin_Seat_Row1_DriverSide_Occupant"
	// FieldVehicleCabinSeatRow1DriverSideOccupantIdentifier Identifier attributes based on OAuth 2.0.
	FieldVehicleCabinSeatRow1DriverSideOccupantIdentifier = "Vehicle_Cabin_Seat_Row1_DriverSide_Occupant_Identifier"
	// FieldVehicleCabinSeatRow1DriverSideOccupantIdentifierIssuer Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.
	FieldVehicleCabinSeatRow1DriverSideOccupantIdentifierIssuer = "Vehicle_Cabin_Seat_Row1_DriverSide_Occupant_Identifier_Issuer"
	// FieldVehicleCabinSeatRow1DriverSideOccupantIdentifierSubject Subject for the authentication of the occupant e.g. UserID 7331677.
	FieldVehicleCabinSeatRow1DriverSideOccupantIdentifierSubject = "Vehicle_Cabin_Seat_Row1_DriverSide_Occupant_Identifier_Subject"
	// FieldVehicleCabinSeatRow1DriverSidePosition Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.
	FieldVehicleCabinSeatRow1DriverSidePosition = "Vehicle_Cabin_Seat_Row1_DriverSide_Position"
	// FieldVehicleCabinSeatRow1DriverSideSeatBeltHeight Seat belt position on vehicle z-axis. Position is relative within available movable range of the seat belt. 0 = Lowermost position supported.
	FieldVehicleCabinSeatRow1DriverSideSeatBeltHeight = "Vehicle_Cabin_Seat_Row1_DriverSide_SeatBeltHeight"
	// FieldVehicleCabinSeatRow1DriverSideSeating Describes signals related to the seat bottom of the seat.
	FieldVehicleCabinSeatRow1DriverSideSeating = "Vehicle_Cabin_Seat_Row1_DriverSide_Seating"
	// FieldVehicleCabinSeatRow1DriverSideSeatingLength Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).
	FieldVehicleCabinSeatRow1DriverSideSeatingLength = "Vehicle_Cabin_Seat_Row1_DriverSide_Seating_Length"
	// FieldVehicleCabinSeatRow1DriverSideSwitch Seat switch signals
	FieldVehicleCabinSeatRow1DriverSideSwitch = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch"
	// FieldVehicleCabinSeatRow1DriverSideSwitchBackrest Describes switches related to the backrest of the seat.
	FieldVehicleCabinSeatRow1DriverSideSwitchBackrest = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Backrest"
	// FieldVehicleCabinSeatRow1DriverSideSwitchBackrestIsReclineBackwardEngaged Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).
	FieldVehicleCabinSeatRow1DriverSideSwitchBackrestIsReclineBackwardEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Backrest_IsReclineBackwardEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchBackrestIsReclineForwardEngaged Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).
	FieldVehicleCabinSeatRow1DriverSideSwitchBackrestIsReclineForwardEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Backrest_IsReclineForwardEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchBackrestLumbar Switches for SingleSeat.Backrest.Lumbar.
	FieldVehicleCabinSeatRow1DriverSideSwitchBackrestLumbar = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Backrest_Lumbar"
	// FieldVehicleCabinSeatRow1DriverSideSwitchBackrestLumbarIsDownEngaged Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow1DriverSideSwitchBackrestLumbarIsDownEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Backrest_Lumbar_IsDownEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchBackrestLumbarIsLessSupportEngaged Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow1DriverSideSwitchBackrestLumbarIsLessSupportEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Backrest_Lumbar_IsLessSupportEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchBackrestLumbarIsMoreSupportEngaged Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow1DriverSideSwitchBackrestLumbarIsMoreSupportEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Backrest_Lumbar_IsMoreSupportEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchBackrestLumbarIsUpEngaged Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow1DriverSideSwitchBackrestLumbarIsUpEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Backrest_Lumbar_IsUpEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchBackrestSideBolster Switches for SingleSeat.Backrest.SideBolster.
	FieldVehicleCabinSeatRow1DriverSideSwitchBackrestSideBolster = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Backrest_SideBolster"
	// FieldVehicleCabinSeatRow1DriverSideSwitchBackrestSideBolsterIsLessSupportEngaged Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	FieldVehicleCabinSeatRow1DriverSideSwitchBackrestSideBolsterIsLessSupportEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Backrest_SideBolster_IsLessSupportEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchBackrestSideBolsterIsMoreSupportEngaged Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	FieldVehicleCabinSeatRow1DriverSideSwitchBackrestSideBolsterIsMoreSupportEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Backrest_SideBolster_IsMoreSupportEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchHeadrest Switches for SingleSeat.Headrest.
	FieldVehicleCabinSeatRow1DriverSideSwitchHeadrest = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Headrest"
	// FieldVehicleCabinSeatRow1DriverSideSwitchHeadrestIsBackwardEngaged Head rest backward switch engaged (SingleSeat.Headrest.Angle).
	FieldVehicleCabinSeatRow1DriverSideSwitchHeadrestIsBackwardEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Headrest_IsBackwardEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchHeadrestIsDownEngaged Head rest down switch engaged (SingleSeat.Headrest.Height).
	FieldVehicleCabinSeatRow1DriverSideSwitchHeadrestIsDownEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Headrest_IsDownEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchHeadrestIsForwardEngaged Head rest forward switch engaged (SingleSeat.Headrest.Angle).
	FieldVehicleCabinSeatRow1DriverSideSwitchHeadrestIsForwardEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Headrest_IsForwardEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchHeadrestIsUpEngaged Head rest up switch engaged (SingleSeat.Headrest.Height).
	FieldVehicleCabinSeatRow1DriverSideSwitchHeadrestIsUpEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Headrest_IsUpEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchIsBackwardEngaged Seat backward switch engaged (SingleSeat.Position).
	FieldVehicleCabinSeatRow1DriverSideSwitchIsBackwardEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_IsBackwardEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchIsCoolerEngaged Cooler switch for Seat heater (SingleSeat.Heating).
	FieldVehicleCabinSeatRow1DriverSideSwitchIsCoolerEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_IsCoolerEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchIsDownEngaged Seat down switch engaged (SingleSeat.Height).
	FieldVehicleCabinSeatRow1DriverSideSwitchIsDownEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_IsDownEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchIsForwardEngaged Seat forward switch engaged (SingleSeat.Position).
	FieldVehicleCabinSeatRow1DriverSideSwitchIsForwardEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_IsForwardEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchIsTiltBackwardEngaged Tilt backward switch engaged (SingleSeat.Tilt).
	FieldVehicleCabinSeatRow1DriverSideSwitchIsTiltBackwardEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_IsTiltBackwardEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchIsTiltForwardEngaged Tilt forward switch engaged (SingleSeat.Tilt).
	FieldVehicleCabinSeatRow1DriverSideSwitchIsTiltForwardEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_IsTiltForwardEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchIsUpEngaged Seat up switch engaged (SingleSeat.Height).
	FieldVehicleCabinSeatRow1DriverSideSwitchIsUpEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_IsUpEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchIsWarmerEngaged Warmer switch for Seat heater (SingleSeat.Heating).
	FieldVehicleCabinSeatRow1DriverSideSwitchIsWarmerEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_IsWarmerEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchMassage Switches for SingleSeat.Massage.
	FieldVehicleCabinSeatRow1DriverSideSwitchMassage = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Massage"
	// FieldVehicleCabinSeatRow1DriverSideSwitchMassageIsDecreaseEngaged Decrease massage level switch engaged (SingleSeat.Massage).
	FieldVehicleCabinSeatRow1DriverSideSwitchMassageIsDecreaseEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Massage_IsDecreaseEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchMassageIsIncreaseEngaged Increase massage level switch engaged (SingleSeat.Massage).
	FieldVehicleCabinSeatRow1DriverSideSwitchMassageIsIncreaseEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Massage_IsIncreaseEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchSeating Describes switches related to the seating of the seat.
	FieldVehicleCabinSeatRow1DriverSideSwitchSeating = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Seating"
	// FieldVehicleCabinSeatRow1DriverSideSwitchSeatingIsBackwardEngaged Is switch to decrease seating length engaged (SingleSeat.Seating.Length).
	FieldVehicleCabinSeatRow1DriverSideSwitchSeatingIsBackwardEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Seating_IsBackwardEngaged"
	// FieldVehicleCabinSeatRow1DriverSideSwitchSeatingIsForwardEngaged Is switch to increase seating length engaged (SingleSeat.Seating.Length).
	FieldVehicleCabinSeatRow1DriverSideSwitchSeatingIsForwardEngaged = "Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Seating_IsForwardEngaged"
	// FieldVehicleCabinSeatRow1DriverSideTilt Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.
	FieldVehicleCabinSeatRow1DriverSideTilt = "Vehicle_Cabin_Seat_Row1_DriverSide_Tilt"
	// FieldVehicleCabinSeatRow1Middle All seats.
	FieldVehicleCabinSeatRow1Middle = "Vehicle_Cabin_Seat_Row1_Middle"
	// FieldVehicleCabinSeatRow1MiddleAirbag Airbag signals.
	FieldVehicleCabinSeatRow1MiddleAirbag = "Vehicle_Cabin_Seat_Row1_Middle_Airbag"
	// FieldVehicleCabinSeatRow1MiddleAirbagIsDeployed Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.
	FieldVehicleCabinSeatRow1MiddleAirbagIsDeployed = "Vehicle_Cabin_Seat_Row1_Middle_Airbag_IsDeployed"
	// FieldVehicleCabinSeatRow1MiddleBackrest Describes signals related to the backrest of the seat.
	FieldVehicleCabinSeatRow1MiddleBackrest = "Vehicle_Cabin_Seat_Row1_Middle_Backrest"
	// FieldVehicleCabinSeatRow1MiddleBackrestLumbar Adjustable lumbar support mechanisms in seats allow the user to change the seat back shape.
	FieldVehicleCabinSeatRow1MiddleBackrestLumbar = "Vehicle_Cabin_Seat_Row1_Middle_Backrest_Lumbar"
	// FieldVehicleCabinSeatRow1MiddleBackrestLumbarHeight Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.
	FieldVehicleCabinSeatRow1MiddleBackrestLumbarHeight = "Vehicle_Cabin_Seat_Row1_Middle_Backrest_Lumbar_Height"
	// FieldVehicleCabinSeatRow1MiddleBackrestLumbarSupport Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.
	FieldVehicleCabinSeatRow1MiddleBackrestLumbarSupport = "Vehicle_Cabin_Seat_Row1_Middle_Backrest_Lumbar_Support"
	// FieldVehicleCabinSeatRow1MiddleBackrestRecline Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.
	FieldVehicleCabinSeatRow1MiddleBackrestRecline = "Vehicle_Cabin_Seat_Row1_Middle_Backrest_Recline"
	// FieldVehicleCabinSeatRow1MiddleBackrestSideBolster Backrest side bolster (lumbar side support) settings.
	FieldVehicleCabinSeatRow1MiddleBackrestSideBolster = "Vehicle_Cabin_Seat_Row1_Middle_Backrest_SideBolster"
	// FieldVehicleCabinSeatRow1MiddleBackrestSideBolsterSupport Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.
	FieldVehicleCabinSeatRow1MiddleBackrestSideBolsterSupport = "Vehicle_Cabin_Seat_Row1_Middle_Backrest_SideBolster_Support"
	// FieldVehicleCabinSeatRow1MiddleHeadrest Headrest settings.
	FieldVehicleCabinSeatRow1MiddleHeadrest = "Vehicle_Cabin_Seat_Row1_Middle_Headrest"
	// FieldVehicleCabinSeatRow1MiddleHeadrestAngle Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.
	FieldVehicleCabinSeatRow1MiddleHeadrestAngle = "Vehicle_Cabin_Seat_Row1_Middle_Headrest_Angle"
	// FieldVehicleCabinSeatRow1MiddleHeadrestHeight Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.
	FieldVehicleCabinSeatRow1MiddleHeadrestHeight = "Vehicle_Cabin_Seat_Row1_Middle_Headrest_Height"
	// FieldVehicleCabinSeatRow1MiddleHeating Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat.
	FieldVehicleCabinSeatRow1MiddleHeating = "Vehicle_Cabin_Seat_Row1_Middle_Heating"
	// FieldVehicleCabinSeatRow1MiddleHeatingCooling Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.
	FieldVehicleCabinSeatRow1MiddleHeatingCooling = "Vehicle_Cabin_Seat_Row1_Middle_HeatingCooling"
	// FieldVehicleCabinSeatRow1MiddleHeight Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.
	FieldVehicleCabinSeatRow1MiddleHeight = "Vehicle_Cabin_Seat_Row1_Middle_Height"
	// FieldVehicleCabinSeatRow1MiddleIsBelted Is the belt engaged.
	FieldVehicleCabinSeatRow1MiddleIsBelted = "Vehicle_Cabin_Seat_Row1_Middle_IsBelted"
	// FieldVehicleCabinSeatRow1MiddleIsOccupied Does the seat have a passenger in it.
	FieldVehicleCabinSeatRow1MiddleIsOccupied = "Vehicle_Cabin_Seat_Row1_Middle_IsOccupied"
	// FieldVehicleCabinSeatRow1MiddleMassage Seat massage level. 0 = off. 100 = max massage.
	FieldVehicleCabinSeatRow1MiddleMassage = "Vehicle_Cabin_Seat_Row1_Middle_Massage"
	// FieldVehicleCabinSeatRow1MiddleOccupant Occupant data.
	FieldVehicleCabinSeatRow1MiddleOccupant = "Vehicle_Cabin_Seat_Row1_Middle_Occupant"
	// FieldVehicleCabinSeatRow1MiddleOccupantIdentifier Identifier attributes based on OAuth 2.0.
	FieldVehicleCabinSeatRow1MiddleOccupantIdentifier = "Vehicle_Cabin_Seat_Row1_Middle_Occupant_Identifier"
	// FieldVehicleCabinSeatRow1MiddleOccupantIdentifierIssuer Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.
	FieldVehicleCabinSeatRow1MiddleOccupantIdentifierIssuer = "Vehicle_Cabin_Seat_Row1_Middle_Occupant_Identifier_Issuer"
	// FieldVehicleCabinSeatRow1MiddleOccupantIdentifierSubject Subject for the authentication of the occupant e.g. UserID 7331677.
	FieldVehicleCabinSeatRow1MiddleOccupantIdentifierSubject = "Vehicle_Cabin_Seat_Row1_Middle_Occupant_Identifier_Subject"
	// FieldVehicleCabinSeatRow1MiddlePosition Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.
	FieldVehicleCabinSeatRow1MiddlePosition = "Vehicle_Cabin_Seat_Row1_Middle_Position"
	// FieldVehicleCabinSeatRow1MiddleSeatBeltHeight Seat belt position on vehicle z-axis. Position is relative within available movable range of the seat belt. 0 = Lowermost position supported.
	FieldVehicleCabinSeatRow1MiddleSeatBeltHeight = "Vehicle_Cabin_Seat_Row1_Middle_SeatBeltHeight"
	// FieldVehicleCabinSeatRow1MiddleSeating Describes signals related to the seat bottom of the seat.
	FieldVehicleCabinSeatRow1MiddleSeating = "Vehicle_Cabin_Seat_Row1_Middle_Seating"
	// FieldVehicleCabinSeatRow1MiddleSeatingLength Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).
	FieldVehicleCabinSeatRow1MiddleSeatingLength = "Vehicle_Cabin_Seat_Row1_Middle_Seating_Length"
	// FieldVehicleCabinSeatRow1MiddleSwitch Seat switch signals
	FieldVehicleCabinSeatRow1MiddleSwitch = "Vehicle_Cabin_Seat_Row1_Middle_Switch"
	// FieldVehicleCabinSeatRow1MiddleSwitchBackrest Describes switches related to the backrest of the seat.
	FieldVehicleCabinSeatRow1MiddleSwitchBackrest = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Backrest"
	// FieldVehicleCabinSeatRow1MiddleSwitchBackrestIsReclineBackwardEngaged Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).
	FieldVehicleCabinSeatRow1MiddleSwitchBackrestIsReclineBackwardEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Backrest_IsReclineBackwardEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchBackrestIsReclineForwardEngaged Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).
	FieldVehicleCabinSeatRow1MiddleSwitchBackrestIsReclineForwardEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Backrest_IsReclineForwardEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchBackrestLumbar Switches for SingleSeat.Backrest.Lumbar.
	FieldVehicleCabinSeatRow1MiddleSwitchBackrestLumbar = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Backrest_Lumbar"
	// FieldVehicleCabinSeatRow1MiddleSwitchBackrestLumbarIsDownEngaged Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow1MiddleSwitchBackrestLumbarIsDownEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Backrest_Lumbar_IsDownEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchBackrestLumbarIsLessSupportEngaged Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow1MiddleSwitchBackrestLumbarIsLessSupportEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Backrest_Lumbar_IsLessSupportEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchBackrestLumbarIsMoreSupportEngaged Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow1MiddleSwitchBackrestLumbarIsMoreSupportEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Backrest_Lumbar_IsMoreSupportEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchBackrestLumbarIsUpEngaged Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow1MiddleSwitchBackrestLumbarIsUpEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Backrest_Lumbar_IsUpEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchBackrestSideBolster Switches for SingleSeat.Backrest.SideBolster.
	FieldVehicleCabinSeatRow1MiddleSwitchBackrestSideBolster = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Backrest_SideBolster"
	// FieldVehicleCabinSeatRow1MiddleSwitchBackrestSideBolsterIsLessSupportEngaged Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	FieldVehicleCabinSeatRow1MiddleSwitchBackrestSideBolsterIsLessSupportEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Backrest_SideBolster_IsLessSupportEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchBackrestSideBolsterIsMoreSupportEngaged Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	FieldVehicleCabinSeatRow1MiddleSwitchBackrestSideBolsterIsMoreSupportEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Backrest_SideBolster_IsMoreSupportEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchHeadrest Switches for SingleSeat.Headrest.
	FieldVehicleCabinSeatRow1MiddleSwitchHeadrest = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Headrest"
	// FieldVehicleCabinSeatRow1MiddleSwitchHeadrestIsBackwardEngaged Head rest backward switch engaged (SingleSeat.Headrest.Angle).
	FieldVehicleCabinSeatRow1MiddleSwitchHeadrestIsBackwardEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Headrest_IsBackwardEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchHeadrestIsDownEngaged Head rest down switch engaged (SingleSeat.Headrest.Height).
	FieldVehicleCabinSeatRow1MiddleSwitchHeadrestIsDownEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Headrest_IsDownEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchHeadrestIsForwardEngaged Head rest forward switch engaged (SingleSeat.Headrest.Angle).
	FieldVehicleCabinSeatRow1MiddleSwitchHeadrestIsForwardEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Headrest_IsForwardEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchHeadrestIsUpEngaged Head rest up switch engaged (SingleSeat.Headrest.Height).
	FieldVehicleCabinSeatRow1MiddleSwitchHeadrestIsUpEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Headrest_IsUpEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchIsBackwardEngaged Seat backward switch engaged (SingleSeat.Position).
	FieldVehicleCabinSeatRow1MiddleSwitchIsBackwardEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_IsBackwardEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchIsCoolerEngaged Cooler switch for Seat heater (SingleSeat.Heating).
	FieldVehicleCabinSeatRow1MiddleSwitchIsCoolerEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_IsCoolerEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchIsDownEngaged Seat down switch engaged (SingleSeat.Height).
	FieldVehicleCabinSeatRow1MiddleSwitchIsDownEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_IsDownEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchIsForwardEngaged Seat forward switch engaged (SingleSeat.Position).
	FieldVehicleCabinSeatRow1MiddleSwitchIsForwardEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_IsForwardEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchIsTiltBackwardEngaged Tilt backward switch engaged (SingleSeat.Tilt).
	FieldVehicleCabinSeatRow1MiddleSwitchIsTiltBackwardEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_IsTiltBackwardEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchIsTiltForwardEngaged Tilt forward switch engaged (SingleSeat.Tilt).
	FieldVehicleCabinSeatRow1MiddleSwitchIsTiltForwardEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_IsTiltForwardEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchIsUpEngaged Seat up switch engaged (SingleSeat.Height).
	FieldVehicleCabinSeatRow1MiddleSwitchIsUpEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_IsUpEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchIsWarmerEngaged Warmer switch for Seat heater (SingleSeat.Heating).
	FieldVehicleCabinSeatRow1MiddleSwitchIsWarmerEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_IsWarmerEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchMassage Switches for SingleSeat.Massage.
	FieldVehicleCabinSeatRow1MiddleSwitchMassage = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Massage"
	// FieldVehicleCabinSeatRow1MiddleSwitchMassageIsDecreaseEngaged Decrease massage level switch engaged (SingleSeat.Massage).
	FieldVehicleCabinSeatRow1MiddleSwitchMassageIsDecreaseEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Massage_IsDecreaseEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchMassageIsIncreaseEngaged Increase massage level switch engaged (SingleSeat.Massage).
	FieldVehicleCabinSeatRow1MiddleSwitchMassageIsIncreaseEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Massage_IsIncreaseEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchSeating Describes switches related to the seating of the seat.
	FieldVehicleCabinSeatRow1MiddleSwitchSeating = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Seating"
	// FieldVehicleCabinSeatRow1MiddleSwitchSeatingIsBackwardEngaged Is switch to decrease seating length engaged (SingleSeat.Seating.Length).
	FieldVehicleCabinSeatRow1MiddleSwitchSeatingIsBackwardEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Seating_IsBackwardEngaged"
	// FieldVehicleCabinSeatRow1MiddleSwitchSeatingIsForwardEngaged Is switch to increase seating length engaged (SingleSeat.Seating.Length).
	FieldVehicleCabinSeatRow1MiddleSwitchSeatingIsForwardEngaged = "Vehicle_Cabin_Seat_Row1_Middle_Switch_Seating_IsForwardEngaged"
	// FieldVehicleCabinSeatRow1MiddleTilt Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.
	FieldVehicleCabinSeatRow1MiddleTilt = "Vehicle_Cabin_Seat_Row1_Middle_Tilt"
	// FieldVehicleCabinSeatRow1PassengerSide All seats.
	FieldVehicleCabinSeatRow1PassengerSide = "Vehicle_Cabin_Seat_Row1_PassengerSide"
	// FieldVehicleCabinSeatRow1PassengerSideAirbag Airbag signals.
	FieldVehicleCabinSeatRow1PassengerSideAirbag = "Vehicle_Cabin_Seat_Row1_PassengerSide_Airbag"
	// FieldVehicleCabinSeatRow1PassengerSideAirbagIsDeployed Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.
	FieldVehicleCabinSeatRow1PassengerSideAirbagIsDeployed = "Vehicle_Cabin_Seat_Row1_PassengerSide_Airbag_IsDeployed"
	// FieldVehicleCabinSeatRow1PassengerSideBackrest Describes signals related to the backrest of the seat.
	FieldVehicleCabinSeatRow1PassengerSideBackrest = "Vehicle_Cabin_Seat_Row1_PassengerSide_Backrest"
	// FieldVehicleCabinSeatRow1PassengerSideBackrestLumbar Adjustable lumbar support mechanisms in seats allow the user to change the seat back shape.
	FieldVehicleCabinSeatRow1PassengerSideBackrestLumbar = "Vehicle_Cabin_Seat_Row1_PassengerSide_Backrest_Lumbar"
	// FieldVehicleCabinSeatRow1PassengerSideBackrestLumbarHeight Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.
	FieldVehicleCabinSeatRow1PassengerSideBackrestLumbarHeight = "Vehicle_Cabin_Seat_Row1_PassengerSide_Backrest_Lumbar_Height"
	// FieldVehicleCabinSeatRow1PassengerSideBackrestLumbarSupport Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.
	FieldVehicleCabinSeatRow1PassengerSideBackrestLumbarSupport = "Vehicle_Cabin_Seat_Row1_PassengerSide_Backrest_Lumbar_Support"
	// FieldVehicleCabinSeatRow1PassengerSideBackrestRecline Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.
	FieldVehicleCabinSeatRow1PassengerSideBackrestRecline = "Vehicle_Cabin_Seat_Row1_PassengerSide_Backrest_Recline"
	// FieldVehicleCabinSeatRow1PassengerSideBackrestSideBolster Backrest side bolster (lumbar side support) settings.
	FieldVehicleCabinSeatRow1PassengerSideBackrestSideBolster = "Vehicle_Cabin_Seat_Row1_PassengerSide_Backrest_SideBolster"
	// FieldVehicleCabinSeatRow1PassengerSideBackrestSideBolsterSupport Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.
	FieldVehicleCabinSeatRow1PassengerSideBackrestSideBolsterSupport = "Vehicle_Cabin_Seat_Row1_PassengerSide_Backrest_SideBolster_Support"
	// FieldVehicleCabinSeatRow1PassengerSideHeadrest Headrest settings.
	FieldVehicleCabinSeatRow1PassengerSideHeadrest = "Vehicle_Cabin_Seat_Row1_PassengerSide_Headrest"
	// FieldVehicleCabinSeatRow1PassengerSideHeadrestAngle Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.
	FieldVehicleCabinSeatRow1PassengerSideHeadrestAngle = "Vehicle_Cabin_Seat_Row1_PassengerSide_Headrest_Angle"
	// FieldVehicleCabinSeatRow1PassengerSideHeadrestHeight Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.
	FieldVehicleCabinSeatRow1PassengerSideHeadrestHeight = "Vehicle_Cabin_Seat_Row1_PassengerSide_Headrest_Height"
	// FieldVehicleCabinSeatRow1PassengerSideHeating Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat.
	FieldVehicleCabinSeatRow1PassengerSideHeating = "Vehicle_Cabin_Seat_Row1_PassengerSide_Heating"
	// FieldVehicleCabinSeatRow1PassengerSideHeatingCooling Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.
	FieldVehicleCabinSeatRow1PassengerSideHeatingCooling = "Vehicle_Cabin_Seat_Row1_PassengerSide_HeatingCooling"
	// FieldVehicleCabinSeatRow1PassengerSideHeight Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.
	FieldVehicleCabinSeatRow1PassengerSideHeight = "Vehicle_Cabin_Seat_Row1_PassengerSide_Height"
	// FieldVehicleCabinSeatRow1PassengerSideIsBelted Is the belt engaged.
	FieldVehicleCabinSeatRow1PassengerSideIsBelted = "Vehicle_Cabin_Seat_Row1_PassengerSide_IsBelted"
	// FieldVehicleCabinSeatRow1PassengerSideIsOccupied Does the seat have a passenger in it.
	FieldVehicleCabinSeatRow1PassengerSideIsOccupied = "Vehicle_Cabin_Seat_Row1_PassengerSide_IsOccupied"
	// FieldVehicleCabinSeatRow1PassengerSideMassage Seat massage level. 0 = off. 100 = max massage.
	FieldVehicleCabinSeatRow1PassengerSideMassage = "Vehicle_Cabin_Seat_Row1_PassengerSide_Massage"
	// FieldVehicleCabinSeatRow1PassengerSideOccupant Occupant data.
	FieldVehicleCabinSeatRow1PassengerSideOccupant = "Vehicle_Cabin_Seat_Row1_PassengerSide_Occupant"
	// FieldVehicleCabinSeatRow1PassengerSideOccupantIdentifier Identifier attributes based on OAuth 2.0.
	FieldVehicleCabinSeatRow1PassengerSideOccupantIdentifier = "Vehicle_Cabin_Seat_Row1_PassengerSide_Occupant_Identifier"
	// FieldVehicleCabinSeatRow1PassengerSideOccupantIdentifierIssuer Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.
	FieldVehicleCabinSeatRow1PassengerSideOccupantIdentifierIssuer = "Vehicle_Cabin_Seat_Row1_PassengerSide_Occupant_Identifier_Issuer"
	// FieldVehicleCabinSeatRow1PassengerSideOccupantIdentifierSubject Subject for the authentication of the occupant e.g. UserID 7331677.
	FieldVehicleCabinSeatRow1PassengerSideOccupantIdentifierSubject = "Vehicle_Cabin_Seat_Row1_PassengerSide_Occupant_Identifier_Subject"
	// FieldVehicleCabinSeatRow1PassengerSidePosition Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.
	FieldVehicleCabinSeatRow1PassengerSidePosition = "Vehicle_Cabin_Seat_Row1_PassengerSide_Position"
	// FieldVehicleCabinSeatRow1PassengerSideSeatBeltHeight Seat belt position on vehicle z-axis. Position is relative within available movable range of the seat belt. 0 = Lowermost position supported.
	FieldVehicleCabinSeatRow1PassengerSideSeatBeltHeight = "Vehicle_Cabin_Seat_Row1_PassengerSide_SeatBeltHeight"
	// FieldVehicleCabinSeatRow1PassengerSideSeating Describes signals related to the seat bottom of the seat.
	FieldVehicleCabinSeatRow1PassengerSideSeating = "Vehicle_Cabin_Seat_Row1_PassengerSide_Seating"
	// FieldVehicleCabinSeatRow1PassengerSideSeatingLength Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).
	FieldVehicleCabinSeatRow1PassengerSideSeatingLength = "Vehicle_Cabin_Seat_Row1_PassengerSide_Seating_Length"
	// FieldVehicleCabinSeatRow1PassengerSideSwitch Seat switch signals
	FieldVehicleCabinSeatRow1PassengerSideSwitch = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchBackrest Describes switches related to the backrest of the seat.
	FieldVehicleCabinSeatRow1PassengerSideSwitchBackrest = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Backrest"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchBackrestIsReclineBackwardEngaged Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).
	FieldVehicleCabinSeatRow1PassengerSideSwitchBackrestIsReclineBackwardEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Backrest_IsReclineBackwardEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchBackrestIsReclineForwardEngaged Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).
	FieldVehicleCabinSeatRow1PassengerSideSwitchBackrestIsReclineForwardEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Backrest_IsReclineForwardEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchBackrestLumbar Switches for SingleSeat.Backrest.Lumbar.
	FieldVehicleCabinSeatRow1PassengerSideSwitchBackrestLumbar = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Backrest_Lumbar"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchBackrestLumbarIsDownEngaged Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow1PassengerSideSwitchBackrestLumbarIsDownEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Backrest_Lumbar_IsDownEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchBackrestLumbarIsLessSupportEngaged Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow1PassengerSideSwitchBackrestLumbarIsLessSupportEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Backrest_Lumbar_IsLessSupportEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchBackrestLumbarIsMoreSupportEngaged Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow1PassengerSideSwitchBackrestLumbarIsMoreSupportEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Backrest_Lumbar_IsMoreSupportEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchBackrestLumbarIsUpEngaged Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow1PassengerSideSwitchBackrestLumbarIsUpEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Backrest_Lumbar_IsUpEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchBackrestSideBolster Switches for SingleSeat.Backrest.SideBolster.
	FieldVehicleCabinSeatRow1PassengerSideSwitchBackrestSideBolster = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Backrest_SideBolster"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchBackrestSideBolsterIsLessSupportEngaged Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	FieldVehicleCabinSeatRow1PassengerSideSwitchBackrestSideBolsterIsLessSupportEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Backrest_SideBolster_IsLessSupportEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchBackrestSideBolsterIsMoreSupportEngaged Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	FieldVehicleCabinSeatRow1PassengerSideSwitchBackrestSideBolsterIsMoreSupportEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Backrest_SideBolster_IsMoreSupportEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchHeadrest Switches for SingleSeat.Headrest.
	FieldVehicleCabinSeatRow1PassengerSideSwitchHeadrest = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Headrest"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchHeadrestIsBackwardEngaged Head rest backward switch engaged (SingleSeat.Headrest.Angle).
	FieldVehicleCabinSeatRow1PassengerSideSwitchHeadrestIsBackwardEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Headrest_IsBackwardEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchHeadrestIsDownEngaged Head rest down switch engaged (SingleSeat.Headrest.Height).
	FieldVehicleCabinSeatRow1PassengerSideSwitchHeadrestIsDownEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Headrest_IsDownEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchHeadrestIsForwardEngaged Head rest forward switch engaged (SingleSeat.Headrest.Angle).
	FieldVehicleCabinSeatRow1PassengerSideSwitchHeadrestIsForwardEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Headrest_IsForwardEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchHeadrestIsUpEngaged Head rest up switch engaged (SingleSeat.Headrest.Height).
	FieldVehicleCabinSeatRow1PassengerSideSwitchHeadrestIsUpEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Headrest_IsUpEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchIsBackwardEngaged Seat backward switch engaged (SingleSeat.Position).
	FieldVehicleCabinSeatRow1PassengerSideSwitchIsBackwardEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_IsBackwardEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchIsCoolerEngaged Cooler switch for Seat heater (SingleSeat.Heating).
	FieldVehicleCabinSeatRow1PassengerSideSwitchIsCoolerEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_IsCoolerEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchIsDownEngaged Seat down switch engaged (SingleSeat.Height).
	FieldVehicleCabinSeatRow1PassengerSideSwitchIsDownEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_IsDownEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchIsForwardEngaged Seat forward switch engaged (SingleSeat.Position).
	FieldVehicleCabinSeatRow1PassengerSideSwitchIsForwardEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_IsForwardEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchIsTiltBackwardEngaged Tilt backward switch engaged (SingleSeat.Tilt).
	FieldVehicleCabinSeatRow1PassengerSideSwitchIsTiltBackwardEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_IsTiltBackwardEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchIsTiltForwardEngaged Tilt forward switch engaged (SingleSeat.Tilt).
	FieldVehicleCabinSeatRow1PassengerSideSwitchIsTiltForwardEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_IsTiltForwardEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchIsUpEngaged Seat up switch engaged (SingleSeat.Height).
	FieldVehicleCabinSeatRow1PassengerSideSwitchIsUpEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_IsUpEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchIsWarmerEngaged Warmer switch for Seat heater (SingleSeat.Heating).
	FieldVehicleCabinSeatRow1PassengerSideSwitchIsWarmerEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_IsWarmerEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchMassage Switches for SingleSeat.Massage.
	FieldVehicleCabinSeatRow1PassengerSideSwitchMassage = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Massage"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchMassageIsDecreaseEngaged Decrease massage level switch engaged (SingleSeat.Massage).
	FieldVehicleCabinSeatRow1PassengerSideSwitchMassageIsDecreaseEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Massage_IsDecreaseEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchMassageIsIncreaseEngaged Increase massage level switch engaged (SingleSeat.Massage).
	FieldVehicleCabinSeatRow1PassengerSideSwitchMassageIsIncreaseEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Massage_IsIncreaseEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchSeating Describes switches related to the seating of the seat.
	FieldVehicleCabinSeatRow1PassengerSideSwitchSeating = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Seating"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchSeatingIsBackwardEngaged Is switch to decrease seating length engaged (SingleSeat.Seating.Length).
	FieldVehicleCabinSeatRow1PassengerSideSwitchSeatingIsBackwardEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Seating_IsBackwardEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideSwitchSeatingIsForwardEngaged Is switch to increase seating length engaged (SingleSeat.Seating.Length).
	FieldVehicleCabinSeatRow1PassengerSideSwitchSeatingIsForwardEngaged = "Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Seating_IsForwardEngaged"
	// FieldVehicleCabinSeatRow1PassengerSideTilt Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.
	FieldVehicleCabinSeatRow1PassengerSideTilt = "Vehicle_Cabin_Seat_Row1_PassengerSide_Tilt"
	// FieldVehicleCabinSeatRow2 All seats.
	FieldVehicleCabinSeatRow2 = "Vehicle_Cabin_Seat_Row2"
	// FieldVehicleCabinSeatRow2DriverSide All seats.
	FieldVehicleCabinSeatRow2DriverSide = "Vehicle_Cabin_Seat_Row2_DriverSide"
	// FieldVehicleCabinSeatRow2DriverSideAirbag Airbag signals.
	FieldVehicleCabinSeatRow2DriverSideAirbag = "Vehicle_Cabin_Seat_Row2_DriverSide_Airbag"
	// FieldVehicleCabinSeatRow2DriverSideAirbagIsDeployed Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.
	FieldVehicleCabinSeatRow2DriverSideAirbagIsDeployed = "Vehicle_Cabin_Seat_Row2_DriverSide_Airbag_IsDeployed"
	// FieldVehicleCabinSeatRow2DriverSideBackrest Describes signals related to the backrest of the seat.
	FieldVehicleCabinSeatRow2DriverSideBackrest = "Vehicle_Cabin_Seat_Row2_DriverSide_Backrest"
	// FieldVehicleCabinSeatRow2DriverSideBackrestLumbar Adjustable lumbar support mechanisms in seats allow the user to change the seat back shape.
	FieldVehicleCabinSeatRow2DriverSideBackrestLumbar = "Vehicle_Cabin_Seat_Row2_DriverSide_Backrest_Lumbar"
	// FieldVehicleCabinSeatRow2DriverSideBackrestLumbarHeight Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.
	FieldVehicleCabinSeatRow2DriverSideBackrestLumbarHeight = "Vehicle_Cabin_Seat_Row2_DriverSide_Backrest_Lumbar_Height"
	// FieldVehicleCabinSeatRow2DriverSideBackrestLumbarSupport Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.
	FieldVehicleCabinSeatRow2DriverSideBackrestLumbarSupport = "Vehicle_Cabin_Seat_Row2_DriverSide_Backrest_Lumbar_Support"
	// FieldVehicleCabinSeatRow2DriverSideBackrestRecline Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.
	FieldVehicleCabinSeatRow2DriverSideBackrestRecline = "Vehicle_Cabin_Seat_Row2_DriverSide_Backrest_Recline"
	// FieldVehicleCabinSeatRow2DriverSideBackrestSideBolster Backrest side bolster (lumbar side support) settings.
	FieldVehicleCabinSeatRow2DriverSideBackrestSideBolster = "Vehicle_Cabin_Seat_Row2_DriverSide_Backrest_SideBolster"
	// FieldVehicleCabinSeatRow2DriverSideBackrestSideBolsterSupport Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.
	FieldVehicleCabinSeatRow2DriverSideBackrestSideBolsterSupport = "Vehicle_Cabin_Seat_Row2_DriverSide_Backrest_SideBolster_Support"
	// FieldVehicleCabinSeatRow2DriverSideHeadrest Headrest settings.
	FieldVehicleCabinSeatRow2DriverSideHeadrest = "Vehicle_Cabin_Seat_Row2_DriverSide_Headrest"
	// FieldVehicleCabinSeatRow2DriverSideHeadrestAngle Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.
	FieldVehicleCabinSeatRow2DriverSideHeadrestAngle = "Vehicle_Cabin_Seat_Row2_DriverSide_Headrest_Angle"
	// FieldVehicleCabinSeatRow2DriverSideHeadrestHeight Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.
	FieldVehicleCabinSeatRow2DriverSideHeadrestHeight = "Vehicle_Cabin_Seat_Row2_DriverSide_Headrest_Height"
	// FieldVehicleCabinSeatRow2DriverSideHeating Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat.
	FieldVehicleCabinSeatRow2DriverSideHeating = "Vehicle_Cabin_Seat_Row2_DriverSide_Heating"
	// FieldVehicleCabinSeatRow2DriverSideHeatingCooling Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.
	FieldVehicleCabinSeatRow2DriverSideHeatingCooling = "Vehicle_Cabin_Seat_Row2_DriverSide_HeatingCooling"
	// FieldVehicleCabinSeatRow2DriverSideHeight Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.
	FieldVehicleCabinSeatRow2DriverSideHeight = "Vehicle_Cabin_Seat_Row2_DriverSide_Height"
	// FieldVehicleCabinSeatRow2DriverSideIsBelted Is the belt engaged.
	FieldVehicleCabinSeatRow2DriverSideIsBelted = "Vehicle_Cabin_Seat_Row2_DriverSide_IsBelted"
	// FieldVehicleCabinSeatRow2DriverSideIsOccupied Does the seat have a passenger in it.
	FieldVehicleCabinSeatRow2DriverSideIsOccupied = "Vehicle_Cabin_Seat_Row2_DriverSide_IsOccupied"
	// FieldVehicleCabinSeatRow2DriverSideMassage Seat massage level. 0 = off. 100 = max massage.
	FieldVehicleCabinSeatRow2DriverSideMassage = "Vehicle_Cabin_Seat_Row2_DriverSide_Massage"
	// FieldVehicleCabinSeatRow2DriverSideOccupant Occupant data.
	FieldVehicleCabinSeatRow2DriverSideOccupant = "Vehicle_Cabin_Seat_Row2_DriverSide_Occupant"
	// FieldVehicleCabinSeatRow2DriverSideOccupantIdentifier Identifier attributes based on OAuth 2.0.
	FieldVehicleCabinSeatRow2DriverSideOccupantIdentifier = "Vehicle_Cabin_Seat_Row2_DriverSide_Occupant_Identifier"
	// FieldVehicleCabinSeatRow2DriverSideOccupantIdentifierIssuer Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.
	FieldVehicleCabinSeatRow2DriverSideOccupantIdentifierIssuer = "Vehicle_Cabin_Seat_Row2_DriverSide_Occupant_Identifier_Issuer"
	// FieldVehicleCabinSeatRow2DriverSideOccupantIdentifierSubject Subject for the authentication of the occupant e.g. UserID 7331677.
	FieldVehicleCabinSeatRow2DriverSideOccupantIdentifierSubject = "Vehicle_Cabin_Seat_Row2_DriverSide_Occupant_Identifier_Subject"
	// FieldVehicleCabinSeatRow2DriverSidePosition Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.
	FieldVehicleCabinSeatRow2DriverSidePosition = "Vehicle_Cabin_Seat_Row2_DriverSide_Position"
	// FieldVehicleCabinSeatRow2DriverSideSeatBeltHeight Seat belt position on vehicle z-axis. Position is relative within available movable range of the seat belt. 0 = Lowermost position supported.
	FieldVehicleCabinSeatRow2DriverSideSeatBeltHeight = "Vehicle_Cabin_Seat_Row2_DriverSide_SeatBeltHeight"
	// FieldVehicleCabinSeatRow2DriverSideSeating Describes signals related to the seat bottom of the seat.
	FieldVehicleCabinSeatRow2DriverSideSeating = "Vehicle_Cabin_Seat_Row2_DriverSide_Seating"
	// FieldVehicleCabinSeatRow2DriverSideSeatingLength Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).
	FieldVehicleCabinSeatRow2DriverSideSeatingLength = "Vehicle_Cabin_Seat_Row2_DriverSide_Seating_Length"
	// FieldVehicleCabinSeatRow2DriverSideSwitch Seat switch signals
	FieldVehicleCabinSeatRow2DriverSideSwitch = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch"
	// FieldVehicleCabinSeatRow2DriverSideSwitchBackrest Describes switches related to the backrest of the seat.
	FieldVehicleCabinSeatRow2DriverSideSwitchBackrest = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Backrest"
	// FieldVehicleCabinSeatRow2DriverSideSwitchBackrestIsReclineBackwardEngaged Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).
	FieldVehicleCabinSeatRow2DriverSideSwitchBackrestIsReclineBackwardEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Backrest_IsReclineBackwardEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchBackrestIsReclineForwardEngaged Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).
	FieldVehicleCabinSeatRow2DriverSideSwitchBackrestIsReclineForwardEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Backrest_IsReclineForwardEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchBackrestLumbar Switches for SingleSeat.Backrest.Lumbar.
	FieldVehicleCabinSeatRow2DriverSideSwitchBackrestLumbar = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Backrest_Lumbar"
	// FieldVehicleCabinSeatRow2DriverSideSwitchBackrestLumbarIsDownEngaged Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow2DriverSideSwitchBackrestLumbarIsDownEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Backrest_Lumbar_IsDownEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchBackrestLumbarIsLessSupportEngaged Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow2DriverSideSwitchBackrestLumbarIsLessSupportEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Backrest_Lumbar_IsLessSupportEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchBackrestLumbarIsMoreSupportEngaged Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow2DriverSideSwitchBackrestLumbarIsMoreSupportEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Backrest_Lumbar_IsMoreSupportEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchBackrestLumbarIsUpEngaged Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow2DriverSideSwitchBackrestLumbarIsUpEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Backrest_Lumbar_IsUpEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchBackrestSideBolster Switches for SingleSeat.Backrest.SideBolster.
	FieldVehicleCabinSeatRow2DriverSideSwitchBackrestSideBolster = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Backrest_SideBolster"
	// FieldVehicleCabinSeatRow2DriverSideSwitchBackrestSideBolsterIsLessSupportEngaged Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	FieldVehicleCabinSeatRow2DriverSideSwitchBackrestSideBolsterIsLessSupportEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Backrest_SideBolster_IsLessSupportEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchBackrestSideBolsterIsMoreSupportEngaged Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	FieldVehicleCabinSeatRow2DriverSideSwitchBackrestSideBolsterIsMoreSupportEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Backrest_SideBolster_IsMoreSupportEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchHeadrest Switches for SingleSeat.Headrest.
	FieldVehicleCabinSeatRow2DriverSideSwitchHeadrest = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Headrest"
	// FieldVehicleCabinSeatRow2DriverSideSwitchHeadrestIsBackwardEngaged Head rest backward switch engaged (SingleSeat.Headrest.Angle).
	FieldVehicleCabinSeatRow2DriverSideSwitchHeadrestIsBackwardEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Headrest_IsBackwardEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchHeadrestIsDownEngaged Head rest down switch engaged (SingleSeat.Headrest.Height).
	FieldVehicleCabinSeatRow2DriverSideSwitchHeadrestIsDownEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Headrest_IsDownEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchHeadrestIsForwardEngaged Head rest forward switch engaged (SingleSeat.Headrest.Angle).
	FieldVehicleCabinSeatRow2DriverSideSwitchHeadrestIsForwardEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Headrest_IsForwardEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchHeadrestIsUpEngaged Head rest up switch engaged (SingleSeat.Headrest.Height).
	FieldVehicleCabinSeatRow2DriverSideSwitchHeadrestIsUpEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Headrest_IsUpEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchIsBackwardEngaged Seat backward switch engaged (SingleSeat.Position).
	FieldVehicleCabinSeatRow2DriverSideSwitchIsBackwardEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_IsBackwardEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchIsCoolerEngaged Cooler switch for Seat heater (SingleSeat.Heating).
	FieldVehicleCabinSeatRow2DriverSideSwitchIsCoolerEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_IsCoolerEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchIsDownEngaged Seat down switch engaged (SingleSeat.Height).
	FieldVehicleCabinSeatRow2DriverSideSwitchIsDownEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_IsDownEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchIsForwardEngaged Seat forward switch engaged (SingleSeat.Position).
	FieldVehicleCabinSeatRow2DriverSideSwitchIsForwardEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_IsForwardEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchIsTiltBackwardEngaged Tilt backward switch engaged (SingleSeat.Tilt).
	FieldVehicleCabinSeatRow2DriverSideSwitchIsTiltBackwardEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_IsTiltBackwardEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchIsTiltForwardEngaged Tilt forward switch engaged (SingleSeat.Tilt).
	FieldVehicleCabinSeatRow2DriverSideSwitchIsTiltForwardEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_IsTiltForwardEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchIsUpEngaged Seat up switch engaged (SingleSeat.Height).
	FieldVehicleCabinSeatRow2DriverSideSwitchIsUpEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_IsUpEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchIsWarmerEngaged Warmer switch for Seat heater (SingleSeat.Heating).
	FieldVehicleCabinSeatRow2DriverSideSwitchIsWarmerEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_IsWarmerEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchMassage Switches for SingleSeat.Massage.
	FieldVehicleCabinSeatRow2DriverSideSwitchMassage = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Massage"
	// FieldVehicleCabinSeatRow2DriverSideSwitchMassageIsDecreaseEngaged Decrease massage level switch engaged (SingleSeat.Massage).
	FieldVehicleCabinSeatRow2DriverSideSwitchMassageIsDecreaseEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Massage_IsDecreaseEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchMassageIsIncreaseEngaged Increase massage level switch engaged (SingleSeat.Massage).
	FieldVehicleCabinSeatRow2DriverSideSwitchMassageIsIncreaseEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Massage_IsIncreaseEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchSeating Describes switches related to the seating of the seat.
	FieldVehicleCabinSeatRow2DriverSideSwitchSeating = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Seating"
	// FieldVehicleCabinSeatRow2DriverSideSwitchSeatingIsBackwardEngaged Is switch to decrease seating length engaged (SingleSeat.Seating.Length).
	FieldVehicleCabinSeatRow2DriverSideSwitchSeatingIsBackwardEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Seating_IsBackwardEngaged"
	// FieldVehicleCabinSeatRow2DriverSideSwitchSeatingIsForwardEngaged Is switch to increase seating length engaged (SingleSeat.Seating.Length).
	FieldVehicleCabinSeatRow2DriverSideSwitchSeatingIsForwardEngaged = "Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Seating_IsForwardEngaged"
	// FieldVehicleCabinSeatRow2DriverSideTilt Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.
	FieldVehicleCabinSeatRow2DriverSideTilt = "Vehicle_Cabin_Seat_Row2_DriverSide_Tilt"
	// FieldVehicleCabinSeatRow2Middle All seats.
	FieldVehicleCabinSeatRow2Middle = "Vehicle_Cabin_Seat_Row2_Middle"
	// FieldVehicleCabinSeatRow2MiddleAirbag Airbag signals.
	FieldVehicleCabinSeatRow2MiddleAirbag = "Vehicle_Cabin_Seat_Row2_Middle_Airbag"
	// FieldVehicleCabinSeatRow2MiddleAirbagIsDeployed Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.
	FieldVehicleCabinSeatRow2MiddleAirbagIsDeployed = "Vehicle_Cabin_Seat_Row2_Middle_Airbag_IsDeployed"
	// FieldVehicleCabinSeatRow2MiddleBackrest Describes signals related to the backrest of the seat.
	FieldVehicleCabinSeatRow2MiddleBackrest = "Vehicle_Cabin_Seat_Row2_Middle_Backrest"
	// FieldVehicleCabinSeatRow2MiddleBackrestLumbar Adjustable lumbar support mechanisms in seats allow the user to change the seat back shape.
	FieldVehicleCabinSeatRow2MiddleBackrestLumbar = "Vehicle_Cabin_Seat_Row2_Middle_Backrest_Lumbar"
	// FieldVehicleCabinSeatRow2MiddleBackrestLumbarHeight Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.
	FieldVehicleCabinSeatRow2MiddleBackrestLumbarHeight = "Vehicle_Cabin_Seat_Row2_Middle_Backrest_Lumbar_Height"
	// FieldVehicleCabinSeatRow2MiddleBackrestLumbarSupport Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.
	FieldVehicleCabinSeatRow2MiddleBackrestLumbarSupport = "Vehicle_Cabin_Seat_Row2_Middle_Backrest_Lumbar_Support"
	// FieldVehicleCabinSeatRow2MiddleBackrestRecline Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.
	FieldVehicleCabinSeatRow2MiddleBackrestRecline = "Vehicle_Cabin_Seat_Row2_Middle_Backrest_Recline"
	// FieldVehicleCabinSeatRow2MiddleBackrestSideBolster Backrest side bolster (lumbar side support) settings.
	FieldVehicleCabinSeatRow2MiddleBackrestSideBolster = "Vehicle_Cabin_Seat_Row2_Middle_Backrest_SideBolster"
	// FieldVehicleCabinSeatRow2MiddleBackrestSideBolsterSupport Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.
	FieldVehicleCabinSeatRow2MiddleBackrestSideBolsterSupport = "Vehicle_Cabin_Seat_Row2_Middle_Backrest_SideBolster_Support"
	// FieldVehicleCabinSeatRow2MiddleHeadrest Headrest settings.
	FieldVehicleCabinSeatRow2MiddleHeadrest = "Vehicle_Cabin_Seat_Row2_Middle_Headrest"
	// FieldVehicleCabinSeatRow2MiddleHeadrestAngle Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.
	FieldVehicleCabinSeatRow2MiddleHeadrestAngle = "Vehicle_Cabin_Seat_Row2_Middle_Headrest_Angle"
	// FieldVehicleCabinSeatRow2MiddleHeadrestHeight Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.
	FieldVehicleCabinSeatRow2MiddleHeadrestHeight = "Vehicle_Cabin_Seat_Row2_Middle_Headrest_Height"
	// FieldVehicleCabinSeatRow2MiddleHeating Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat.
	FieldVehicleCabinSeatRow2MiddleHeating = "Vehicle_Cabin_Seat_Row2_Middle_Heating"
	// FieldVehicleCabinSeatRow2MiddleHeatingCooling Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.
	FieldVehicleCabinSeatRow2MiddleHeatingCooling = "Vehicle_Cabin_Seat_Row2_Middle_HeatingCooling"
	// FieldVehicleCabinSeatRow2MiddleHeight Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.
	FieldVehicleCabinSeatRow2MiddleHeight = "Vehicle_Cabin_Seat_Row2_Middle_Height"
	// FieldVehicleCabinSeatRow2MiddleIsBelted Is the belt engaged.
	FieldVehicleCabinSeatRow2MiddleIsBelted = "Vehicle_Cabin_Seat_Row2_Middle_IsBelted"
	// FieldVehicleCabinSeatRow2MiddleIsOccupied Does the seat have a passenger in it.
	FieldVehicleCabinSeatRow2MiddleIsOccupied = "Vehicle_Cabin_Seat_Row2_Middle_IsOccupied"
	// FieldVehicleCabinSeatRow2MiddleMassage Seat massage level. 0 = off. 100 = max massage.
	FieldVehicleCabinSeatRow2MiddleMassage = "Vehicle_Cabin_Seat_Row2_Middle_Massage"
	// FieldVehicleCabinSeatRow2MiddleOccupant Occupant data.
	FieldVehicleCabinSeatRow2MiddleOccupant = "Vehicle_Cabin_Seat_Row2_Middle_Occupant"
	// FieldVehicleCabinSeatRow2MiddleOccupantIdentifier Identifier attributes based on OAuth 2.0.
	FieldVehicleCabinSeatRow2MiddleOccupantIdentifier = "Vehicle_Cabin_Seat_Row2_Middle_Occupant_Identifier"
	// FieldVehicleCabinSeatRow2MiddleOccupantIdentifierIssuer Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.
	FieldVehicleCabinSeatRow2MiddleOccupantIdentifierIssuer = "Vehicle_Cabin_Seat_Row2_Middle_Occupant_Identifier_Issuer"
	// FieldVehicleCabinSeatRow2MiddleOccupantIdentifierSubject Subject for the authentication of the occupant e.g. UserID 7331677.
	FieldVehicleCabinSeatRow2MiddleOccupantIdentifierSubject = "Vehicle_Cabin_Seat_Row2_Middle_Occupant_Identifier_Subject"
	// FieldVehicleCabinSeatRow2MiddlePosition Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.
	FieldVehicleCabinSeatRow2MiddlePosition = "Vehicle_Cabin_Seat_Row2_Middle_Position"
	// FieldVehicleCabinSeatRow2MiddleSeatBeltHeight Seat belt position on vehicle z-axis. Position is relative within available movable range of the seat belt. 0 = Lowermost position supported.
	FieldVehicleCabinSeatRow2MiddleSeatBeltHeight = "Vehicle_Cabin_Seat_Row2_Middle_SeatBeltHeight"
	// FieldVehicleCabinSeatRow2MiddleSeating Describes signals related to the seat bottom of the seat.
	FieldVehicleCabinSeatRow2MiddleSeating = "Vehicle_Cabin_Seat_Row2_Middle_Seating"
	// FieldVehicleCabinSeatRow2MiddleSeatingLength Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).
	FieldVehicleCabinSeatRow2MiddleSeatingLength = "Vehicle_Cabin_Seat_Row2_Middle_Seating_Length"
	// FieldVehicleCabinSeatRow2MiddleSwitch Seat switch signals
	FieldVehicleCabinSeatRow2MiddleSwitch = "Vehicle_Cabin_Seat_Row2_Middle_Switch"
	// FieldVehicleCabinSeatRow2MiddleSwitchBackrest Describes switches related to the backrest of the seat.
	FieldVehicleCabinSeatRow2MiddleSwitchBackrest = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Backrest"
	// FieldVehicleCabinSeatRow2MiddleSwitchBackrestIsReclineBackwardEngaged Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).
	FieldVehicleCabinSeatRow2MiddleSwitchBackrestIsReclineBackwardEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Backrest_IsReclineBackwardEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchBackrestIsReclineForwardEngaged Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).
	FieldVehicleCabinSeatRow2MiddleSwitchBackrestIsReclineForwardEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Backrest_IsReclineForwardEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchBackrestLumbar Switches for SingleSeat.Backrest.Lumbar.
	FieldVehicleCabinSeatRow2MiddleSwitchBackrestLumbar = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Backrest_Lumbar"
	// FieldVehicleCabinSeatRow2MiddleSwitchBackrestLumbarIsDownEngaged Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow2MiddleSwitchBackrestLumbarIsDownEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Backrest_Lumbar_IsDownEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchBackrestLumbarIsLessSupportEngaged Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow2MiddleSwitchBackrestLumbarIsLessSupportEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Backrest_Lumbar_IsLessSupportEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchBackrestLumbarIsMoreSupportEngaged Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow2MiddleSwitchBackrestLumbarIsMoreSupportEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Backrest_Lumbar_IsMoreSupportEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchBackrestLumbarIsUpEngaged Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow2MiddleSwitchBackrestLumbarIsUpEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Backrest_Lumbar_IsUpEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchBackrestSideBolster Switches for SingleSeat.Backrest.SideBolster.
	FieldVehicleCabinSeatRow2MiddleSwitchBackrestSideBolster = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Backrest_SideBolster"
	// FieldVehicleCabinSeatRow2MiddleSwitchBackrestSideBolsterIsLessSupportEngaged Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	FieldVehicleCabinSeatRow2MiddleSwitchBackrestSideBolsterIsLessSupportEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Backrest_SideBolster_IsLessSupportEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchBackrestSideBolsterIsMoreSupportEngaged Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	FieldVehicleCabinSeatRow2MiddleSwitchBackrestSideBolsterIsMoreSupportEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Backrest_SideBolster_IsMoreSupportEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchHeadrest Switches for SingleSeat.Headrest.
	FieldVehicleCabinSeatRow2MiddleSwitchHeadrest = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Headrest"
	// FieldVehicleCabinSeatRow2MiddleSwitchHeadrestIsBackwardEngaged Head rest backward switch engaged (SingleSeat.Headrest.Angle).
	FieldVehicleCabinSeatRow2MiddleSwitchHeadrestIsBackwardEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Headrest_IsBackwardEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchHeadrestIsDownEngaged Head rest down switch engaged (SingleSeat.Headrest.Height).
	FieldVehicleCabinSeatRow2MiddleSwitchHeadrestIsDownEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Headrest_IsDownEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchHeadrestIsForwardEngaged Head rest forward switch engaged (SingleSeat.Headrest.Angle).
	FieldVehicleCabinSeatRow2MiddleSwitchHeadrestIsForwardEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Headrest_IsForwardEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchHeadrestIsUpEngaged Head rest up switch engaged (SingleSeat.Headrest.Height).
	FieldVehicleCabinSeatRow2MiddleSwitchHeadrestIsUpEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Headrest_IsUpEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchIsBackwardEngaged Seat backward switch engaged (SingleSeat.Position).
	FieldVehicleCabinSeatRow2MiddleSwitchIsBackwardEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_IsBackwardEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchIsCoolerEngaged Cooler switch for Seat heater (SingleSeat.Heating).
	FieldVehicleCabinSeatRow2MiddleSwitchIsCoolerEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_IsCoolerEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchIsDownEngaged Seat down switch engaged (SingleSeat.Height).
	FieldVehicleCabinSeatRow2MiddleSwitchIsDownEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_IsDownEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchIsForwardEngaged Seat forward switch engaged (SingleSeat.Position).
	FieldVehicleCabinSeatRow2MiddleSwitchIsForwardEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_IsForwardEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchIsTiltBackwardEngaged Tilt backward switch engaged (SingleSeat.Tilt).
	FieldVehicleCabinSeatRow2MiddleSwitchIsTiltBackwardEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_IsTiltBackwardEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchIsTiltForwardEngaged Tilt forward switch engaged (SingleSeat.Tilt).
	FieldVehicleCabinSeatRow2MiddleSwitchIsTiltForwardEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_IsTiltForwardEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchIsUpEngaged Seat up switch engaged (SingleSeat.Height).
	FieldVehicleCabinSeatRow2MiddleSwitchIsUpEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_IsUpEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchIsWarmerEngaged Warmer switch for Seat heater (SingleSeat.Heating).
	FieldVehicleCabinSeatRow2MiddleSwitchIsWarmerEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_IsWarmerEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchMassage Switches for SingleSeat.Massage.
	FieldVehicleCabinSeatRow2MiddleSwitchMassage = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Massage"
	// FieldVehicleCabinSeatRow2MiddleSwitchMassageIsDecreaseEngaged Decrease massage level switch engaged (SingleSeat.Massage).
	FieldVehicleCabinSeatRow2MiddleSwitchMassageIsDecreaseEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Massage_IsDecreaseEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchMassageIsIncreaseEngaged Increase massage level switch engaged (SingleSeat.Massage).
	FieldVehicleCabinSeatRow2MiddleSwitchMassageIsIncreaseEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Massage_IsIncreaseEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchSeating Describes switches related to the seating of the seat.
	FieldVehicleCabinSeatRow2MiddleSwitchSeating = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Seating"
	// FieldVehicleCabinSeatRow2MiddleSwitchSeatingIsBackwardEngaged Is switch to decrease seating length engaged (SingleSeat.Seating.Length).
	FieldVehicleCabinSeatRow2MiddleSwitchSeatingIsBackwardEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Seating_IsBackwardEngaged"
	// FieldVehicleCabinSeatRow2MiddleSwitchSeatingIsForwardEngaged Is switch to increase seating length engaged (SingleSeat.Seating.Length).
	FieldVehicleCabinSeatRow2MiddleSwitchSeatingIsForwardEngaged = "Vehicle_Cabin_Seat_Row2_Middle_Switch_Seating_IsForwardEngaged"
	// FieldVehicleCabinSeatRow2MiddleTilt Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.
	FieldVehicleCabinSeatRow2MiddleTilt = "Vehicle_Cabin_Seat_Row2_Middle_Tilt"
	// FieldVehicleCabinSeatRow2PassengerSide All seats.
	FieldVehicleCabinSeatRow2PassengerSide = "Vehicle_Cabin_Seat_Row2_PassengerSide"
	// FieldVehicleCabinSeatRow2PassengerSideAirbag Airbag signals.
	FieldVehicleCabinSeatRow2PassengerSideAirbag = "Vehicle_Cabin_Seat_Row2_PassengerSide_Airbag"
	// FieldVehicleCabinSeatRow2PassengerSideAirbagIsDeployed Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.
	FieldVehicleCabinSeatRow2PassengerSideAirbagIsDeployed = "Vehicle_Cabin_Seat_Row2_PassengerSide_Airbag_IsDeployed"
	// FieldVehicleCabinSeatRow2PassengerSideBackrest Describes signals related to the backrest of the seat.
	FieldVehicleCabinSeatRow2PassengerSideBackrest = "Vehicle_Cabin_Seat_Row2_PassengerSide_Backrest"
	// FieldVehicleCabinSeatRow2PassengerSideBackrestLumbar Adjustable lumbar support mechanisms in seats allow the user to change the seat back shape.
	FieldVehicleCabinSeatRow2PassengerSideBackrestLumbar = "Vehicle_Cabin_Seat_Row2_PassengerSide_Backrest_Lumbar"
	// FieldVehicleCabinSeatRow2PassengerSideBackrestLumbarHeight Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.
	FieldVehicleCabinSeatRow2PassengerSideBackrestLumbarHeight = "Vehicle_Cabin_Seat_Row2_PassengerSide_Backrest_Lumbar_Height"
	// FieldVehicleCabinSeatRow2PassengerSideBackrestLumbarSupport Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.
	FieldVehicleCabinSeatRow2PassengerSideBackrestLumbarSupport = "Vehicle_Cabin_Seat_Row2_PassengerSide_Backrest_Lumbar_Support"
	// FieldVehicleCabinSeatRow2PassengerSideBackrestRecline Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.
	FieldVehicleCabinSeatRow2PassengerSideBackrestRecline = "Vehicle_Cabin_Seat_Row2_PassengerSide_Backrest_Recline"
	// FieldVehicleCabinSeatRow2PassengerSideBackrestSideBolster Backrest side bolster (lumbar side support) settings.
	FieldVehicleCabinSeatRow2PassengerSideBackrestSideBolster = "Vehicle_Cabin_Seat_Row2_PassengerSide_Backrest_SideBolster"
	// FieldVehicleCabinSeatRow2PassengerSideBackrestSideBolsterSupport Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.
	FieldVehicleCabinSeatRow2PassengerSideBackrestSideBolsterSupport = "Vehicle_Cabin_Seat_Row2_PassengerSide_Backrest_SideBolster_Support"
	// FieldVehicleCabinSeatRow2PassengerSideHeadrest Headrest settings.
	FieldVehicleCabinSeatRow2PassengerSideHeadrest = "Vehicle_Cabin_Seat_Row2_PassengerSide_Headrest"
	// FieldVehicleCabinSeatRow2PassengerSideHeadrestAngle Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.
	FieldVehicleCabinSeatRow2PassengerSideHeadrestAngle = "Vehicle_Cabin_Seat_Row2_PassengerSide_Headrest_Angle"
	// FieldVehicleCabinSeatRow2PassengerSideHeadrestHeight Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.
	FieldVehicleCabinSeatRow2PassengerSideHeadrestHeight = "Vehicle_Cabin_Seat_Row2_PassengerSide_Headrest_Height"
	// FieldVehicleCabinSeatRow2PassengerSideHeating Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat.
	FieldVehicleCabinSeatRow2PassengerSideHeating = "Vehicle_Cabin_Seat_Row2_PassengerSide_Heating"
	// FieldVehicleCabinSeatRow2PassengerSideHeatingCooling Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.
	FieldVehicleCabinSeatRow2PassengerSideHeatingCooling = "Vehicle_Cabin_Seat_Row2_PassengerSide_HeatingCooling"
	// FieldVehicleCabinSeatRow2PassengerSideHeight Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.
	FieldVehicleCabinSeatRow2PassengerSideHeight = "Vehicle_Cabin_Seat_Row2_PassengerSide_Height"
	// FieldVehicleCabinSeatRow2PassengerSideIsBelted Is the belt engaged.
	FieldVehicleCabinSeatRow2PassengerSideIsBelted = "Vehicle_Cabin_Seat_Row2_PassengerSide_IsBelted"
	// FieldVehicleCabinSeatRow2PassengerSideIsOccupied Does the seat have a passenger in it.
	FieldVehicleCabinSeatRow2PassengerSideIsOccupied = "Vehicle_Cabin_Seat_Row2_PassengerSide_IsOccupied"
	// FieldVehicleCabinSeatRow2PassengerSideMassage Seat massage level. 0 = off. 100 = max massage.
	FieldVehicleCabinSeatRow2PassengerSideMassage = "Vehicle_Cabin_Seat_Row2_PassengerSide_Massage"
	// FieldVehicleCabinSeatRow2PassengerSideOccupant Occupant data.
	FieldVehicleCabinSeatRow2PassengerSideOccupant = "Vehicle_Cabin_Seat_Row2_PassengerSide_Occupant"
	// FieldVehicleCabinSeatRow2PassengerSideOccupantIdentifier Identifier attributes based on OAuth 2.0.
	FieldVehicleCabinSeatRow2PassengerSideOccupantIdentifier = "Vehicle_Cabin_Seat_Row2_PassengerSide_Occupant_Identifier"
	// FieldVehicleCabinSeatRow2PassengerSideOccupantIdentifierIssuer Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.
	FieldVehicleCabinSeatRow2PassengerSideOccupantIdentifierIssuer = "Vehicle_Cabin_Seat_Row2_PassengerSide_Occupant_Identifier_Issuer"
	// FieldVehicleCabinSeatRow2PassengerSideOccupantIdentifierSubject Subject for the authentication of the occupant e.g. UserID 7331677.
	FieldVehicleCabinSeatRow2PassengerSideOccupantIdentifierSubject = "Vehicle_Cabin_Seat_Row2_PassengerSide_Occupant_Identifier_Subject"
	// FieldVehicleCabinSeatRow2PassengerSidePosition Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.
	FieldVehicleCabinSeatRow2PassengerSidePosition = "Vehicle_Cabin_Seat_Row2_PassengerSide_Position"
	// FieldVehicleCabinSeatRow2PassengerSideSeatBeltHeight Seat belt position on vehicle z-axis. Position is relative within available movable range of the seat belt. 0 = Lowermost position supported.
	FieldVehicleCabinSeatRow2PassengerSideSeatBeltHeight = "Vehicle_Cabin_Seat_Row2_PassengerSide_SeatBeltHeight"
	// FieldVehicleCabinSeatRow2PassengerSideSeating Describes signals related to the seat bottom of the seat.
	FieldVehicleCabinSeatRow2PassengerSideSeating = "Vehicle_Cabin_Seat_Row2_PassengerSide_Seating"
	// FieldVehicleCabinSeatRow2PassengerSideSeatingLength Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).
	FieldVehicleCabinSeatRow2PassengerSideSeatingLength = "Vehicle_Cabin_Seat_Row2_PassengerSide_Seating_Length"
	// FieldVehicleCabinSeatRow2PassengerSideSwitch Seat switch signals
	FieldVehicleCabinSeatRow2PassengerSideSwitch = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchBackrest Describes switches related to the backrest of the seat.
	FieldVehicleCabinSeatRow2PassengerSideSwitchBackrest = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Backrest"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchBackrestIsReclineBackwardEngaged Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).
	FieldVehicleCabinSeatRow2PassengerSideSwitchBackrestIsReclineBackwardEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Backrest_IsReclineBackwardEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchBackrestIsReclineForwardEngaged Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).
	FieldVehicleCabinSeatRow2PassengerSideSwitchBackrestIsReclineForwardEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Backrest_IsReclineForwardEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchBackrestLumbar Switches for SingleSeat.Backrest.Lumbar.
	FieldVehicleCabinSeatRow2PassengerSideSwitchBackrestLumbar = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Backrest_Lumbar"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchBackrestLumbarIsDownEngaged Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow2PassengerSideSwitchBackrestLumbarIsDownEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Backrest_Lumbar_IsDownEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchBackrestLumbarIsLessSupportEngaged Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow2PassengerSideSwitchBackrestLumbarIsLessSupportEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Backrest_Lumbar_IsLessSupportEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchBackrestLumbarIsMoreSupportEngaged Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow2PassengerSideSwitchBackrestLumbarIsMoreSupportEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Backrest_Lumbar_IsMoreSupportEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchBackrestLumbarIsUpEngaged Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).
	FieldVehicleCabinSeatRow2PassengerSideSwitchBackrestLumbarIsUpEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Backrest_Lumbar_IsUpEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchBackrestSideBolster Switches for SingleSeat.Backrest.SideBolster.
	FieldVehicleCabinSeatRow2PassengerSideSwitchBackrestSideBolster = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Backrest_SideBolster"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchBackrestSideBolsterIsLessSupportEngaged Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	FieldVehicleCabinSeatRow2PassengerSideSwitchBackrestSideBolsterIsLessSupportEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Backrest_SideBolster_IsLessSupportEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchBackrestSideBolsterIsMoreSupportEngaged Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	FieldVehicleCabinSeatRow2PassengerSideSwitchBackrestSideBolsterIsMoreSupportEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Backrest_SideBolster_IsMoreSupportEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchHeadrest Switches for SingleSeat.Headrest.
	FieldVehicleCabinSeatRow2PassengerSideSwitchHeadrest = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Headrest"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchHeadrestIsBackwardEngaged Head rest backward switch engaged (SingleSeat.Headrest.Angle).
	FieldVehicleCabinSeatRow2PassengerSideSwitchHeadrestIsBackwardEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Headrest_IsBackwardEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchHeadrestIsDownEngaged Head rest down switch engaged (SingleSeat.Headrest.Height).
	FieldVehicleCabinSeatRow2PassengerSideSwitchHeadrestIsDownEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Headrest_IsDownEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchHeadrestIsForwardEngaged Head rest forward switch engaged (SingleSeat.Headrest.Angle).
	FieldVehicleCabinSeatRow2PassengerSideSwitchHeadrestIsForwardEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Headrest_IsForwardEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchHeadrestIsUpEngaged Head rest up switch engaged (SingleSeat.Headrest.Height).
	FieldVehicleCabinSeatRow2PassengerSideSwitchHeadrestIsUpEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Headrest_IsUpEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchIsBackwardEngaged Seat backward switch engaged (SingleSeat.Position).
	FieldVehicleCabinSeatRow2PassengerSideSwitchIsBackwardEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_IsBackwardEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchIsCoolerEngaged Cooler switch for Seat heater (SingleSeat.Heating).
	FieldVehicleCabinSeatRow2PassengerSideSwitchIsCoolerEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_IsCoolerEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchIsDownEngaged Seat down switch engaged (SingleSeat.Height).
	FieldVehicleCabinSeatRow2PassengerSideSwitchIsDownEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_IsDownEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchIsForwardEngaged Seat forward switch engaged (SingleSeat.Position).
	FieldVehicleCabinSeatRow2PassengerSideSwitchIsForwardEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_IsForwardEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchIsTiltBackwardEngaged Tilt backward switch engaged (SingleSeat.Tilt).
	FieldVehicleCabinSeatRow2PassengerSideSwitchIsTiltBackwardEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_IsTiltBackwardEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchIsTiltForwardEngaged Tilt forward switch engaged (SingleSeat.Tilt).
	FieldVehicleCabinSeatRow2PassengerSideSwitchIsTiltForwardEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_IsTiltForwardEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchIsUpEngaged Seat up switch engaged (SingleSeat.Height).
	FieldVehicleCabinSeatRow2PassengerSideSwitchIsUpEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_IsUpEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchIsWarmerEngaged Warmer switch for Seat heater (SingleSeat.Heating).
	FieldVehicleCabinSeatRow2PassengerSideSwitchIsWarmerEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_IsWarmerEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchMassage Switches for SingleSeat.Massage.
	FieldVehicleCabinSeatRow2PassengerSideSwitchMassage = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Massage"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchMassageIsDecreaseEngaged Decrease massage level switch engaged (SingleSeat.Massage).
	FieldVehicleCabinSeatRow2PassengerSideSwitchMassageIsDecreaseEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Massage_IsDecreaseEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchMassageIsIncreaseEngaged Increase massage level switch engaged (SingleSeat.Massage).
	FieldVehicleCabinSeatRow2PassengerSideSwitchMassageIsIncreaseEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Massage_IsIncreaseEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchSeating Describes switches related to the seating of the seat.
	FieldVehicleCabinSeatRow2PassengerSideSwitchSeating = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Seating"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchSeatingIsBackwardEngaged Is switch to decrease seating length engaged (SingleSeat.Seating.Length).
	FieldVehicleCabinSeatRow2PassengerSideSwitchSeatingIsBackwardEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Seating_IsBackwardEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideSwitchSeatingIsForwardEngaged Is switch to increase seating length engaged (SingleSeat.Seating.Length).
	FieldVehicleCabinSeatRow2PassengerSideSwitchSeatingIsForwardEngaged = "Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Seating_IsForwardEngaged"
	// FieldVehicleCabinSeatRow2PassengerSideTilt Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.
	FieldVehicleCabinSeatRow2PassengerSideTilt = "Vehicle_Cabin_Seat_Row2_PassengerSide_Tilt"
	// FieldVehicleCabinSeatPosCount Number of seats across each row from the front to the rear.
	FieldVehicleCabinSeatPosCount = "Vehicle_Cabin_SeatPosCount"
	// FieldVehicleCabinSeatRowCount Number of seat rows in vehicle.
	FieldVehicleCabinSeatRowCount = "Vehicle_Cabin_SeatRowCount"
	// FieldVehicleCabinSunroof Sun roof status.
	FieldVehicleCabinSunroof = "Vehicle_Cabin_Sunroof"
	// FieldVehicleCabinSunroofPosition Sunroof position. 0 = Fully closed 100 = Fully opened. -100 = Fully tilted.
	FieldVehicleCabinSunroofPosition = "Vehicle_Cabin_Sunroof_Position"
	// FieldVehicleCabinSunroofShade Sun roof shade status. Open = Retracted, Closed = Deployed. Start position for Sunroof.Shade is Open/Retracted.
	FieldVehicleCabinSunroofShade = "Vehicle_Cabin_Sunroof_Shade"
	// FieldVehicleCabinSunroofShadeIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	FieldVehicleCabinSunroofShadeIsOpen = "Vehicle_Cabin_Sunroof_Shade_IsOpen"
	// FieldVehicleCabinSunroofShadePosition Item position. 0 = Start position 100 = End position.
	FieldVehicleCabinSunroofShadePosition = "Vehicle_Cabin_Sunroof_Shade_Position"
	// FieldVehicleCabinSunroofShadeSwitch Switch controlling sliding action such as window, sunroof, or blind.
	FieldVehicleCabinSunroofShadeSwitch = "Vehicle_Cabin_Sunroof_Shade_Switch"
	// FieldVehicleCabinSunroofSwitch Switch controlling sliding action such as window, sunroof, or shade.
	FieldVehicleCabinSunroofSwitch = "Vehicle_Cabin_Sunroof_Switch"
	// FieldVehicleCargoVolume The available volume for cargo or luggage. For automobiles, this is usually the trunk volume.
	FieldVehicleCargoVolume = "Vehicle_CargoVolume"
	// FieldVehicleChassis All data concerning steering, suspension, wheels, and brakes.
	FieldVehicleChassis = "Vehicle_Chassis"
	// FieldVehicleChassisAccelerator Accelerator signals
	FieldVehicleChassisAccelerator = "Vehicle_Chassis_Accelerator"
	// FieldVehicleChassisAcceleratorPedalPosition Accelerator pedal position as percent. 0 = Not depressed. 100 = Fully depressed.
	FieldVehicleChassisAcceleratorPedalPosition = "Vehicle_Chassis_Accelerator_PedalPosition"
	// FieldVehicleChassisAxle Axle signals
	FieldVehicleChassisAxle = "Vehicle_Chassis_Axle"
	// FieldVehicleChassisAxleRow1 Axle signals
	FieldVehicleChassisAxleRow1 = "Vehicle_Chassis_Axle_Row1"
	// FieldVehicleChassisAxleRow1AxleWidth The lateral distance between the wheel mounting faces, measured along the spindle axis.
	FieldVehicleChassisAxleRow1AxleWidth = "Vehicle_Chassis_Axle_Row1_AxleWidth"
	// FieldVehicleChassisAxleRow1SteeringAngle Single track two-axle model steering angle. Angle according to ISO 8855. Positive = degrees to the left. Negative = degrees to the right.
	FieldVehicleChassisAxleRow1SteeringAngle = "Vehicle_Chassis_Axle_Row1_SteeringAngle"
	// FieldVehicleChassisAxleRow1TireAspectRatio Aspect ratio between tire section height and tire section width, as per ETRTO / TRA standard.
	FieldVehicleChassisAxleRow1TireAspectRatio = "Vehicle_Chassis_Axle_Row1_TireAspectRatio"
	// FieldVehicleChassisAxleRow1TireDiameter Outer diameter of tires, in inches, as per ETRTO / TRA standard.
	FieldVehicleChassisAxleRow1TireDiameter = "Vehicle_Chassis_Axle_Row1_TireDiameter"
	// FieldVehicleChassisAxleRow1TireWidth Nominal section width of tires, in mm, as per ETRTO / TRA standard.
	FieldVehicleChassisAxleRow1TireWidth = "Vehicle_Chassis_Axle_Row1_TireWidth"
	// FieldVehicleChassisAxleRow1TrackWidth The lateral distance between the centers of the wheels, measured along the spindle, or axle axis. If there are dual rear wheels, measure from the midway points between the inner and outer tires.
	FieldVehicleChassisAxleRow1TrackWidth = "Vehicle_Chassis_Axle_Row1_TrackWidth"
	// FieldVehicleChassisAxleRow1TreadWidth The lateral distance between the centerlines of the base tires at ground, including camber angle. If there are dual rear wheels, measure from the midway points between the inner and outer tires.
	FieldVehicleChassisAxleRow1TreadWidth = "Vehicle_Chassis_Axle_Row1_TreadWidth"
	// FieldVehicleChassisAxleRow1Wheel Wheel signals for axle
	FieldVehicleChassisAxleRow1Wheel = "Vehicle_Chassis_Axle_Row1_Wheel"
	// FieldVehicleChassisAxleRow1WheelLeft Wheel signals for axle
	FieldVehicleChassisAxleRow1WheelLeft = "Vehicle_Chassis_Axle_Row1_Wheel_Left"
	// FieldVehicleChassisAxleRow1WheelLeftBrake Brake signals for wheel
	FieldVehicleChassisAxleRow1WheelLeftBrake = "Vehicle_Chassis_Axle_Row1_Wheel_Left_Brake"
	// FieldVehicleChassisAxleRow1WheelLeftBrakeFluidLevel Brake fluid level as percent. 0 = Empty. 100 = Full.
	FieldVehicleChassisAxleRow1WheelLeftBrakeFluidLevel = "Vehicle_Chassis_Axle_Row1_Wheel_Left_Brake_FluidLevel"
	// FieldVehicleChassisAxleRow1WheelLeftBrakeIsBrakesWorn Brake pad wear status. True = Worn. False = Not Worn.
	FieldVehicleChassisAxleRow1WheelLeftBrakeIsBrakesWorn = "Vehicle_Chassis_Axle_Row1_Wheel_Left_Brake_IsBrakesWorn"
	// FieldVehicleChassisAxleRow1WheelLeftBrakeIsFluidLevelLow Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK.
	FieldVehicleChassisAxleRow1WheelLeftBrakeIsFluidLevelLow = "Vehicle_Chassis_Axle_Row1_Wheel_Left_Brake_IsFluidLevelLow"
	// FieldVehicleChassisAxleRow1WheelLeftBrakePadWear Brake pad wear as percent. 0 = No Wear. 100 = Worn.
	FieldVehicleChassisAxleRow1WheelLeftBrakePadWear = "Vehicle_Chassis_Axle_Row1_Wheel_Left_Brake_PadWear"
	// FieldVehicleChassisAxleRow1WheelLeftSpeed Rotational speed of a vehicle's wheel.
	FieldVehicleChassisAxleRow1WheelLeftSpeed = "Vehicle_Chassis_Axle_Row1_Wheel_Left_Speed"
	// FieldVehicleChassisAxleRow1WheelLeftTire Tire signals for wheel.
	FieldVehicleChassisAxleRow1WheelLeftTire = "Vehicle_Chassis_Axle_Row1_Wheel_Left_Tire"
	// FieldVehicleChassisAxleRow1WheelLeftTireIsPressureLow Tire Pressure Status. True = Low tire pressure. False = Good tire pressure.
	FieldVehicleChassisAxleRow1WheelLeftTireIsPressureLow = "Vehicle_Chassis_Axle_Row1_Wheel_Left_Tire_IsPressureLow"
	// FieldVehicleChassisAxleRow1WheelLeftTirePressure Tire pressure in kilo-Pascal.
	FieldVehicleChassisAxleRow1WheelLeftTirePressure = "Vehicle_Chassis_Axle_Row1_Wheel_Left_Tire_Pressure"
	// FieldVehicleChassisAxleRow1WheelLeftTireTemperature Tire temperature in Celsius.
	FieldVehicleChassisAxleRow1WheelLeftTireTemperature = "Vehicle_Chassis_Axle_Row1_Wheel_Left_Tire_Temperature"
	// FieldVehicleChassisAxleRow1WheelRight Wheel signals for axle
	FieldVehicleChassisAxleRow1WheelRight = "Vehicle_Chassis_Axle_Row1_Wheel_Right"
	// FieldVehicleChassisAxleRow1WheelRightBrake Brake signals for wheel
	FieldVehicleChassisAxleRow1WheelRightBrake = "Vehicle_Chassis_Axle_Row1_Wheel_Right_Brake"
	// FieldVehicleChassisAxleRow1WheelRightBrakeFluidLevel Brake fluid level as percent. 0 = Empty. 100 = Full.
	FieldVehicleChassisAxleRow1WheelRightBrakeFluidLevel = "Vehicle_Chassis_Axle_Row1_Wheel_Right_Brake_FluidLevel"
	// FieldVehicleChassisAxleRow1WheelRightBrakeIsBrakesWorn Brake pad wear status. True = Worn. False = Not Worn.
	FieldVehicleChassisAxleRow1WheelRightBrakeIsBrakesWorn = "Vehicle_Chassis_Axle_Row1_Wheel_Right_Brake_IsBrakesWorn"
	// FieldVehicleChassisAxleRow1WheelRightBrakeIsFluidLevelLow Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK.
	FieldVehicleChassisAxleRow1WheelRightBrakeIsFluidLevelLow = "Vehicle_Chassis_Axle_Row1_Wheel_Right_Brake_IsFluidLevelLow"
	// FieldVehicleChassisAxleRow1WheelRightBrakePadWear Brake pad wear as percent. 0 = No Wear. 100 = Worn.
	FieldVehicleChassisAxleRow1WheelRightBrakePadWear = "Vehicle_Chassis_Axle_Row1_Wheel_Right_Brake_PadWear"
	// FieldVehicleChassisAxleRow1WheelRightSpeed Rotational speed of a vehicle's wheel.
	FieldVehicleChassisAxleRow1WheelRightSpeed = "Vehicle_Chassis_Axle_Row1_Wheel_Right_Speed"
	// FieldVehicleChassisAxleRow1WheelRightTire Tire signals for wheel.
	FieldVehicleChassisAxleRow1WheelRightTire = "Vehicle_Chassis_Axle_Row1_Wheel_Right_Tire"
	// FieldVehicleChassisAxleRow1WheelRightTireIsPressureLow Tire Pressure Status. True = Low tire pressure. False = Good tire pressure.
	FieldVehicleChassisAxleRow1WheelRightTireIsPressureLow = "Vehicle_Chassis_Axle_Row1_Wheel_Right_Tire_IsPressureLow"
	// FieldVehicleChassisAxleRow1WheelRightTirePressure Tire pressure in kilo-Pascal.
	FieldVehicleChassisAxleRow1WheelRightTirePressure = "Vehicle_Chassis_Axle_Row1_Wheel_Right_Tire_Pressure"
	// FieldVehicleChassisAxleRow1WheelRightTireTemperature Tire temperature in Celsius.
	FieldVehicleChassisAxleRow1WheelRightTireTemperature = "Vehicle_Chassis_Axle_Row1_Wheel_Right_Tire_Temperature"
	// FieldVehicleChassisAxleRow1WheelCount Number of wheels on the axle
	FieldVehicleChassisAxleRow1WheelCount = "Vehicle_Chassis_Axle_Row1_WheelCount"
	// FieldVehicleChassisAxleRow1WheelDiameter Diameter of wheels (rims without tires), in inches, as per ETRTO / TRA standard.
	FieldVehicleChassisAxleRow1WheelDiameter = "Vehicle_Chassis_Axle_Row1_WheelDiameter"
	// FieldVehicleChassisAxleRow1WheelWidth Width of wheels (rims without tires), in inches, as per ETRTO / TRA standard.
	FieldVehicleChassisAxleRow1WheelWidth = "Vehicle_Chassis_Axle_Row1_WheelWidth"
	// FieldVehicleChassisAxleRow2 Axle signals
	FieldVehicleChassisAxleRow2 = "Vehicle_Chassis_Axle_Row2"
	// FieldVehicleChassisAxleRow2AxleWidth The lateral distance between the wheel mounting faces, measured along the spindle axis.
	FieldVehicleChassisAxleRow2AxleWidth = "Vehicle_Chassis_Axle_Row2_AxleWidth"
	// FieldVehicleChassisAxleRow2SteeringAngle Single track two-axle model steering angle. Angle according to ISO 8855. Positive = degrees to the left. Negative = degrees to the right.
	FieldVehicleChassisAxleRow2SteeringAngle = "Vehicle_Chassis_Axle_Row2_SteeringAngle"
	// FieldVehicleChassisAxleRow2TireAspectRatio Aspect ratio between tire section height and tire section width, as per ETRTO / TRA standard.
	FieldVehicleChassisAxleRow2TireAspectRatio = "Vehicle_Chassis_Axle_Row2_TireAspectRatio"
	// FieldVehicleChassisAxleRow2TireDiameter Outer diameter of tires, in inches, as per ETRTO / TRA standard.
	FieldVehicleChassisAxleRow2TireDiameter = "Vehicle_Chassis_Axle_Row2_TireDiameter"
	// FieldVehicleChassisAxleRow2TireWidth Nominal section width of tires, in mm, as per ETRTO / TRA standard.
	FieldVehicleChassisAxleRow2TireWidth = "Vehicle_Chassis_Axle_Row2_TireWidth"
	// FieldVehicleChassisAxleRow2TrackWidth The lateral distance between the centers of the wheels, measured along the spindle, or axle axis. If there are dual rear wheels, measure from the midway points between the inner and outer tires.
	FieldVehicleChassisAxleRow2TrackWidth = "Vehicle_Chassis_Axle_Row2_TrackWidth"
	// FieldVehicleChassisAxleRow2TreadWidth The lateral distance between the centerlines of the base tires at ground, including camber angle. If there are dual rear wheels, measure from the midway points between the inner and outer tires.
	FieldVehicleChassisAxleRow2TreadWidth = "Vehicle_Chassis_Axle_Row2_TreadWidth"
	// FieldVehicleChassisAxleRow2Wheel Wheel signals for axle
	FieldVehicleChassisAxleRow2Wheel = "Vehicle_Chassis_Axle_Row2_Wheel"
	// FieldVehicleChassisAxleRow2WheelLeft Wheel signals for axle
	FieldVehicleChassisAxleRow2WheelLeft = "Vehicle_Chassis_Axle_Row2_Wheel_Left"
	// FieldVehicleChassisAxleRow2WheelLeftBrake Brake signals for wheel
	FieldVehicleChassisAxleRow2WheelLeftBrake = "Vehicle_Chassis_Axle_Row2_Wheel_Left_Brake"
	// FieldVehicleChassisAxleRow2WheelLeftBrakeFluidLevel Brake fluid level as percent. 0 = Empty. 100 = Full.
	FieldVehicleChassisAxleRow2WheelLeftBrakeFluidLevel = "Vehicle_Chassis_Axle_Row2_Wheel_Left_Brake_FluidLevel"
	// FieldVehicleChassisAxleRow2WheelLeftBrakeIsBrakesWorn Brake pad wear status. True = Worn. False = Not Worn.
	FieldVehicleChassisAxleRow2WheelLeftBrakeIsBrakesWorn = "Vehicle_Chassis_Axle_Row2_Wheel_Left_Brake_IsBrakesWorn"
	// FieldVehicleChassisAxleRow2WheelLeftBrakeIsFluidLevelLow Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK.
	FieldVehicleChassisAxleRow2WheelLeftBrakeIsFluidLevelLow = "Vehicle_Chassis_Axle_Row2_Wheel_Left_Brake_IsFluidLevelLow"
	// FieldVehicleChassisAxleRow2WheelLeftBrakePadWear Brake pad wear as percent. 0 = No Wear. 100 = Worn.
	FieldVehicleChassisAxleRow2WheelLeftBrakePadWear = "Vehicle_Chassis_Axle_Row2_Wheel_Left_Brake_PadWear"
	// FieldVehicleChassisAxleRow2WheelLeftSpeed Rotational speed of a vehicle's wheel.
	FieldVehicleChassisAxleRow2WheelLeftSpeed = "Vehicle_Chassis_Axle_Row2_Wheel_Left_Speed"
	// FieldVehicleChassisAxleRow2WheelLeftTire Tire signals for wheel.
	FieldVehicleChassisAxleRow2WheelLeftTire = "Vehicle_Chassis_Axle_Row2_Wheel_Left_Tire"
	// FieldVehicleChassisAxleRow2WheelLeftTireIsPressureLow Tire Pressure Status. True = Low tire pressure. False = Good tire pressure.
	FieldVehicleChassisAxleRow2WheelLeftTireIsPressureLow = "Vehicle_Chassis_Axle_Row2_Wheel_Left_Tire_IsPressureLow"
	// FieldVehicleChassisAxleRow2WheelLeftTirePressure Tire pressure in kilo-Pascal.
	FieldVehicleChassisAxleRow2WheelLeftTirePressure = "Vehicle_Chassis_Axle_Row2_Wheel_Left_Tire_Pressure"
	// FieldVehicleChassisAxleRow2WheelLeftTireTemperature Tire temperature in Celsius.
	FieldVehicleChassisAxleRow2WheelLeftTireTemperature = "Vehicle_Chassis_Axle_Row2_Wheel_Left_Tire_Temperature"
	// FieldVehicleChassisAxleRow2WheelRight Wheel signals for axle
	FieldVehicleChassisAxleRow2WheelRight = "Vehicle_Chassis_Axle_Row2_Wheel_Right"
	// FieldVehicleChassisAxleRow2WheelRightBrake Brake signals for wheel
	FieldVehicleChassisAxleRow2WheelRightBrake = "Vehicle_Chassis_Axle_Row2_Wheel_Right_Brake"
	// FieldVehicleChassisAxleRow2WheelRightBrakeFluidLevel Brake fluid level as percent. 0 = Empty. 100 = Full.
	FieldVehicleChassisAxleRow2WheelRightBrakeFluidLevel = "Vehicle_Chassis_Axle_Row2_Wheel_Right_Brake_FluidLevel"
	// FieldVehicleChassisAxleRow2WheelRightBrakeIsBrakesWorn Brake pad wear status. True = Worn. False = Not Worn.
	FieldVehicleChassisAxleRow2WheelRightBrakeIsBrakesWorn = "Vehicle_Chassis_Axle_Row2_Wheel_Right_Brake_IsBrakesWorn"
	// FieldVehicleChassisAxleRow2WheelRightBrakeIsFluidLevelLow Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK.
	FieldVehicleChassisAxleRow2WheelRightBrakeIsFluidLevelLow = "Vehicle_Chassis_Axle_Row2_Wheel_Right_Brake_IsFluidLevelLow"
	// FieldVehicleChassisAxleRow2WheelRightBrakePadWear Brake pad wear as percent. 0 = No Wear. 100 = Worn.
	FieldVehicleChassisAxleRow2WheelRightBrakePadWear = "Vehicle_Chassis_Axle_Row2_Wheel_Right_Brake_PadWear"
	// FieldVehicleChassisAxleRow2WheelRightSpeed Rotational speed of a vehicle's wheel.
	FieldVehicleChassisAxleRow2WheelRightSpeed = "Vehicle_Chassis_Axle_Row2_Wheel_Right_Speed"
	// FieldVehicleChassisAxleRow2WheelRightTire Tire signals for wheel.
	FieldVehicleChassisAxleRow2WheelRightTire = "Vehicle_Chassis_Axle_Row2_Wheel_Right_Tire"
	// FieldVehicleChassisAxleRow2WheelRightTireIsPressureLow Tire Pressure Status. True = Low tire pressure. False = Good tire pressure.
	FieldVehicleChassisAxleRow2WheelRightTireIsPressureLow = "Vehicle_Chassis_Axle_Row2_Wheel_Right_Tire_IsPressureLow"
	// FieldVehicleChassisAxleRow2WheelRightTirePressure Tire pressure in kilo-Pascal.
	FieldVehicleChassisAxleRow2WheelRightTirePressure = "Vehicle_Chassis_Axle_Row2_Wheel_Right_Tire_Pressure"
	// FieldVehicleChassisAxleRow2WheelRightTireTemperature Tire temperature in Celsius.
	FieldVehicleChassisAxleRow2WheelRightTireTemperature = "Vehicle_Chassis_Axle_Row2_Wheel_Right_Tire_Temperature"
	// FieldVehicleChassisAxleRow2WheelCount Number of wheels on the axle
	FieldVehicleChassisAxleRow2WheelCount = "Vehicle_Chassis_Axle_Row2_WheelCount"
	// FieldVehicleChassisAxleRow2WheelDiameter Diameter of wheels (rims without tires), in inches, as per ETRTO / TRA standard.
	FieldVehicleChassisAxleRow2WheelDiameter = "Vehicle_Chassis_Axle_Row2_WheelDiameter"
	// FieldVehicleChassisAxleRow2WheelWidth Width of wheels (rims without tires), in inches, as per ETRTO / TRA standard.
	FieldVehicleChassisAxleRow2WheelWidth = "Vehicle_Chassis_Axle_Row2_WheelWidth"
	// FieldVehicleChassisAxleCount Number of axles on the vehicle
	FieldVehicleChassisAxleCount = "Vehicle_Chassis_AxleCount"
	// FieldVehicleChassisBrake Brake system signals
	FieldVehicleChassisBrake = "Vehicle_Chassis_Brake"
	// FieldVehicleChassisBrakeIsDriverEmergencyBrakingDetected Indicates if emergency braking initiated by driver is detected. True = Emergency braking detected. False = Emergency braking not detected.
	FieldVehicleChassisBrakeIsDriverEmergencyBrakingDetected = "Vehicle_Chassis_Brake_IsDriverEmergencyBrakingDetected"
	// FieldVehicleChassisBrakePedalPosition Brake pedal position as percent. 0 = Not depressed. 100 = Fully depressed.
	FieldVehicleChassisBrakePedalPosition = "Vehicle_Chassis_Brake_PedalPosition"
	// FieldVehicleChassisParkingBrake Parking brake signals
	FieldVehicleChassisParkingBrake = "Vehicle_Chassis_ParkingBrake"
	// FieldVehicleChassisParkingBrakeIsAutoApplyEnabled Indicates if parking brake will be automatically engaged when the vehicle engine is turned off.
	FieldVehicleChassisParkingBrakeIsAutoApplyEnabled = "Vehicle_Chassis_ParkingBrake_IsAutoApplyEnabled"
	// FieldVehicleChassisParkingBrakeIsEngaged Parking brake status. True = Parking Brake is Engaged. False = Parking Brake is not Engaged.
	FieldVehicleChassisParkingBrakeIsEngaged = "Vehicle_Chassis_ParkingBrake_IsEngaged"
	// FieldVehicleChassisSteeringWheel Steering wheel signals
	FieldVehicleChassisSteeringWheel = "Vehicle_Chassis_SteeringWheel"
	// FieldVehicleChassisSteeringWheelAngle Steering wheel angle. Positive = degrees to the left. Negative = degrees to the right.
	FieldVehicleChassisSteeringWheelAngle = "Vehicle_Chassis_SteeringWheel_Angle"
	// FieldVehicleChassisSteeringWheelExtension Steering wheel column extension from dashboard. 0 = Closest to dashboard. 100 = Furthest from dashboard.
	FieldVehicleChassisSteeringWheelExtension = "Vehicle_Chassis_SteeringWheel_Extension"
	// FieldVehicleChassisSteeringWheelHeatingCooling Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.
	FieldVehicleChassisSteeringWheelHeatingCooling = "Vehicle_Chassis_SteeringWheel_HeatingCooling"
	// FieldVehicleChassisSteeringWheelTilt Steering wheel column tilt. 0 = Lowest position. 100 = Highest position.
	FieldVehicleChassisSteeringWheelTilt = "Vehicle_Chassis_SteeringWheel_Tilt"
	// FieldVehicleChassisWheelbase Overall wheelbase, in mm.
	FieldVehicleChassisWheelbase = "Vehicle_Chassis_Wheelbase"
	// FieldVehicleConnectivity Connectivity data.
	FieldVehicleConnectivity = "Vehicle_Connectivity"
	// FieldVehicleConnectivityIsConnectivityAvailable Indicates if connectivity between vehicle and cloud is available. True = Connectivity is available. False = Connectivity is not available.
	FieldVehicleConnectivityIsConnectivityAvailable = "Vehicle_Connectivity_IsConnectivityAvailable"
	// FieldVehicleCurbWeight Vehicle curb weight, including all liquids and full tank of fuel, but no cargo or passengers.
	FieldVehicleCurbWeight = "Vehicle_CurbWeight"
	// FieldVehicleCurrentLocation The current latitude and longitude of the vehicle.
	FieldVehicleCurrentLocation = "Vehicle_CurrentLocation"
	// FieldVehicleCurrentLocationAltitude Current altitude relative to WGS 84 reference ellipsoid, as measured at the position of GNSS receiver antenna.
	FieldVehicleCurrentLocationAltitude = "Vehicle_CurrentLocation_Altitude"
	// FieldVehicleCurrentLocationGNSSReceiver Information on the GNSS receiver used for determining current location.
	FieldVehicleCurrentLocationGNSSReceiver = "Vehicle_CurrentLocation_GNSSReceiver"
	// FieldVehicleCurrentLocationGNSSReceiverFixType Fix status of GNSS receiver.
	FieldVehicleCurrentLocationGNSSReceiverFixType = "Vehicle_CurrentLocation_GNSSReceiver_FixType"
	// FieldVehicleCurrentLocationGNSSReceiverMountingPosition Mounting position of GNSS receiver antenna relative to vehicle coordinate system. Axis definitions according to ISO 8855. Origin at center of (first) rear axle.
	FieldVehicleCurrentLocationGNSSReceiverMountingPosition = "Vehicle_CurrentLocation_GNSSReceiver_MountingPosition"
	// FieldVehicleCurrentLocationGNSSReceiverMountingPositionX Mounting position of GNSS receiver antenna relative to vehicle coordinate system. Axis definitions according to ISO 8855. Origin at center of (first) rear axle. Positive values = forward of rear axle. Negative values = backward of rear axle.
	FieldVehicleCurrentLocationGNSSReceiverMountingPositionX = "Vehicle_CurrentLocation_GNSSReceiver_MountingPosition_X"
	// FieldVehicleCurrentLocationGNSSReceiverMountingPositionY Mounting position of GNSS receiver antenna relative to vehicle coordinate system. Axis definitions according to ISO 8855. Origin at center of (first) rear axle. Positive values = left of origin. Negative values = right of origin. Left/Right is as seen from driver perspective, i.e. by a person looking forward.
	FieldVehicleCurrentLocationGNSSReceiverMountingPositionY = "Vehicle_CurrentLocation_GNSSReceiver_MountingPosition_Y"
	// FieldVehicleCurrentLocationGNSSReceiverMountingPositionZ Mounting position of GNSS receiver on Z-axis. Axis definitions according to ISO 8855. Origin at center of (first) rear axle. Positive values = above center of rear axle. Negative values = below center of rear axle.
	FieldVehicleCurrentLocationGNSSReceiverMountingPositionZ = "Vehicle_CurrentLocation_GNSSReceiver_MountingPosition_Z"
	// FieldVehicleCurrentLocationHeading Current heading relative to geographic north. 0 = North, 90 = East, 180 = South, 270 = West.
	FieldVehicleCurrentLocationHeading = "Vehicle_CurrentLocation_Heading"
	// FieldVehicleCurrentLocationHorizontalAccuracy Accuracy of the latitude and longitude coordinates.
	FieldVehicleCurrentLocationHorizontalAccuracy = "Vehicle_CurrentLocation_HorizontalAccuracy"
	// FieldVehicleCurrentLocationLatitude Current latitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
	FieldVehicleCurrentLocationLatitude = "Vehicle_CurrentLocation_Latitude"
	// FieldVehicleCurrentLocationLongitude Current longitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
	FieldVehicleCurrentLocationLongitude = "Vehicle_CurrentLocation_Longitude"
	// FieldVehicleCurrentLocationTimestamp Timestamp from GNSS system for current location, formatted according to ISO 8601 with UTC time zone.
	FieldVehicleCurrentLocationTimestamp = "Vehicle_CurrentLocation_Timestamp"
	// FieldVehicleCurrentLocationVerticalAccuracy Accuracy of altitude.
	FieldVehicleCurrentLocationVerticalAccuracy = "Vehicle_CurrentLocation_VerticalAccuracy"
	// FieldVehicleCurrentOverallWeight Current overall Vehicle weight. Including passengers, cargo and other load inside the car.
	FieldVehicleCurrentOverallWeight = "Vehicle_CurrentOverallWeight"
	// FieldVehicleDIMO dimo specific metadata.
	FieldVehicleDIMO = "Vehicle_DIMO"
	// FieldVehicleDIMODefinitionID ID for the vehicles definition
	FieldVehicleDIMODefinitionID = "Vehicle_DIMO_DefinitionID"
	// FieldVehicleDIMOSource where the data was sourced from
	FieldVehicleDIMOSource = "Vehicle_DIMO_Source"
	// FieldVehicleDIMOSubject subjet of this vehicle data
	FieldVehicleDIMOSubject = "Vehicle_DIMO_Subject"
	// FieldVehicleDIMOTimestamp timestamp of when this data was colllected
	FieldVehicleDIMOTimestamp = "Vehicle_DIMO_Timestamp"
	// FieldVehicleDIMOType type of data collected
	FieldVehicleDIMOType = "Vehicle_DIMO_Type"
	// FieldVehicleDIMOVehicleID unque DIMO ID for the vehicle
	FieldVehicleDIMOVehicleID = "Vehicle_DIMO_VehicleID"
	// FieldVehicleDriver Driver data.
	FieldVehicleDriver = "Vehicle_Driver"
	// FieldVehicleDriverAttentiveProbability Probability of attentiveness of the driver.
	FieldVehicleDriverAttentiveProbability = "Vehicle_Driver_AttentiveProbability"
	// FieldVehicleDriverDistractionLevel Distraction level of the driver, which can be evaluated by multiple factors e.g. driving situation, acoustical or optical signals inside the cockpit, ongoing phone calls.
	FieldVehicleDriverDistractionLevel = "Vehicle_Driver_DistractionLevel"
	// FieldVehicleDriverFatigueLevel Fatigue level of the driver, which can be evaluated by multiple factors e.g. trip time, behaviour of steering, eye status.
	FieldVehicleDriverFatigueLevel = "Vehicle_Driver_FatigueLevel"
	// FieldVehicleDriverHeartRate Heart rate of the driver.
	FieldVehicleDriverHeartRate = "Vehicle_Driver_HeartRate"
	// FieldVehicleDriverIdentifier Identifier attributes based on OAuth 2.0.
	FieldVehicleDriverIdentifier = "Vehicle_Driver_Identifier"
	// FieldVehicleDriverIdentifierIssuer Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.
	FieldVehicleDriverIdentifierIssuer = "Vehicle_Driver_Identifier_Issuer"
	// FieldVehicleDriverIdentifierSubject Subject for the authentication of the occupant e.g. UserID 7331677.
	FieldVehicleDriverIdentifierSubject = "Vehicle_Driver_Identifier_Subject"
	// FieldVehicleDriverIsEyesOnRoad Has driver the eyes on road or not?
	FieldVehicleDriverIsEyesOnRoad = "Vehicle_Driver_IsEyesOnRoad"
	// FieldVehicleDriverIsHandsOnWheel Are the driver's hands on the steering wheel or not?
	FieldVehicleDriverIsHandsOnWheel = "Vehicle_Driver_IsHandsOnWheel"
	// FieldVehicleEmissionsCO2 The CO2 emissions.
	FieldVehicleEmissionsCO2 = "Vehicle_EmissionsCO2"
	// FieldVehicleExterior Information about exterior measured by vehicle.
	FieldVehicleExterior = "Vehicle_Exterior"
	// FieldVehicleExteriorAirTemperature Air temperature outside the vehicle.
	FieldVehicleExteriorAirTemperature = "Vehicle_Exterior_AirTemperature"
	// FieldVehicleExteriorHumidity Relative humidity outside the vehicle. 0 = Dry, 100 = Air fully saturated.
	FieldVehicleExteriorHumidity = "Vehicle_Exterior_Humidity"
	// FieldVehicleExteriorLightIntensity Light intensity outside the vehicle. 0 = No light detected, 100 = Fully lit.
	FieldVehicleExteriorLightIntensity = "Vehicle_Exterior_LightIntensity"
	// FieldVehicleGrossWeight Curb weight of vehicle, including all liquids and full tank of fuel and full load of cargo and passengers.
	FieldVehicleGrossWeight = "Vehicle_GrossWeight"
	// FieldVehicleHeight Overall vehicle height.
	FieldVehicleHeight = "Vehicle_Height"
	// FieldVehicleIsAutoPowerOptimize Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
	FieldVehicleIsAutoPowerOptimize = "Vehicle_IsAutoPowerOptimize"
	// FieldVehicleIsBrokenDown Vehicle breakdown or any similar event causing vehicle to stop on the road, that might pose a risk to other road users. True = Vehicle broken down on the road, due to e.g. engine problems, flat tire, out of gas, brake problems. False = Vehicle not broken down.
	FieldVehicleIsBrokenDown = "Vehicle_IsBrokenDown"
	// FieldVehicleIsMoving Indicates whether the vehicle is stationary or moving.
	FieldVehicleIsMoving = "Vehicle_IsMoving"
	// FieldVehicleLength Overall vehicle length.
	FieldVehicleLength = "Vehicle_Length"
	// FieldVehicleLowVoltageBattery Signals related to low voltage battery.
	FieldVehicleLowVoltageBattery = "Vehicle_LowVoltageBattery"
	// FieldVehicleLowVoltageBatteryCurrentCurrent Current current flowing in/out of the low voltage battery. Positive = Current flowing in to battery, e.g. during charging or driving. Negative = Current flowing out of battery, e.g. when using the battery to start a combustion engine.
	FieldVehicleLowVoltageBatteryCurrentCurrent = "Vehicle_LowVoltageBattery_CurrentCurrent"
	// FieldVehicleLowVoltageBatteryCurrentVoltage Current Voltage of the low voltage battery.
	FieldVehicleLowVoltageBatteryCurrentVoltage = "Vehicle_LowVoltageBattery_CurrentVoltage"
	// FieldVehicleLowVoltageBatteryNominalCapacity Nominal capacity of the low voltage battery.
	FieldVehicleLowVoltageBatteryNominalCapacity = "Vehicle_LowVoltageBattery_NominalCapacity"
	// FieldVehicleLowVoltageBatteryNominalVoltage Nominal Voltage of the battery.
	FieldVehicleLowVoltageBatteryNominalVoltage = "Vehicle_LowVoltageBattery_NominalVoltage"
	// FieldVehicleLowVoltageSystemState State of the supply voltage of the control units (usually 12V).
	FieldVehicleLowVoltageSystemState = "Vehicle_LowVoltageSystemState"
	// FieldVehicleMaxTowBallWeight Maximum vertical weight on the tow ball of a trailer.
	FieldVehicleMaxTowBallWeight = "Vehicle_MaxTowBallWeight"
	// FieldVehicleMaxTowWeight Maximum weight of trailer.
	FieldVehicleMaxTowWeight = "Vehicle_MaxTowWeight"
	// FieldVehicleOBD OBD data.
	FieldVehicleOBD = "Vehicle_OBD"
	// FieldVehicleOBDAbsoluteLoad PID 43 - Absolute load value
	FieldVehicleOBDAbsoluteLoad = "Vehicle_OBD_AbsoluteLoad"
	// FieldVehicleOBDAcceleratorPositionD PID 49 - Accelerator pedal position D
	FieldVehicleOBDAcceleratorPositionD = "Vehicle_OBD_AcceleratorPositionD"
	// FieldVehicleOBDAcceleratorPositionE PID 4A - Accelerator pedal position E
	FieldVehicleOBDAcceleratorPositionE = "Vehicle_OBD_AcceleratorPositionE"
	// FieldVehicleOBDAcceleratorPositionF PID 4B - Accelerator pedal position F
	FieldVehicleOBDAcceleratorPositionF = "Vehicle_OBD_AcceleratorPositionF"
	// FieldVehicleOBDAirStatus PID 12 - Secondary air status
	FieldVehicleOBDAirStatus = "Vehicle_OBD_AirStatus"
	// FieldVehicleOBDAmbientAirTemperature PID 46 - Ambient air temperature
	FieldVehicleOBDAmbientAirTemperature = "Vehicle_OBD_AmbientAirTemperature"
	// FieldVehicleOBDBarometricPressure PID 33 - Barometric pressure
	FieldVehicleOBDBarometricPressure = "Vehicle_OBD_BarometricPressure"
	// FieldVehicleOBDCatalyst Catalyst signals
	FieldVehicleOBDCatalyst = "Vehicle_OBD_Catalyst"
	// FieldVehicleOBDCatalystBank1 Catalyst bank 1 signals
	FieldVehicleOBDCatalystBank1 = "Vehicle_OBD_Catalyst_Bank1"
	// FieldVehicleOBDCatalystBank1Temperature1 PID 3C - Catalyst temperature from bank 1, sensor 1
	FieldVehicleOBDCatalystBank1Temperature1 = "Vehicle_OBD_Catalyst_Bank1_Temperature1"
	// FieldVehicleOBDCatalystBank1Temperature2 PID 3E - Catalyst temperature from bank 1, sensor 2
	FieldVehicleOBDCatalystBank1Temperature2 = "Vehicle_OBD_Catalyst_Bank1_Temperature2"
	// FieldVehicleOBDCatalystBank2 Catalyst bank 2 signals
	FieldVehicleOBDCatalystBank2 = "Vehicle_OBD_Catalyst_Bank2"
	// FieldVehicleOBDCatalystBank2Temperature1 PID 3D - Catalyst temperature from bank 2, sensor 1
	FieldVehicleOBDCatalystBank2Temperature1 = "Vehicle_OBD_Catalyst_Bank2_Temperature1"
	// FieldVehicleOBDCatalystBank2Temperature2 PID 3F - Catalyst temperature from bank 2, sensor 2
	FieldVehicleOBDCatalystBank2Temperature2 = "Vehicle_OBD_Catalyst_Bank2_Temperature2"
	// FieldVehicleOBDCommandedEGR PID 2C - Commanded exhaust gas recirculation (EGR)
	FieldVehicleOBDCommandedEGR = "Vehicle_OBD_CommandedEGR"
	// FieldVehicleOBDCommandedEVAP PID 2E - Commanded evaporative purge (EVAP) valve
	FieldVehicleOBDCommandedEVAP = "Vehicle_OBD_CommandedEVAP"
	// FieldVehicleOBDCommandedEquivalenceRatio PID 44 - Commanded equivalence ratio
	FieldVehicleOBDCommandedEquivalenceRatio = "Vehicle_OBD_CommandedEquivalenceRatio"
	// FieldVehicleOBDControlModuleVoltage PID 42 - Control module voltage
	FieldVehicleOBDControlModuleVoltage = "Vehicle_OBD_ControlModuleVoltage"
	// FieldVehicleOBDCoolantTemperature PID 05 - Coolant temperature
	FieldVehicleOBDCoolantTemperature = "Vehicle_OBD_CoolantTemperature"
	// FieldVehicleOBDDTCList List of currently active DTCs formatted according OBD II (SAE-J2012DA_201812) standard ([P|C|B|U]XXXXX )
	FieldVehicleOBDDTCList = "Vehicle_OBD_DTCList"
	// FieldVehicleOBDDistanceSinceDTCClear PID 31 - Distance traveled since codes cleared
	FieldVehicleOBDDistanceSinceDTCClear = "Vehicle_OBD_DistanceSinceDTCClear"
	// FieldVehicleOBDDistanceWithMIL PID 21 - Distance traveled with MIL on
	FieldVehicleOBDDistanceWithMIL = "Vehicle_OBD_DistanceWithMIL"
	// FieldVehicleOBDDriveCycleStatus PID 41 - OBD status for the current drive cycle
	FieldVehicleOBDDriveCycleStatus = "Vehicle_OBD_DriveCycleStatus"
	// FieldVehicleOBDDriveCycleStatusDTCCount Number of sensor Trouble Codes (DTC)
	FieldVehicleOBDDriveCycleStatusDTCCount = "Vehicle_OBD_DriveCycleStatus_DTCCount"
	// FieldVehicleOBDDriveCycleStatusIgnitionType Type of the ignition for ICE - spark = spark plug ignition, compression = self-igniting (Diesel engines)
	FieldVehicleOBDDriveCycleStatusIgnitionType = "Vehicle_OBD_DriveCycleStatus_IgnitionType"
	// FieldVehicleOBDDriveCycleStatusIsMILOn Malfunction Indicator Light (MIL) - False = Off, True = On
	FieldVehicleOBDDriveCycleStatusIsMILOn = "Vehicle_OBD_DriveCycleStatus_IsMILOn"
	// FieldVehicleOBDEGRError PID 2D - Exhaust gas recirculation (EGR) error
	FieldVehicleOBDEGRError = "Vehicle_OBD_EGRError"
	// FieldVehicleOBDEVAPVaporPressure PID 32 - Evaporative purge (EVAP) system pressure
	FieldVehicleOBDEVAPVaporPressure = "Vehicle_OBD_EVAPVaporPressure"
	// FieldVehicleOBDEVAPVaporPressureAbsolute PID 53 - Absolute evaporative purge (EVAP) system pressure
	FieldVehicleOBDEVAPVaporPressureAbsolute = "Vehicle_OBD_EVAPVaporPressureAbsolute"
	// FieldVehicleOBDEVAPVaporPressureAlternate PID 54 - Alternate evaporative purge (EVAP) system pressure
	FieldVehicleOBDEVAPVaporPressureAlternate = "Vehicle_OBD_EVAPVaporPressureAlternate"
	// FieldVehicleOBDEngineLoad PID 04 - Engine load in percent - 0 = no load, 100 = full load
	FieldVehicleOBDEngineLoad = "Vehicle_OBD_EngineLoad"
	// FieldVehicleOBDEngineSpeed PID 0C - Engine speed measured as rotations per minute
	FieldVehicleOBDEngineSpeed = "Vehicle_OBD_EngineSpeed"
	// FieldVehicleOBDEthanolPercent PID 52 - Percentage of ethanol in the fuel
	FieldVehicleOBDEthanolPercent = "Vehicle_OBD_EthanolPercent"
	// FieldVehicleOBDFreezeDTC PID 02 - DTC that triggered the freeze frame
	FieldVehicleOBDFreezeDTC = "Vehicle_OBD_FreezeDTC"
	// FieldVehicleOBDFuelInjectionTiming PID 5D - Fuel injection timing
	FieldVehicleOBDFuelInjectionTiming = "Vehicle_OBD_FuelInjectionTiming"
	// FieldVehicleOBDFuelLevel PID 2F - Fuel level in the fuel tank
	FieldVehicleOBDFuelLevel = "Vehicle_OBD_FuelLevel"
	// FieldVehicleOBDFuelPressure PID 0A - Fuel pressure
	FieldVehicleOBDFuelPressure = "Vehicle_OBD_FuelPressure"
	// FieldVehicleOBDFuelRailPressureAbsolute PID 59 - Absolute fuel rail pressure
	FieldVehicleOBDFuelRailPressureAbsolute = "Vehicle_OBD_FuelRailPressureAbsolute"
	// FieldVehicleOBDFuelRailPressureDirect PID 23 - Fuel rail pressure direct inject
	FieldVehicleOBDFuelRailPressureDirect = "Vehicle_OBD_FuelRailPressureDirect"
	// FieldVehicleOBDFuelRailPressureVac PID 22 - Fuel rail pressure relative to vacuum
	FieldVehicleOBDFuelRailPressureVac = "Vehicle_OBD_FuelRailPressureVac"
	// FieldVehicleOBDFuelRate PID 5E - Engine fuel rate
	FieldVehicleOBDFuelRate = "Vehicle_OBD_FuelRate"
	// FieldVehicleOBDFuelStatus PID 03 - Fuel status
	FieldVehicleOBDFuelStatus = "Vehicle_OBD_FuelStatus"
	// FieldVehicleOBDFuelType PID 51 - Fuel type
	FieldVehicleOBDFuelType = "Vehicle_OBD_FuelType"
	// FieldVehicleOBDHybridBatteryRemaining PID 5B - Remaining life of hybrid battery
	FieldVehicleOBDHybridBatteryRemaining = "Vehicle_OBD_HybridBatteryRemaining"
	// FieldVehicleOBDIntakeTemp PID 0F - Intake temperature
	FieldVehicleOBDIntakeTemp = "Vehicle_OBD_IntakeTemp"
	// FieldVehicleOBDIsPTOActive PID 1E - Auxiliary input status (power take off)
	FieldVehicleOBDIsPTOActive = "Vehicle_OBD_IsPTOActive"
	// FieldVehicleOBDLongTermFuelTrim1 PID 07 - Long Term (learned) Fuel Trim - Bank 1 - negative percent leaner, positive percent richer
	FieldVehicleOBDLongTermFuelTrim1 = "Vehicle_OBD_LongTermFuelTrim1"
	// FieldVehicleOBDLongTermFuelTrim2 PID 09 - Long Term (learned) Fuel Trim - Bank 2 - negative percent leaner, positive percent richer
	FieldVehicleOBDLongTermFuelTrim2 = "Vehicle_OBD_LongTermFuelTrim2"
	// FieldVehicleOBDLongTermO2Trim1 PID 56 (byte A) - Long term secondary O2 trim - Bank 1
	FieldVehicleOBDLongTermO2Trim1 = "Vehicle_OBD_LongTermO2Trim1"
	// FieldVehicleOBDLongTermO2Trim2 PID 58 (byte A) - Long term secondary O2 trim - Bank 2
	FieldVehicleOBDLongTermO2Trim2 = "Vehicle_OBD_LongTermO2Trim2"
	// FieldVehicleOBDLongTermO2Trim3 PID 56 (byte B) - Long term secondary O2 trim - Bank 3
	FieldVehicleOBDLongTermO2Trim3 = "Vehicle_OBD_LongTermO2Trim3"
	// FieldVehicleOBDLongTermO2Trim4 PID 58 (byte B) - Long term secondary O2 trim - Bank 4
	FieldVehicleOBDLongTermO2Trim4 = "Vehicle_OBD_LongTermO2Trim4"
	// FieldVehicleOBDMAF PID 10 - Grams of air drawn into engine per second
	FieldVehicleOBDMAF = "Vehicle_OBD_MAF"
	// FieldVehicleOBDMAP PID 0B - Intake manifold pressure
	FieldVehicleOBDMAP = "Vehicle_OBD_MAP"
	// FieldVehicleOBDMaxMAF PID 50 - Maximum flow for mass air flow sensor
	FieldVehicleOBDMaxMAF = "Vehicle_OBD_MaxMAF"
	// FieldVehicleOBDO2 Oxygen sensors (PID 14 - PID 1B)
	FieldVehicleOBDO2 = "Vehicle_OBD_O2"
	// FieldVehicleOBDO2Sensor1 Oxygen sensors (PID 14 - PID 1B)
	FieldVehicleOBDO2Sensor1 = "Vehicle_OBD_O2_Sensor1"
	// FieldVehicleOBDO2Sensor1ShortTermFuelTrim PID 1x (byte B) - Short term fuel trim
	FieldVehicleOBDO2Sensor1ShortTermFuelTrim = "Vehicle_OBD_O2_Sensor1_ShortTermFuelTrim"
	// FieldVehicleOBDO2Sensor1Voltage PID 1x (byte A) - Sensor voltage
	FieldVehicleOBDO2Sensor1Voltage = "Vehicle_OBD_O2_Sensor1_Voltage"
	// FieldVehicleOBDO2Sensor2 Oxygen sensors (PID 14 - PID 1B)
	FieldVehicleOBDO2Sensor2 = "Vehicle_OBD_O2_Sensor2"
	// FieldVehicleOBDO2Sensor2ShortTermFuelTrim PID 1x (byte B) - Short term fuel trim
	FieldVehicleOBDO2Sensor2ShortTermFuelTrim = "Vehicle_OBD_O2_Sensor2_ShortTermFuelTrim"
	// FieldVehicleOBDO2Sensor2Voltage PID 1x (byte A) - Sensor voltage
	FieldVehicleOBDO2Sensor2Voltage = "Vehicle_OBD_O2_Sensor2_Voltage"
	// FieldVehicleOBDO2Sensor3 Oxygen sensors (PID 14 - PID 1B)
	FieldVehicleOBDO2Sensor3 = "Vehicle_OBD_O2_Sensor3"
	// FieldVehicleOBDO2Sensor3ShortTermFuelTrim PID 1x (byte B) - Short term fuel trim
	FieldVehicleOBDO2Sensor3ShortTermFuelTrim = "Vehicle_OBD_O2_Sensor3_ShortTermFuelTrim"
	// FieldVehicleOBDO2Sensor3Voltage PID 1x (byte A) - Sensor voltage
	FieldVehicleOBDO2Sensor3Voltage = "Vehicle_OBD_O2_Sensor3_Voltage"
	// FieldVehicleOBDO2Sensor4 Oxygen sensors (PID 14 - PID 1B)
	FieldVehicleOBDO2Sensor4 = "Vehicle_OBD_O2_Sensor4"
	// FieldVehicleOBDO2Sensor4ShortTermFuelTrim PID 1x (byte B) - Short term fuel trim
	FieldVehicleOBDO2Sensor4ShortTermFuelTrim = "Vehicle_OBD_O2_Sensor4_ShortTermFuelTrim"
	// FieldVehicleOBDO2Sensor4Voltage PID 1x (byte A) - Sensor voltage
	FieldVehicleOBDO2Sensor4Voltage = "Vehicle_OBD_O2_Sensor4_Voltage"
	// FieldVehicleOBDO2Sensor5 Oxygen sensors (PID 14 - PID 1B)
	FieldVehicleOBDO2Sensor5 = "Vehicle_OBD_O2_Sensor5"
	// FieldVehicleOBDO2Sensor5ShortTermFuelTrim PID 1x (byte B) - Short term fuel trim
	FieldVehicleOBDO2Sensor5ShortTermFuelTrim = "Vehicle_OBD_O2_Sensor5_ShortTermFuelTrim"
	// FieldVehicleOBDO2Sensor5Voltage PID 1x (byte A) - Sensor voltage
	FieldVehicleOBDO2Sensor5Voltage = "Vehicle_OBD_O2_Sensor5_Voltage"
	// FieldVehicleOBDO2Sensor6 Oxygen sensors (PID 14 - PID 1B)
	FieldVehicleOBDO2Sensor6 = "Vehicle_OBD_O2_Sensor6"
	// FieldVehicleOBDO2Sensor6ShortTermFuelTrim PID 1x (byte B) - Short term fuel trim
	FieldVehicleOBDO2Sensor6ShortTermFuelTrim = "Vehicle_OBD_O2_Sensor6_ShortTermFuelTrim"
	// FieldVehicleOBDO2Sensor6Voltage PID 1x (byte A) - Sensor voltage
	FieldVehicleOBDO2Sensor6Voltage = "Vehicle_OBD_O2_Sensor6_Voltage"
	// FieldVehicleOBDO2Sensor7 Oxygen sensors (PID 14 - PID 1B)
	FieldVehicleOBDO2Sensor7 = "Vehicle_OBD_O2_Sensor7"
	// FieldVehicleOBDO2Sensor7ShortTermFuelTrim PID 1x (byte B) - Short term fuel trim
	FieldVehicleOBDO2Sensor7ShortTermFuelTrim = "Vehicle_OBD_O2_Sensor7_ShortTermFuelTrim"
	// FieldVehicleOBDO2Sensor7Voltage PID 1x (byte A) - Sensor voltage
	FieldVehicleOBDO2Sensor7Voltage = "Vehicle_OBD_O2_Sensor7_Voltage"
	// FieldVehicleOBDO2Sensor8 Oxygen sensors (PID 14 - PID 1B)
	FieldVehicleOBDO2Sensor8 = "Vehicle_OBD_O2_Sensor8"
	// FieldVehicleOBDO2Sensor8ShortTermFuelTrim PID 1x (byte B) - Short term fuel trim
	FieldVehicleOBDO2Sensor8ShortTermFuelTrim = "Vehicle_OBD_O2_Sensor8_ShortTermFuelTrim"
	// FieldVehicleOBDO2Sensor8Voltage PID 1x (byte A) - Sensor voltage
	FieldVehicleOBDO2Sensor8Voltage = "Vehicle_OBD_O2_Sensor8_Voltage"
	// FieldVehicleOBDO2WR Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B)
	FieldVehicleOBDO2WR = "Vehicle_OBD_O2WR"
	// FieldVehicleOBDO2WRSensor1 Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B)
	FieldVehicleOBDO2WRSensor1 = "Vehicle_OBD_O2WR_Sensor1"
	// FieldVehicleOBDO2WRSensor1Current PID 3x (byte CD) - Current for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor1Current = "Vehicle_OBD_O2WR_Sensor1_Current"
	// FieldVehicleOBDO2WRSensor1Lambda PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor1Lambda = "Vehicle_OBD_O2WR_Sensor1_Lambda"
	// FieldVehicleOBDO2WRSensor1Voltage PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor1Voltage = "Vehicle_OBD_O2WR_Sensor1_Voltage"
	// FieldVehicleOBDO2WRSensor2 Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B)
	FieldVehicleOBDO2WRSensor2 = "Vehicle_OBD_O2WR_Sensor2"
	// FieldVehicleOBDO2WRSensor2Current PID 3x (byte CD) - Current for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor2Current = "Vehicle_OBD_O2WR_Sensor2_Current"
	// FieldVehicleOBDO2WRSensor2Lambda PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor2Lambda = "Vehicle_OBD_O2WR_Sensor2_Lambda"
	// FieldVehicleOBDO2WRSensor2Voltage PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor2Voltage = "Vehicle_OBD_O2WR_Sensor2_Voltage"
	// FieldVehicleOBDO2WRSensor3 Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B)
	FieldVehicleOBDO2WRSensor3 = "Vehicle_OBD_O2WR_Sensor3"
	// FieldVehicleOBDO2WRSensor3Current PID 3x (byte CD) - Current for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor3Current = "Vehicle_OBD_O2WR_Sensor3_Current"
	// FieldVehicleOBDO2WRSensor3Lambda PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor3Lambda = "Vehicle_OBD_O2WR_Sensor3_Lambda"
	// FieldVehicleOBDO2WRSensor3Voltage PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor3Voltage = "Vehicle_OBD_O2WR_Sensor3_Voltage"
	// FieldVehicleOBDO2WRSensor4 Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B)
	FieldVehicleOBDO2WRSensor4 = "Vehicle_OBD_O2WR_Sensor4"
	// FieldVehicleOBDO2WRSensor4Current PID 3x (byte CD) - Current for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor4Current = "Vehicle_OBD_O2WR_Sensor4_Current"
	// FieldVehicleOBDO2WRSensor4Lambda PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor4Lambda = "Vehicle_OBD_O2WR_Sensor4_Lambda"
	// FieldVehicleOBDO2WRSensor4Voltage PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor4Voltage = "Vehicle_OBD_O2WR_Sensor4_Voltage"
	// FieldVehicleOBDO2WRSensor5 Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B)
	FieldVehicleOBDO2WRSensor5 = "Vehicle_OBD_O2WR_Sensor5"
	// FieldVehicleOBDO2WRSensor5Current PID 3x (byte CD) - Current for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor5Current = "Vehicle_OBD_O2WR_Sensor5_Current"
	// FieldVehicleOBDO2WRSensor5Lambda PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor5Lambda = "Vehicle_OBD_O2WR_Sensor5_Lambda"
	// FieldVehicleOBDO2WRSensor5Voltage PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor5Voltage = "Vehicle_OBD_O2WR_Sensor5_Voltage"
	// FieldVehicleOBDO2WRSensor6 Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B)
	FieldVehicleOBDO2WRSensor6 = "Vehicle_OBD_O2WR_Sensor6"
	// FieldVehicleOBDO2WRSensor6Current PID 3x (byte CD) - Current for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor6Current = "Vehicle_OBD_O2WR_Sensor6_Current"
	// FieldVehicleOBDO2WRSensor6Lambda PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor6Lambda = "Vehicle_OBD_O2WR_Sensor6_Lambda"
	// FieldVehicleOBDO2WRSensor6Voltage PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor6Voltage = "Vehicle_OBD_O2WR_Sensor6_Voltage"
	// FieldVehicleOBDO2WRSensor7 Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B)
	FieldVehicleOBDO2WRSensor7 = "Vehicle_OBD_O2WR_Sensor7"
	// FieldVehicleOBDO2WRSensor7Current PID 3x (byte CD) - Current for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor7Current = "Vehicle_OBD_O2WR_Sensor7_Current"
	// FieldVehicleOBDO2WRSensor7Lambda PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor7Lambda = "Vehicle_OBD_O2WR_Sensor7_Lambda"
	// FieldVehicleOBDO2WRSensor7Voltage PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor7Voltage = "Vehicle_OBD_O2WR_Sensor7_Voltage"
	// FieldVehicleOBDO2WRSensor8 Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B)
	FieldVehicleOBDO2WRSensor8 = "Vehicle_OBD_O2WR_Sensor8"
	// FieldVehicleOBDO2WRSensor8Current PID 3x (byte CD) - Current for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor8Current = "Vehicle_OBD_O2WR_Sensor8_Current"
	// FieldVehicleOBDO2WRSensor8Lambda PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor8Lambda = "Vehicle_OBD_O2WR_Sensor8_Lambda"
	// FieldVehicleOBDO2WRSensor8Voltage PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
	FieldVehicleOBDO2WRSensor8Voltage = "Vehicle_OBD_O2WR_Sensor8_Voltage"
	// FieldVehicleOBDOBDStandards PID 1C - OBD standards this vehicle conforms to
	FieldVehicleOBDOBDStandards = "Vehicle_OBD_OBDStandards"
	// FieldVehicleOBDOilTemperature PID 5C - Engine oil temperature
	FieldVehicleOBDOilTemperature = "Vehicle_OBD_OilTemperature"
	// FieldVehicleOBDOxygenSensorsIn2Banks PID 13 - Presence of oxygen sensors in 2 banks. [A0..A3] == Bank 1, Sensors 1-4. [A4..A7] == Bank 2, Sensors 1-4
	FieldVehicleOBDOxygenSensorsIn2Banks = "Vehicle_OBD_OxygenSensorsIn2Banks"
	// FieldVehicleOBDOxygenSensorsIn4Banks PID 1D - Presence of oxygen sensors in 4 banks. Similar to PID 13, but [A0..A7] == [B1S1, B1S2, B2S1, B2S2, B3S1, B3S2, B4S1, B4S2]
	FieldVehicleOBDOxygenSensorsIn4Banks = "Vehicle_OBD_OxygenSensorsIn4Banks"
	// FieldVehicleOBDPidsA PID 00 - Array of the supported PIDs 01 to 20 in Hexadecimal.
	FieldVehicleOBDPidsA = "Vehicle_OBD_PidsA"
	// FieldVehicleOBDPidsB PID 20 - Array of the supported PIDs 21 to 40 in Hexadecimal.
	FieldVehicleOBDPidsB = "Vehicle_OBD_PidsB"
	// FieldVehicleOBDPidsC PID 40 - Array of the supported PIDs 41 to 60 in Hexadecimal.
	FieldVehicleOBDPidsC = "Vehicle_OBD_PidsC"
	// FieldVehicleOBDRelativeAcceleratorPosition PID 5A - Relative accelerator pedal position
	FieldVehicleOBDRelativeAcceleratorPosition = "Vehicle_OBD_RelativeAcceleratorPosition"
	// FieldVehicleOBDRelativeThrottlePosition PID 45 - Relative throttle position
	FieldVehicleOBDRelativeThrottlePosition = "Vehicle_OBD_RelativeThrottlePosition"
	// FieldVehicleOBDRunTime PID 1F - Engine run time
	FieldVehicleOBDRunTime = "Vehicle_OBD_RunTime"
	// FieldVehicleOBDRunTimeMIL PID 4D - Run time with MIL on
	FieldVehicleOBDRunTimeMIL = "Vehicle_OBD_RunTimeMIL"
	// FieldVehicleOBDShortTermFuelTrim1 PID 06 - Short Term (immediate) Fuel Trim - Bank 1 - negative percent leaner, positive percent richer
	FieldVehicleOBDShortTermFuelTrim1 = "Vehicle_OBD_ShortTermFuelTrim1"
	// FieldVehicleOBDShortTermFuelTrim2 PID 08 - Short Term (immediate) Fuel Trim - Bank 2 - negative percent leaner, positive percent richer
	FieldVehicleOBDShortTermFuelTrim2 = "Vehicle_OBD_ShortTermFuelTrim2"
	// FieldVehicleOBDShortTermO2Trim1 PID 55 (byte A) - Short term secondary O2 trim - Bank 1
	FieldVehicleOBDShortTermO2Trim1 = "Vehicle_OBD_ShortTermO2Trim1"
	// FieldVehicleOBDShortTermO2Trim2 PID 57 (byte A) - Short term secondary O2 trim - Bank 2
	FieldVehicleOBDShortTermO2Trim2 = "Vehicle_OBD_ShortTermO2Trim2"
	// FieldVehicleOBDShortTermO2Trim3 PID 55 (byte B) - Short term secondary O2 trim - Bank 3
	FieldVehicleOBDShortTermO2Trim3 = "Vehicle_OBD_ShortTermO2Trim3"
	// FieldVehicleOBDShortTermO2Trim4 PID 57 (byte B) - Short term secondary O2 trim - Bank 4
	FieldVehicleOBDShortTermO2Trim4 = "Vehicle_OBD_ShortTermO2Trim4"
	// FieldVehicleOBDSpeed PID 0D - Vehicle speed
	FieldVehicleOBDSpeed = "Vehicle_OBD_Speed"
	// FieldVehicleOBDStatus PID 01 - OBD status
	FieldVehicleOBDStatus = "Vehicle_OBD_Status"
	// FieldVehicleOBDStatusDTCCount Number of Diagnostic Trouble Codes (DTC)
	FieldVehicleOBDStatusDTCCount = "Vehicle_OBD_Status_DTCCount"
	// FieldVehicleOBDStatusIgnitionType Type of the ignition for ICE - spark = spark plug ignition, compression = self-igniting (Diesel engines)
	FieldVehicleOBDStatusIgnitionType = "Vehicle_OBD_Status_IgnitionType"
	// FieldVehicleOBDStatusIsMILOn Malfunction Indicator Light (MIL) False = Off, True = On
	FieldVehicleOBDStatusIsMILOn = "Vehicle_OBD_Status_IsMILOn"
	// FieldVehicleOBDThrottleActuator PID 4C - Commanded throttle actuator
	FieldVehicleOBDThrottleActuator = "Vehicle_OBD_ThrottleActuator"
	// FieldVehicleOBDThrottlePosition PID 11 - Throttle position - 0 = closed throttle, 100 = open throttle
	FieldVehicleOBDThrottlePosition = "Vehicle_OBD_ThrottlePosition"
	// FieldVehicleOBDThrottlePositionB PID 47 - Absolute throttle position B
	FieldVehicleOBDThrottlePositionB = "Vehicle_OBD_ThrottlePositionB"
	// FieldVehicleOBDThrottlePositionC PID 48 - Absolute throttle position C
	FieldVehicleOBDThrottlePositionC = "Vehicle_OBD_ThrottlePositionC"
	// FieldVehicleOBDTimeSinceDTCCleared PID 4E - Time since trouble codes cleared
	FieldVehicleOBDTimeSinceDTCCleared = "Vehicle_OBD_TimeSinceDTCCleared"
	// FieldVehicleOBDTimingAdvance PID 0E - Time advance
	FieldVehicleOBDTimingAdvance = "Vehicle_OBD_TimingAdvance"
	// FieldVehicleOBDWarmupsSinceDTCClear PID 30 - Number of warm-ups since codes cleared
	FieldVehicleOBDWarmupsSinceDTCClear = "Vehicle_OBD_WarmupsSinceDTCClear"
	// FieldVehiclePowerOptimizeLevel Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
	FieldVehiclePowerOptimizeLevel = "Vehicle_PowerOptimizeLevel"
	// FieldVehiclePowertrain Powertrain data for battery management, etc.
	FieldVehiclePowertrain = "Vehicle_Powertrain"
	// FieldVehiclePowertrainAccumulatedBrakingEnergy The accumulated energy from regenerative braking over lifetime.
	FieldVehiclePowertrainAccumulatedBrakingEnergy = "Vehicle_Powertrain_AccumulatedBrakingEnergy"
	// FieldVehiclePowertrainCombustionEngine Engine-specific data, stopping at the bell housing.
	FieldVehiclePowertrainCombustionEngine = "Vehicle_Powertrain_CombustionEngine"
	// FieldVehiclePowertrainCombustionEngineAspirationType Type of aspiration (natural, turbocharger, supercharger etc).
	FieldVehiclePowertrainCombustionEngineAspirationType = "Vehicle_Powertrain_CombustionEngine_AspirationType"
	// FieldVehiclePowertrainCombustionEngineBore Bore in millimetres.
	FieldVehiclePowertrainCombustionEngineBore = "Vehicle_Powertrain_CombustionEngine_Bore"
	// FieldVehiclePowertrainCombustionEngineCompressionRatio Engine compression ratio, specified in the format 'X:1', e.g. '9.2:1'.
	FieldVehiclePowertrainCombustionEngineCompressionRatio = "Vehicle_Powertrain_CombustionEngine_CompressionRatio"
	// FieldVehiclePowertrainCombustionEngineConfiguration Engine configuration.
	FieldVehiclePowertrainCombustionEngineConfiguration = "Vehicle_Powertrain_CombustionEngine_Configuration"
	// FieldVehiclePowertrainCombustionEngineDieselExhaustFluid Signals related to Diesel Exhaust Fluid (DEF). DEF is called AUS32 in ISO 22241.
	FieldVehiclePowertrainCombustionEngineDieselExhaustFluid = "Vehicle_Powertrain_CombustionEngine_DieselExhaustFluid"
	// FieldVehiclePowertrainCombustionEngineDieselExhaustFluidCapacity Capacity in liters of the Diesel Exhaust Fluid Tank.
	FieldVehiclePowertrainCombustionEngineDieselExhaustFluidCapacity = "Vehicle_Powertrain_CombustionEngine_DieselExhaustFluid_Capacity"
	// FieldVehiclePowertrainCombustionEngineDieselExhaustFluidIsLevelLow Indicates if the Diesel Exhaust Fluid level is low. True if level is low. Definition of low is vehicle dependent.
	FieldVehiclePowertrainCombustionEngineDieselExhaustFluidIsLevelLow = "Vehicle_Powertrain_CombustionEngine_DieselExhaustFluid_IsLevelLow"
	// FieldVehiclePowertrainCombustionEngineDieselExhaustFluidLevel Level of the Diesel Exhaust Fluid tank as percent of capacity. 0 = empty. 100 = full.
	FieldVehiclePowertrainCombustionEngineDieselExhaustFluidLevel = "Vehicle_Powertrain_CombustionEngine_DieselExhaustFluid_Level"
	// FieldVehiclePowertrainCombustionEngineDieselExhaustFluidRange Remaining range in meters of the Diesel Exhaust Fluid present in the vehicle.
	FieldVehiclePowertrainCombustionEngineDieselExhaustFluidRange = "Vehicle_Powertrain_CombustionEngine_DieselExhaustFluid_Range"
	// FieldVehiclePowertrainCombustionEngineDieselParticulateFilter Diesel Particulate Filter signals.
	FieldVehiclePowertrainCombustionEngineDieselParticulateFilter = "Vehicle_Powertrain_CombustionEngine_DieselParticulateFilter"
	// FieldVehiclePowertrainCombustionEngineDieselParticulateFilterDeltaPressure Delta Pressure of Diesel Particulate Filter.
	FieldVehiclePowertrainCombustionEngineDieselParticulateFilterDeltaPressure = "Vehicle_Powertrain_CombustionEngine_DieselParticulateFilter_DeltaPressure"
	// FieldVehiclePowertrainCombustionEngineDieselParticulateFilterInletTemperature Inlet temperature of Diesel Particulate Filter.
	FieldVehiclePowertrainCombustionEngineDieselParticulateFilterInletTemperature = "Vehicle_Powertrain_CombustionEngine_DieselParticulateFilter_InletTemperature"
	// FieldVehiclePowertrainCombustionEngineDieselParticulateFilterOutletTemperature Outlet temperature of Diesel Particulate Filter.
	FieldVehiclePowertrainCombustionEngineDieselParticulateFilterOutletTemperature = "Vehicle_Powertrain_CombustionEngine_DieselParticulateFilter_OutletTemperature"
	// FieldVehiclePowertrainCombustionEngineDisplacement Displacement in cubic centimetres.
	FieldVehiclePowertrainCombustionEngineDisplacement = "Vehicle_Powertrain_CombustionEngine_Displacement"
	// FieldVehiclePowertrainCombustionEngineECT Engine coolant temperature.
	FieldVehiclePowertrainCombustionEngineECT = "Vehicle_Powertrain_CombustionEngine_ECT"
	// FieldVehiclePowertrainCombustionEngineEOP Engine oil pressure.
	FieldVehiclePowertrainCombustionEngineEOP = "Vehicle_Powertrain_CombustionEngine_EOP"
	// FieldVehiclePowertrainCombustionEngineEOT Engine oil temperature.
	FieldVehiclePowertrainCombustionEngineEOT = "Vehicle_Powertrain_CombustionEngine_EOT"
	// FieldVehiclePowertrainCombustionEngineEngineCode Engine code designation, as specified by vehicle manufacturer.
	FieldVehiclePowertrainCombustionEngineEngineCode = "Vehicle_Powertrain_CombustionEngine_EngineCode"
	// FieldVehiclePowertrainCombustionEngineEngineCoolantCapacity Engine coolant capacity in liters.
	FieldVehiclePowertrainCombustionEngineEngineCoolantCapacity = "Vehicle_Powertrain_CombustionEngine_EngineCoolantCapacity"
	// FieldVehiclePowertrainCombustionEngineEngineHours Accumulated time during engine lifetime with 'engine speed (rpm) > 0'.
	FieldVehiclePowertrainCombustionEngineEngineHours = "Vehicle_Powertrain_CombustionEngine_EngineHours"
	// FieldVehiclePowertrainCombustionEngineEngineOilCapacity Engine oil capacity in liters.
	FieldVehiclePowertrainCombustionEngineEngineOilCapacity = "Vehicle_Powertrain_CombustionEngine_EngineOilCapacity"
	// FieldVehiclePowertrainCombustionEngineEngineOilLevel Engine oil level.
	FieldVehiclePowertrainCombustionEngineEngineOilLevel = "Vehicle_Powertrain_CombustionEngine_EngineOilLevel"
	// FieldVehiclePowertrainCombustionEngineIdleHours Accumulated idling time during engine lifetime. Definition of idling is not standardized.
	FieldVehiclePowertrainCombustionEngineIdleHours = "Vehicle_Powertrain_CombustionEngine_IdleHours"
	// FieldVehiclePowertrainCombustionEngineIsRunning Engine Running. True if engine is rotating (Speed > 0).
	FieldVehiclePowertrainCombustionEngineIsRunning = "Vehicle_Powertrain_CombustionEngine_IsRunning"
	// FieldVehiclePowertrainCombustionEngineMAF Grams of air drawn into engine per second.
	FieldVehiclePowertrainCombustionEngineMAF = "Vehicle_Powertrain_CombustionEngine_MAF"
	// FieldVehiclePowertrainCombustionEngineMAP Manifold absolute pressure possibly boosted using forced induction.
	FieldVehiclePowertrainCombustionEngineMAP = "Vehicle_Powertrain_CombustionEngine_MAP"
	// FieldVehiclePowertrainCombustionEngineMaxPower Peak power, in kilowatts, that engine can generate.
	FieldVehiclePowertrainCombustionEngineMaxPower = "Vehicle_Powertrain_CombustionEngine_MaxPower"
	// FieldVehiclePowertrainCombustionEngineMaxTorque Peak torque, in newton meter, that the engine can generate.
	FieldVehiclePowertrainCombustionEngineMaxTorque = "Vehicle_Powertrain_CombustionEngine_MaxTorque"
	// FieldVehiclePowertrainCombustionEngineNumberOfCylinders Number of cylinders.
	FieldVehiclePowertrainCombustionEngineNumberOfCylinders = "Vehicle_Powertrain_CombustionEngine_NumberOfCylinders"
	// FieldVehiclePowertrainCombustionEngineNumberOfValvesPerCylinder Number of valves per cylinder.
	FieldVehiclePowertrainCombustionEngineNumberOfValvesPerCylinder = "Vehicle_Powertrain_CombustionEngine_NumberOfValvesPerCylinder"
	// FieldVehiclePowertrainCombustionEngineOilLifeRemaining Remaining engine oil life in seconds. Negative values can be used to indicate that lifetime has been exceeded.
	FieldVehiclePowertrainCombustionEngineOilLifeRemaining = "Vehicle_Powertrain_CombustionEngine_OilLifeRemaining"
	// FieldVehiclePowertrainCombustionEnginePower Current engine power output. Shall be reported as 0 during engine breaking.
	FieldVehiclePowertrainCombustionEnginePower = "Vehicle_Powertrain_CombustionEngine_Power"
	// FieldVehiclePowertrainCombustionEngineSpeed Engine speed measured as rotations per minute.
	FieldVehiclePowertrainCombustionEngineSpeed = "Vehicle_Powertrain_CombustionEngine_Speed"
	// FieldVehiclePowertrainCombustionEngineStrokeLength Stroke length in millimetres.
	FieldVehiclePowertrainCombustionEngineStrokeLength = "Vehicle_Powertrain_CombustionEngine_StrokeLength"
	// FieldVehiclePowertrainCombustionEngineTPS Current throttle position.
	FieldVehiclePowertrainCombustionEngineTPS = "Vehicle_Powertrain_CombustionEngine_TPS"
	// FieldVehiclePowertrainCombustionEngineTorque Current engine torque. Shall be reported as a negative number during engine breaking.
	FieldVehiclePowertrainCombustionEngineTorque = "Vehicle_Powertrain_CombustionEngine_Torque"
	// FieldVehiclePowertrainElectricMotor Electric Motor specific data.
	FieldVehiclePowertrainElectricMotor = "Vehicle_Powertrain_ElectricMotor"
	// FieldVehiclePowertrainElectricMotorCoolantTemperature Motor coolant temperature (if applicable).
	FieldVehiclePowertrainElectricMotorCoolantTemperature = "Vehicle_Powertrain_ElectricMotor_CoolantTemperature"
	// FieldVehiclePowertrainElectricMotorEngineCode Engine code designation, as specified by vehicle manufacturer.
	FieldVehiclePowertrainElectricMotorEngineCode = "Vehicle_Powertrain_ElectricMotor_EngineCode"
	// FieldVehiclePowertrainElectricMotorMaxPower Peak power, in kilowatts, that motor(s) can generate.
	FieldVehiclePowertrainElectricMotorMaxPower = "Vehicle_Powertrain_ElectricMotor_MaxPower"
	// FieldVehiclePowertrainElectricMotorMaxRegenPower Peak regen/brake power, in kilowatts, that motor(s) can generate.
	FieldVehiclePowertrainElectricMotorMaxRegenPower = "Vehicle_Powertrain_ElectricMotor_MaxRegenPower"
	// FieldVehiclePowertrainElectricMotorMaxRegenTorque Peak regen/brake torque, in newton meter, that the motor(s) can generate.
	FieldVehiclePowertrainElectricMotorMaxRegenTorque = "Vehicle_Powertrain_ElectricMotor_MaxRegenTorque"
	// FieldVehiclePowertrainElectricMotorMaxTorque Peak power, in newton meter, that the motor(s) can generate.
	FieldVehiclePowertrainElectricMotorMaxTorque = "Vehicle_Powertrain_ElectricMotor_MaxTorque"
	// FieldVehiclePowertrainElectricMotorPower Current motor power output. Negative values indicate regen mode.
	FieldVehiclePowertrainElectricMotorPower = "Vehicle_Powertrain_ElectricMotor_Power"
	// FieldVehiclePowertrainElectricMotorSpeed Motor rotational speed measured as rotations per minute. Negative values indicate reverse driving mode.
	FieldVehiclePowertrainElectricMotorSpeed = "Vehicle_Powertrain_ElectricMotor_Speed"
	// FieldVehiclePowertrainElectricMotorTemperature Motor temperature.
	FieldVehiclePowertrainElectricMotorTemperature = "Vehicle_Powertrain_ElectricMotor_Temperature"
	// FieldVehiclePowertrainElectricMotorTorque Current motor torque. Negative values indicate regen mode.
	FieldVehiclePowertrainElectricMotorTorque = "Vehicle_Powertrain_ElectricMotor_Torque"
	// FieldVehiclePowertrainFuelSystem Fuel system data.
	FieldVehiclePowertrainFuelSystem = "Vehicle_Powertrain_FuelSystem"
	// FieldVehiclePowertrainFuelSystemAbsoluteLevel Current available fuel in the fuel tank expressed in liters.
	FieldVehiclePowertrainFuelSystemAbsoluteLevel = "Vehicle_Powertrain_FuelSystem_AbsoluteLevel"
	// FieldVehiclePowertrainFuelSystemAverageConsumption Average consumption in liters per 100 km.
	FieldVehiclePowertrainFuelSystemAverageConsumption = "Vehicle_Powertrain_FuelSystem_AverageConsumption"
	// FieldVehiclePowertrainFuelSystemConsumptionSinceStart Fuel amount in liters consumed since start of current trip.
	FieldVehiclePowertrainFuelSystemConsumptionSinceStart = "Vehicle_Powertrain_FuelSystem_ConsumptionSinceStart"
	// FieldVehiclePowertrainFuelSystemHybridType Defines the hybrid type of the vehicle.
	FieldVehiclePowertrainFuelSystemHybridType = "Vehicle_Powertrain_FuelSystem_HybridType"
	// FieldVehiclePowertrainFuelSystemInstantConsumption Current consumption in liters per 100 km.
	FieldVehiclePowertrainFuelSystemInstantConsumption = "Vehicle_Powertrain_FuelSystem_InstantConsumption"
	// FieldVehiclePowertrainFuelSystemIsEngineStopStartEnabled Indicates whether eco start stop is currently enabled.
	FieldVehiclePowertrainFuelSystemIsEngineStopStartEnabled = "Vehicle_Powertrain_FuelSystem_IsEngineStopStartEnabled"
	// FieldVehiclePowertrainFuelSystemIsFuelLevelLow Indicates that the fuel level is low (e.g. <50km range).
	FieldVehiclePowertrainFuelSystemIsFuelLevelLow = "Vehicle_Powertrain_FuelSystem_IsFuelLevelLow"
	// FieldVehiclePowertrainFuelSystemIsFuelPortFlapOpen Status of the fuel port flap(s). True if at least one is open.
	FieldVehiclePowertrainFuelSystemIsFuelPortFlapOpen = "Vehicle_Powertrain_FuelSystem_IsFuelPortFlapOpen"
	// FieldVehiclePowertrainFuelSystemRange Remaining range in meters using only liquid fuel.
	FieldVehiclePowertrainFuelSystemRange = "Vehicle_Powertrain_FuelSystem_Range"
	// FieldVehiclePowertrainFuelSystemRefuelPortPosition Position of refuel port(s). First part indicates side of vehicle, second part relative position on that side.
	FieldVehiclePowertrainFuelSystemRefuelPortPosition = "Vehicle_Powertrain_FuelSystem_RefuelPortPosition"
	// FieldVehiclePowertrainFuelSystemRelativeLevel Level in fuel tank as percent of capacity. 0 = empty. 100 = full.
	FieldVehiclePowertrainFuelSystemRelativeLevel = "Vehicle_Powertrain_FuelSystem_RelativeLevel"
	// FieldVehiclePowertrainFuelSystemSupportedFuel Detailed information on fuels supported by the vehicle. Identifiers originating from DIN EN 16942:2021-08, appendix B, with additional suffix for octane (RON) where relevant.
	FieldVehiclePowertrainFuelSystemSupportedFuel = "Vehicle_Powertrain_FuelSystem_SupportedFuel"
	// FieldVehiclePowertrainFuelSystemSupportedFuelTypes High level information of fuel types supported
	FieldVehiclePowertrainFuelSystemSupportedFuelTypes = "Vehicle_Powertrain_FuelSystem_SupportedFuelTypes"
	// FieldVehiclePowertrainFuelSystemTankCapacity Capacity of the fuel tank in liters.
	FieldVehiclePowertrainFuelSystemTankCapacity = "Vehicle_Powertrain_FuelSystem_TankCapacity"
	// FieldVehiclePowertrainFuelSystemTimeRemaining Time remaining in seconds before the fuel tank is empty.
	FieldVehiclePowertrainFuelSystemTimeRemaining = "Vehicle_Powertrain_FuelSystem_TimeRemaining"
	// FieldVehiclePowertrainIsAutoPowerOptimize Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
	FieldVehiclePowertrainIsAutoPowerOptimize = "Vehicle_Powertrain_IsAutoPowerOptimize"
	// FieldVehiclePowertrainPowerOptimizeLevel Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
	FieldVehiclePowertrainPowerOptimizeLevel = "Vehicle_Powertrain_PowerOptimizeLevel"
	// FieldVehiclePowertrainRange Remaining range in meters using all energy sources available in the vehicle.
	FieldVehiclePowertrainRange = "Vehicle_Powertrain_Range"
	// FieldVehiclePowertrainTimeRemaining Time remaining in seconds before all energy sources available in the vehicle are empty.
	FieldVehiclePowertrainTimeRemaining = "Vehicle_Powertrain_TimeRemaining"
	// FieldVehiclePowertrainTractionBattery Battery Management data.
	FieldVehiclePowertrainTractionBattery = "Vehicle_Powertrain_TractionBattery"
	// FieldVehiclePowertrainTractionBatteryAccumulatedChargedEnergy The accumulated energy delivered to the battery during charging over lifetime of the battery.
	FieldVehiclePowertrainTractionBatteryAccumulatedChargedEnergy = "Vehicle_Powertrain_TractionBattery_AccumulatedChargedEnergy"
	// FieldVehiclePowertrainTractionBatteryAccumulatedChargedThroughput The accumulated charge throughput delivered to the battery during charging over lifetime of the battery.
	FieldVehiclePowertrainTractionBatteryAccumulatedChargedThroughput = "Vehicle_Powertrain_TractionBattery_AccumulatedChargedThroughput"
	// FieldVehiclePowertrainTractionBatteryAccumulatedConsumedEnergy The accumulated energy leaving HV battery for propulsion and auxiliary loads over lifetime of the battery.
	FieldVehiclePowertrainTractionBatteryAccumulatedConsumedEnergy = "Vehicle_Powertrain_TractionBattery_AccumulatedConsumedEnergy"
	// FieldVehiclePowertrainTractionBatteryAccumulatedConsumedThroughput The accumulated charge throughput leaving HV battery for propulsion and auxiliary loads over lifetime of the battery.
	FieldVehiclePowertrainTractionBatteryAccumulatedConsumedThroughput = "Vehicle_Powertrain_TractionBattery_AccumulatedConsumedThroughput"
	// FieldVehiclePowertrainTractionBatteryCellVoltage Voltage information for cells in the battery pack.
	FieldVehiclePowertrainTractionBatteryCellVoltage = "Vehicle_Powertrain_TractionBattery_CellVoltage"
	// FieldVehiclePowertrainTractionBatteryCellVoltageCellVoltages Array of cell voltages. Length or array shall correspond to number of cells in vehicle.
	FieldVehiclePowertrainTractionBatteryCellVoltageCellVoltages = "Vehicle_Powertrain_TractionBattery_CellVoltage_CellVoltages"
	// FieldVehiclePowertrainTractionBatteryCellVoltageIdMax Identifier of the battery cell with highest voltage.
	FieldVehiclePowertrainTractionBatteryCellVoltageIdMax = "Vehicle_Powertrain_TractionBattery_CellVoltage_IdMax"
	// FieldVehiclePowertrainTractionBatteryCellVoltageIdMin Identifier of the battery cell with lowest voltage.
	FieldVehiclePowertrainTractionBatteryCellVoltageIdMin = "Vehicle_Powertrain_TractionBattery_CellVoltage_IdMin"
	// FieldVehiclePowertrainTractionBatteryCellVoltageMax Current voltage of the battery cell with highest voltage.
	FieldVehiclePowertrainTractionBatteryCellVoltageMax = "Vehicle_Powertrain_TractionBattery_CellVoltage_Max"
	// FieldVehiclePowertrainTractionBatteryCellVoltageMin Current voltage of the battery cell with lowest voltage.
	FieldVehiclePowertrainTractionBatteryCellVoltageMin = "Vehicle_Powertrain_TractionBattery_CellVoltage_Min"
	// FieldVehiclePowertrainTractionBatteryCharging Properties related to battery charging.
	FieldVehiclePowertrainTractionBatteryCharging = "Vehicle_Powertrain_TractionBattery_Charging"
	// FieldVehiclePowertrainTractionBatteryChargingAveragePower Average charging power of last or current charging event.
	FieldVehiclePowertrainTractionBatteryChargingAveragePower = "Vehicle_Powertrain_TractionBattery_Charging_AveragePower"
	// FieldVehiclePowertrainTractionBatteryChargingChargeCurrent Current charging current.
	FieldVehiclePowertrainTractionBatteryChargingChargeCurrent = "Vehicle_Powertrain_TractionBattery_Charging_ChargeCurrent"
	// FieldVehiclePowertrainTractionBatteryChargingChargeCurrentDC Current DC charging current at inlet. Negative if returning energy to grid.
	FieldVehiclePowertrainTractionBatteryChargingChargeCurrentDC = "Vehicle_Powertrain_TractionBattery_Charging_ChargeCurrent_DC"
	// FieldVehiclePowertrainTractionBatteryChargingChargeCurrentPhase1 Current AC charging current (rms) at inlet for Phase 1. Negative if returning energy to grid.
	FieldVehiclePowertrainTractionBatteryChargingChargeCurrentPhase1 = "Vehicle_Powertrain_TractionBattery_Charging_ChargeCurrent_Phase1"
	// FieldVehiclePowertrainTractionBatteryChargingChargeCurrentPhase2 Current AC charging current (rms) at inlet for Phase 2. Negative if returning energy to grid.
	FieldVehiclePowertrainTractionBatteryChargingChargeCurrentPhase2 = "Vehicle_Powertrain_TractionBattery_Charging_ChargeCurrent_Phase2"
	// FieldVehiclePowertrainTractionBatteryChargingChargeCurrentPhase3 Current AC charging current (rms) at inlet for Phase 3. Negative if returning energy to grid.
	FieldVehiclePowertrainTractionBatteryChargingChargeCurrentPhase3 = "Vehicle_Powertrain_TractionBattery_Charging_ChargeCurrent_Phase3"
	// FieldVehiclePowertrainTractionBatteryChargingChargeLimit Target charge limit (state of charge) for battery.
	FieldVehiclePowertrainTractionBatteryChargingChargeLimit = "Vehicle_Powertrain_TractionBattery_Charging_ChargeLimit"
	// FieldVehiclePowertrainTractionBatteryChargingChargePlugType Type of charge plugs (charging inlet) available on the vehicle. A charge plug type may occur multiple times in the list if there are multiple instances of that charge plug type. IEC types refer to IEC 62196,  GBT refers to  GB/T 20234.
	FieldVehiclePowertrainTractionBatteryChargingChargePlugType = "Vehicle_Powertrain_TractionBattery_Charging_ChargePlugType"
	// FieldVehiclePowertrainTractionBatteryChargingChargePortFlap Status of the charge port cover(s), can potentially be controlled manually. OPEN if at least one is open.
	FieldVehiclePowertrainTractionBatteryChargingChargePortFlap = "Vehicle_Powertrain_TractionBattery_Charging_ChargePortFlap"
	// FieldVehiclePowertrainTractionBatteryChargingChargePortPosition Location of the charge port(s). First part indicates side of vehicle, second part relative position on that side. If supported, the list in this attribute shall have the same length as Charging.ChargePortType, and use same the relative order.
	FieldVehiclePowertrainTractionBatteryChargingChargePortPosition = "Vehicle_Powertrain_TractionBattery_Charging_ChargePortPosition"
	// FieldVehiclePowertrainTractionBatteryChargingChargePortType Type of charge ports (charging inlet) available on the vehicle. A charge port type may occur multiple times in the list if there are multiple instances of that charge port type. IEC types refer to IEC 62196,  GBT refers to  GB/T 20234.
	FieldVehiclePowertrainTractionBatteryChargingChargePortType = "Vehicle_Powertrain_TractionBattery_Charging_ChargePortType"
	// FieldVehiclePowertrainTractionBatteryChargingChargeRate Current charging rate, as in kilometers of range added per hour.
	FieldVehiclePowertrainTractionBatteryChargingChargeRate = "Vehicle_Powertrain_TractionBattery_Charging_ChargeRate"
	// FieldVehiclePowertrainTractionBatteryChargingChargeVoltage Current charging voltage, as measured at the charging inlet.
	FieldVehiclePowertrainTractionBatteryChargingChargeVoltage = "Vehicle_Powertrain_TractionBattery_Charging_ChargeVoltage"
	// FieldVehiclePowertrainTractionBatteryChargingChargeVoltageDC Current DC charging voltage at charging inlet.
	FieldVehiclePowertrainTractionBatteryChargingChargeVoltageDC = "Vehicle_Powertrain_TractionBattery_Charging_ChargeVoltage_DC"
	// FieldVehiclePowertrainTractionBatteryChargingChargeVoltagePhase1 Current AC charging voltage (rms) at inlet for Phase 1.
	FieldVehiclePowertrainTractionBatteryChargingChargeVoltagePhase1 = "Vehicle_Powertrain_TractionBattery_Charging_ChargeVoltage_Phase1"
	// FieldVehiclePowertrainTractionBatteryChargingChargeVoltagePhase2 Current AC charging voltage (rms) at inlet for Phase 2.
	FieldVehiclePowertrainTractionBatteryChargingChargeVoltagePhase2 = "Vehicle_Powertrain_TractionBattery_Charging_ChargeVoltage_Phase2"
	// FieldVehiclePowertrainTractionBatteryChargingChargeVoltagePhase3 Current AC charging voltage (rms) at inlet for Phase 3.
	FieldVehiclePowertrainTractionBatteryChargingChargeVoltagePhase3 = "Vehicle_Powertrain_TractionBattery_Charging_ChargeVoltage_Phase3"
	// FieldVehiclePowertrainTractionBatteryChargingEvseId EVSE charging point ID (without separators) of last or current charging event according to ISO 15118-2 Annex H.
	FieldVehiclePowertrainTractionBatteryChargingEvseId = "Vehicle_Powertrain_TractionBattery_Charging_EvseId"
	// FieldVehiclePowertrainTractionBatteryChargingIsChargePortFlapOpen Status of the charge port flap(s), can potentially be controlled manually. True if at least one is open.
	FieldVehiclePowertrainTractionBatteryChargingIsChargePortFlapOpen = "Vehicle_Powertrain_TractionBattery_Charging_IsChargePortFlapOpen"
	// FieldVehiclePowertrainTractionBatteryChargingIsCharging True if charging is ongoing. Charging is considered to be ongoing if energy is flowing from charger to vehicle.
	FieldVehiclePowertrainTractionBatteryChargingIsCharging = "Vehicle_Powertrain_TractionBattery_Charging_IsCharging"
	// FieldVehiclePowertrainTractionBatteryChargingIsChargingCableConnected Indicates if a charging cable is physically connected to the vehicle or not.
	FieldVehiclePowertrainTractionBatteryChargingIsChargingCableConnected = "Vehicle_Powertrain_TractionBattery_Charging_IsChargingCableConnected"
	// FieldVehiclePowertrainTractionBatteryChargingIsChargingCableLocked Is charging cable locked to prevent removal.
	FieldVehiclePowertrainTractionBatteryChargingIsChargingCableLocked = "Vehicle_Powertrain_TractionBattery_Charging_IsChargingCableLocked"
	// FieldVehiclePowertrainTractionBatteryChargingIsDischarging True if discharging (vehicle to grid) is ongoing. Discharging is considered to be ongoing if energy is flowing from vehicle to charger/grid.
	FieldVehiclePowertrainTractionBatteryChargingIsDischarging = "Vehicle_Powertrain_TractionBattery_Charging_IsDischarging"
	// FieldVehiclePowertrainTractionBatteryChargingLocation Location of last or current charging event.
	FieldVehiclePowertrainTractionBatteryChargingLocation = "Vehicle_Powertrain_TractionBattery_Charging_Location"
	// FieldVehiclePowertrainTractionBatteryChargingLocationAltitude Altitude relative to WGS 84 reference ellipsoid of last or current charging event.
	FieldVehiclePowertrainTractionBatteryChargingLocationAltitude = "Vehicle_Powertrain_TractionBattery_Charging_Location_Altitude"
	// FieldVehiclePowertrainTractionBatteryChargingLocationLatitude Latitude of last or current charging event in WGS 84 geodetic coordinates.
	FieldVehiclePowertrainTractionBatteryChargingLocationLatitude = "Vehicle_Powertrain_TractionBattery_Charging_Location_Latitude"
	// FieldVehiclePowertrainTractionBatteryChargingLocationLongitude Longitude of last or current charging event in WGS 84 geodetic coordinates.
	FieldVehiclePowertrainTractionBatteryChargingLocationLongitude = "Vehicle_Powertrain_TractionBattery_Charging_Location_Longitude"
	// FieldVehiclePowertrainTractionBatteryChargingMaxPower Maximum charging power of last or current charging event.
	FieldVehiclePowertrainTractionBatteryChargingMaxPower = "Vehicle_Powertrain_TractionBattery_Charging_MaxPower"
	// FieldVehiclePowertrainTractionBatteryChargingMaximumChargingCurrent Maximum charging current that can be accepted by the system, as measured at the charging inlet.
	FieldVehiclePowertrainTractionBatteryChargingMaximumChargingCurrent = "Vehicle_Powertrain_TractionBattery_Charging_MaximumChargingCurrent"
	// FieldVehiclePowertrainTractionBatteryChargingMaximumChargingCurrentDC Maximum DC charging current at inlet that can be accepted by the system.
	FieldVehiclePowertrainTractionBatteryChargingMaximumChargingCurrentDC = "Vehicle_Powertrain_TractionBattery_Charging_MaximumChargingCurrent_DC"
	// FieldVehiclePowertrainTractionBatteryChargingMaximumChargingCurrentPhase1 Maximum AC charging current (rms) at inlet for Phase 1 that can be accepted by the system.
	FieldVehiclePowertrainTractionBatteryChargingMaximumChargingCurrentPhase1 = "Vehicle_Powertrain_TractionBattery_Charging_MaximumChargingCurrent_Phase1"
	// FieldVehiclePowertrainTractionBatteryChargingMaximumChargingCurrentPhase2 Maximum AC charging current (rms) at inlet for Phase 2 that can be accepted by the system.
	FieldVehiclePowertrainTractionBatteryChargingMaximumChargingCurrentPhase2 = "Vehicle_Powertrain_TractionBattery_Charging_MaximumChargingCurrent_Phase2"
	// FieldVehiclePowertrainTractionBatteryChargingMaximumChargingCurrentPhase3 Maximum AC charging current (rms) at inlet for Phase 3 that can be accepted by the system.
	FieldVehiclePowertrainTractionBatteryChargingMaximumChargingCurrentPhase3 = "Vehicle_Powertrain_TractionBattery_Charging_MaximumChargingCurrent_Phase3"
	// FieldVehiclePowertrainTractionBatteryChargingMode Describes how the charging process is controlled. DEACTIVATED means that charging and discharging is deactivated, nothing will happen if charger is connected. AUTOMATIC means charging will be initiated as soon as charger is connected. TRIGGERED means charging will be initiated when triggered by user. TIMER means charging is timer-based. PROFILE means charging is controlled by profile downloaded to vehicle. EXTERNAL_ENTITY means charging/discharging is controlled by the external entity connected to the vehicle. This includes GRID-controlled charging (e.g. ISO 15118), but also other cases where vehicle is connected to an arbitrary load that is powered by the vehicle. MANUAL means manually initiated (plug-in event, companion app, etc). GRID means grid-controlled (e.g. ISO 15118).
	FieldVehiclePowertrainTractionBatteryChargingMode = "Vehicle_Powertrain_TractionBattery_Charging_Mode"
	// FieldVehiclePowertrainTractionBatteryChargingPowerLoss Electrical energy lost by power dissipation to heat inside the AC/DC converter.
	FieldVehiclePowertrainTractionBatteryChargingPowerLoss = "Vehicle_Powertrain_TractionBattery_Charging_PowerLoss"
	// FieldVehiclePowertrainTractionBatteryChargingStartStopCharging Start or stop the charging process.
	FieldVehiclePowertrainTractionBatteryChargingStartStopCharging = "Vehicle_Powertrain_TractionBattery_Charging_StartStopCharging"
	// FieldVehiclePowertrainTractionBatteryChargingTemperature Current temperature of AC/DC converter converting grid voltage to battery voltage.
	FieldVehiclePowertrainTractionBatteryChargingTemperature = "Vehicle_Powertrain_TractionBattery_Charging_Temperature"
	// FieldVehiclePowertrainTractionBatteryChargingTimeToComplete The time needed for the current charging process to reach Charging.ChargeLimit. 0 if charging is complete or no charging process is active or planned.
	FieldVehiclePowertrainTractionBatteryChargingTimeToComplete = "Vehicle_Powertrain_TractionBattery_Charging_TimeToComplete"
	// FieldVehiclePowertrainTractionBatteryChargingTimer Properties related to timing of battery charging sessions.
	FieldVehiclePowertrainTractionBatteryChargingTimer = "Vehicle_Powertrain_TractionBattery_Charging_Timer"
	// FieldVehiclePowertrainTractionBatteryChargingTimerMode Defines timer mode for charging: INACTIVE - no timer set, charging may start as soon as battery is connected to a charger. START_TIME - charging shall start at Charging.Timer.Time. END_TIME - charging shall be finished (reach Charging.ChargeLimit) at Charging.Timer.Time. When charging is completed the vehicle shall change mode to 'inactive' or set a new Charging.Timer.Time. Charging shall start immediately if mode is 'starttime' or 'endtime' and Charging.Timer.Time is a time in the past.
	FieldVehiclePowertrainTractionBatteryChargingTimerMode = "Vehicle_Powertrain_TractionBattery_Charging_Timer_Mode"
	// FieldVehiclePowertrainTractionBatteryChargingTimerTime Time for next charging-related action, formatted according to ISO 8601 with UTC time zone. Value has no significance if Charging.Timer.Mode is 'inactive'.
	FieldVehiclePowertrainTractionBatteryChargingTimerTime = "Vehicle_Powertrain_TractionBattery_Charging_Timer_Time"
	// FieldVehiclePowertrainTractionBatteryCurrentCurrent Current current flowing in/out of battery. Positive = Current flowing in to battery, e.g. during charging. Negative = Current flowing out of battery, e.g. during driving.
	FieldVehiclePowertrainTractionBatteryCurrentCurrent = "Vehicle_Powertrain_TractionBattery_CurrentCurrent"
	// FieldVehiclePowertrainTractionBatteryCurrentPower Current electrical energy flowing in/out of battery. Positive = Energy flowing in to battery, e.g. during charging. Negative = Energy flowing out of battery, e.g. during driving.
	FieldVehiclePowertrainTractionBatteryCurrentPower = "Vehicle_Powertrain_TractionBattery_CurrentPower"
	// FieldVehiclePowertrainTractionBatteryCurrentVoltage Current Voltage of the battery.
	FieldVehiclePowertrainTractionBatteryCurrentVoltage = "Vehicle_Powertrain_TractionBattery_CurrentVoltage"
	// FieldVehiclePowertrainTractionBatteryDCDC Properties related to DC/DC converter converting high voltage (from high voltage battery) to vehicle low voltage (supply voltage, typically 12 Volts).
	FieldVehiclePowertrainTractionBatteryDCDC = "Vehicle_Powertrain_TractionBattery_DCDC"
	// FieldVehiclePowertrainTractionBatteryDCDCPowerLoss Electrical energy lost by power dissipation to heat inside DC/DC converter.
	FieldVehiclePowertrainTractionBatteryDCDCPowerLoss = "Vehicle_Powertrain_TractionBattery_DCDC_PowerLoss"
	// FieldVehiclePowertrainTractionBatteryDCDCTemperature Current temperature of DC/DC converter converting battery high voltage to vehicle low voltage (typically 12 Volts).
	FieldVehiclePowertrainTractionBatteryDCDCTemperature = "Vehicle_Powertrain_TractionBattery_DCDC_Temperature"
	// FieldVehiclePowertrainTractionBatteryErrorCodes Current error codes related to the battery, if any.
	FieldVehiclePowertrainTractionBatteryErrorCodes = "Vehicle_Powertrain_TractionBattery_ErrorCodes"
	// FieldVehiclePowertrainTractionBatteryGrossCapacity Gross capacity of the battery.
	FieldVehiclePowertrainTractionBatteryGrossCapacity = "Vehicle_Powertrain_TractionBattery_GrossCapacity"
	// FieldVehiclePowertrainTractionBatteryId Battery Identification Number as assigned by OEM.
	FieldVehiclePowertrainTractionBatteryId = "Vehicle_Powertrain_TractionBattery_Id"
	// FieldVehiclePowertrainTractionBatteryIsGroundConnected Indicating if the ground (negative terminator) of the traction battery is connected to the powertrain.
	FieldVehiclePowertrainTractionBatteryIsGroundConnected = "Vehicle_Powertrain_TractionBattery_IsGroundConnected"
	// FieldVehiclePowertrainTractionBatteryIsPowerConnected Indicating if the power (positive terminator) of the traction battery is connected to the powertrain.
	FieldVehiclePowertrainTractionBatteryIsPowerConnected = "Vehicle_Powertrain_TractionBattery_IsPowerConnected"
	// FieldVehiclePowertrainTractionBatteryMaxVoltage Max allowed voltage of the battery, e.g. during charging.
	FieldVehiclePowertrainTractionBatteryMaxVoltage = "Vehicle_Powertrain_TractionBattery_MaxVoltage"
	// FieldVehiclePowertrainTractionBatteryNetCapacity Total net capacity of the battery considering aging.
	FieldVehiclePowertrainTractionBatteryNetCapacity = "Vehicle_Powertrain_TractionBattery_NetCapacity"
	// FieldVehiclePowertrainTractionBatteryNominalVoltage Nominal Voltage of the battery.
	FieldVehiclePowertrainTractionBatteryNominalVoltage = "Vehicle_Powertrain_TractionBattery_NominalVoltage"
	// FieldVehiclePowertrainTractionBatteryPowerLoss Electrical energy lost by power dissipation to heat inside the battery.
	FieldVehiclePowertrainTractionBatteryPowerLoss = "Vehicle_Powertrain_TractionBattery_PowerLoss"
	// FieldVehiclePowertrainTractionBatteryProductionDate Production date of battery in ISO8601 format, e.g. YYYY-MM-DD.
	FieldVehiclePowertrainTractionBatteryProductionDate = "Vehicle_Powertrain_TractionBattery_ProductionDate"
	// FieldVehiclePowertrainTractionBatteryRange Remaining range in meters using only battery.
	FieldVehiclePowertrainTractionBatteryRange = "Vehicle_Powertrain_TractionBattery_Range"
	// FieldVehiclePowertrainTractionBatteryStateOfCharge Information on the state of charge of the vehicle's high voltage battery.
	FieldVehiclePowertrainTractionBatteryStateOfCharge = "Vehicle_Powertrain_TractionBattery_StateOfCharge"
	// FieldVehiclePowertrainTractionBatteryStateOfChargeCurrent Physical state of charge of the high voltage battery, relative to net capacity. This is not necessarily the state of charge being displayed to the customer.
	FieldVehiclePowertrainTractionBatteryStateOfChargeCurrent = "Vehicle_Powertrain_TractionBattery_StateOfCharge_Current"
	// FieldVehiclePowertrainTractionBatteryStateOfChargeCurrentEnergy Physical state of charge of high voltage battery expressed in kWh.
	FieldVehiclePowertrainTractionBatteryStateOfChargeCurrentEnergy = "Vehicle_Powertrain_TractionBattery_StateOfCharge_CurrentEnergy"
	// FieldVehiclePowertrainTractionBatteryStateOfChargeDisplayed State of charge displayed to the customer.
	FieldVehiclePowertrainTractionBatteryStateOfChargeDisplayed = "Vehicle_Powertrain_TractionBattery_StateOfCharge_Displayed"
	// FieldVehiclePowertrainTractionBatteryStateOfHealth Calculated battery state of health at standard conditions.
	FieldVehiclePowertrainTractionBatteryStateOfHealth = "Vehicle_Powertrain_TractionBattery_StateOfHealth"
	// FieldVehiclePowertrainTractionBatteryTemperature Temperature Information for the battery pack.
	FieldVehiclePowertrainTractionBatteryTemperature = "Vehicle_Powertrain_TractionBattery_Temperature"
	// FieldVehiclePowertrainTractionBatteryTemperatureAverage Current average temperature of the battery cells.
	FieldVehiclePowertrainTractionBatteryTemperatureAverage = "Vehicle_Powertrain_TractionBattery_Temperature_Average"
	// FieldVehiclePowertrainTractionBatteryTemperatureCellTemperature Array of cell temperatures. Length or array shall correspond to number of cells in vehicle.
	FieldVehiclePowertrainTractionBatteryTemperatureCellTemperature = "Vehicle_Powertrain_TractionBattery_Temperature_CellTemperature"
	// FieldVehiclePowertrainTractionBatteryTemperatureMax Current maximum temperature of the battery cells, i.e. temperature of the hottest cell.
	FieldVehiclePowertrainTractionBatteryTemperatureMax = "Vehicle_Powertrain_TractionBattery_Temperature_Max"
	// FieldVehiclePowertrainTractionBatteryTemperatureMin Current minimum temperature of the battery cells, i.e. temperature of the coldest cell.
	FieldVehiclePowertrainTractionBatteryTemperatureMin = "Vehicle_Powertrain_TractionBattery_Temperature_Min"
	// FieldVehiclePowertrainTractionBatteryTimeRemaining Time remaining in seconds before the battery is empty.
	FieldVehiclePowertrainTractionBatteryTimeRemaining = "Vehicle_Powertrain_TractionBattery_TimeRemaining"
	// FieldVehiclePowertrainTransmission Transmission-specific data, stopping at the drive shafts.
	FieldVehiclePowertrainTransmission = "Vehicle_Powertrain_Transmission"
	// FieldVehiclePowertrainTransmissionClutchEngagement Clutch engagement. 0% = Clutch fully disengaged. 100% = Clutch fully engaged.
	FieldVehiclePowertrainTransmissionClutchEngagement = "Vehicle_Powertrain_Transmission_ClutchEngagement"
	// FieldVehiclePowertrainTransmissionClutchWear Clutch wear as a percent. 0 = no wear. 100 = worn.
	FieldVehiclePowertrainTransmissionClutchWear = "Vehicle_Powertrain_Transmission_ClutchWear"
	// FieldVehiclePowertrainTransmissionCurrentGear The current gear. 0=Neutral, 1/2/..=Forward, -1/-2/..=Reverse.
	FieldVehiclePowertrainTransmissionCurrentGear = "Vehicle_Powertrain_Transmission_CurrentGear"
	// FieldVehiclePowertrainTransmissionDiffLockFrontEngagement Front Diff Lock engagement. 0% = Diff lock fully disengaged. 100% = Diff lock fully engaged.
	FieldVehiclePowertrainTransmissionDiffLockFrontEngagement = "Vehicle_Powertrain_Transmission_DiffLockFrontEngagement"
	// FieldVehiclePowertrainTransmissionDiffLockRearEngagement Rear Diff Lock engagement. 0% = Diff lock fully disengaged. 100% = Diff lock fully engaged.
	FieldVehiclePowertrainTransmissionDiffLockRearEngagement = "Vehicle_Powertrain_Transmission_DiffLockRearEngagement"
	// FieldVehiclePowertrainTransmissionDriveType Drive type.
	FieldVehiclePowertrainTransmissionDriveType = "Vehicle_Powertrain_Transmission_DriveType"
	// FieldVehiclePowertrainTransmissionGearChangeMode Is the gearbox in automatic or manual (paddle) mode.
	FieldVehiclePowertrainTransmissionGearChangeMode = "Vehicle_Powertrain_Transmission_GearChangeMode"
	// FieldVehiclePowertrainTransmissionGearCount Number of forward gears in the transmission. -1 = CVT.
	FieldVehiclePowertrainTransmissionGearCount = "Vehicle_Powertrain_Transmission_GearCount"
	// FieldVehiclePowertrainTransmissionIsElectricalPowertrainEngaged Is electrical powertrain mechanically connected/engaged to the drivetrain or not. False = Disconnected/Disengaged. True = Connected/Engaged.
	FieldVehiclePowertrainTransmissionIsElectricalPowertrainEngaged = "Vehicle_Powertrain_Transmission_IsElectricalPowertrainEngaged"
	// FieldVehiclePowertrainTransmissionIsLowRangeEngaged Is gearbox in low range mode or not. False = Normal/High range engaged. True = Low range engaged.
	FieldVehiclePowertrainTransmissionIsLowRangeEngaged = "Vehicle_Powertrain_Transmission_IsLowRangeEngaged"
	// FieldVehiclePowertrainTransmissionIsParkLockEngaged Is the transmission park lock engaged or not. False = Disengaged. True = Engaged.
	FieldVehiclePowertrainTransmissionIsParkLockEngaged = "Vehicle_Powertrain_Transmission_IsParkLockEngaged"
	// FieldVehiclePowertrainTransmissionPerformanceMode Current gearbox performance mode.
	FieldVehiclePowertrainTransmissionPerformanceMode = "Vehicle_Powertrain_Transmission_PerformanceMode"
	// FieldVehiclePowertrainTransmissionSelectedGear The selected gear. 0=Neutral, 1/2/..=Forward, -1/-2/..=Reverse, 126=Park, 127=Drive.
	FieldVehiclePowertrainTransmissionSelectedGear = "Vehicle_Powertrain_Transmission_SelectedGear"
	// FieldVehiclePowertrainTransmissionTemperature The current gearbox temperature.
	FieldVehiclePowertrainTransmissionTemperature = "Vehicle_Powertrain_Transmission_Temperature"
	// FieldVehiclePowertrainTransmissionTorqueDistribution Torque distribution between front and rear axle in percent. -100% = Full torque to front axle, 0% = 50:50 Front/Rear, 100% = Full torque to rear axle.
	FieldVehiclePowertrainTransmissionTorqueDistribution = "Vehicle_Powertrain_Transmission_TorqueDistribution"
	// FieldVehiclePowertrainTransmissionTravelledDistance Odometer reading, total distance travelled during the lifetime of the transmission.
	FieldVehiclePowertrainTransmissionTravelledDistance = "Vehicle_Powertrain_Transmission_TravelledDistance"
	// FieldVehiclePowertrainTransmissionType Transmission type.
	FieldVehiclePowertrainTransmissionType = "Vehicle_Powertrain_Transmission_Type"
	// FieldVehiclePowertrainType Defines the powertrain type of the vehicle.
	FieldVehiclePowertrainType = "Vehicle_Powertrain_Type"
	// FieldVehicleRoofLoad The permitted total weight of cargo and installations (e.g. a roof rack) on top of the vehicle.
	FieldVehicleRoofLoad = "Vehicle_RoofLoad"
	// FieldVehicleService Service data.
	FieldVehicleService = "Vehicle_Service"
	// FieldVehicleServiceDistanceToService Remaining distance to service (of any kind). Negative values indicate service overdue.
	FieldVehicleServiceDistanceToService = "Vehicle_Service_DistanceToService"
	// FieldVehicleServiceIsServiceDue Indicates if vehicle needs service (of any kind). True = Service needed now or in the near future. False = No known need for service.
	FieldVehicleServiceIsServiceDue = "Vehicle_Service_IsServiceDue"
	// FieldVehicleServiceTimeToService Remaining time to service (of any kind). Negative values indicate service overdue.
	FieldVehicleServiceTimeToService = "Vehicle_Service_TimeToService"
	// FieldVehicleSpeed Vehicle speed.
	FieldVehicleSpeed = "Vehicle_Speed"
	// FieldVehicleStartTime Start time of current or latest trip, formatted according to ISO 8601 with UTC time zone.
	FieldVehicleStartTime = "Vehicle_StartTime"
	// FieldVehicleTrailer Trailer signals.
	FieldVehicleTrailer = "Vehicle_Trailer"
	// FieldVehicleTrailerIsConnected Signal indicating if trailer is connected or not.
	FieldVehicleTrailerIsConnected = "Vehicle_Trailer_IsConnected"
	// FieldVehicleTraveledDistance Odometer reading, total distance traveled during the lifetime of the vehicle.
	FieldVehicleTraveledDistance = "Vehicle_TraveledDistance"
	// FieldVehicleTraveledDistanceSinceStart Distance traveled since start of current trip.
	FieldVehicleTraveledDistanceSinceStart = "Vehicle_TraveledDistanceSinceStart"
	// FieldVehicleTripDuration Duration of latest trip.
	FieldVehicleTripDuration = "Vehicle_TripDuration"
	// FieldVehicleTripMeterReading Trip meter reading.
	FieldVehicleTripMeterReading = "Vehicle_TripMeterReading"
	// FieldVehicleTurningDiameter Minimum turning diameter, Wall-to-Wall, as defined by SAE J1100-2009 D102.
	FieldVehicleTurningDiameter = "Vehicle_TurningDiameter"
	// FieldVehicleVehicleIdentification Attributes that identify a vehicle.
	FieldVehicleVehicleIdentification = "Vehicle_VehicleIdentification"
	// FieldVehicleVehicleIdentificationAcrissCode The ACRISS Car Classification Code is a code used by many car rental companies.
	FieldVehicleVehicleIdentificationAcrissCode = "Vehicle_VehicleIdentification_AcrissCode"
	// FieldVehicleVehicleIdentificationBodyType Indicates the design and body style of the vehicle (e.g. station wagon, hatchback, etc.).
	FieldVehicleVehicleIdentificationBodyType = "Vehicle_VehicleIdentification_BodyType"
	// FieldVehicleVehicleIdentificationBrand Vehicle brand or manufacturer.
	FieldVehicleVehicleIdentificationBrand = "Vehicle_VehicleIdentification_Brand"
	// FieldVehicleVehicleIdentificationDateVehicleFirstRegistered The date in ISO 8601 format of the first registration of the vehicle with the respective public authorities.
	FieldVehicleVehicleIdentificationDateVehicleFirstRegistered = "Vehicle_VehicleIdentification_DateVehicleFirstRegistered"
	// FieldVehicleVehicleIdentificationKnownVehicleDamages A textual description of known damages, both repaired and unrepaired.
	FieldVehicleVehicleIdentificationKnownVehicleDamages = "Vehicle_VehicleIdentification_KnownVehicleDamages"
	// FieldVehicleVehicleIdentificationLicensePlate The license plate of the vehicle.
	FieldVehicleVehicleIdentificationLicensePlate = "Vehicle_VehicleIdentification_LicensePlate"
	// FieldVehicleVehicleIdentificationMeetsEmissionStandard Indicates that the vehicle meets the respective emission standard.
	FieldVehicleVehicleIdentificationMeetsEmissionStandard = "Vehicle_VehicleIdentification_MeetsEmissionStandard"
	// FieldVehicleVehicleIdentificationModel Vehicle model.
	FieldVehicleVehicleIdentificationModel = "Vehicle_VehicleIdentification_Model"
	// FieldVehicleVehicleIdentificationOptionalExtras Optional extras refers to all car equipment options that are not installed as standard by the manufacturer.
	FieldVehicleVehicleIdentificationOptionalExtras = "Vehicle_VehicleIdentification_OptionalExtras"
	// FieldVehicleVehicleIdentificationProductionDate The date in ISO 8601 format of production of the item, e.g. vehicle.
	FieldVehicleVehicleIdentificationProductionDate = "Vehicle_VehicleIdentification_ProductionDate"
	// FieldVehicleVehicleIdentificationPurchaseDate The date in ISO 8601 format of the item e.g. vehicle was purchased by the current owner.
	FieldVehicleVehicleIdentificationPurchaseDate = "Vehicle_VehicleIdentification_PurchaseDate"
	// FieldVehicleVehicleIdentificationVIN 17-character Vehicle Identification Number (VIN) as defined by ISO 3779.
	FieldVehicleVehicleIdentificationVIN = "Vehicle_VehicleIdentification_VIN"
	// FieldVehicleVehicleIdentificationVehicleConfiguration A short text indicating the configuration of the vehicle, e.g. '5dr hatchback ST 2.5 MT 225 hp' or 'limited edition'.
	FieldVehicleVehicleIdentificationVehicleConfiguration = "Vehicle_VehicleIdentification_VehicleConfiguration"
	// FieldVehicleVehicleIdentificationVehicleExteriorColor The main color of the exterior within the basic color palette (eg. red, blue, black, white, ...).
	FieldVehicleVehicleIdentificationVehicleExteriorColor = "Vehicle_VehicleIdentification_VehicleExteriorColor"
	// FieldVehicleVehicleIdentificationVehicleInteriorColor The color or color combination of the interior of the vehicle.
	FieldVehicleVehicleIdentificationVehicleInteriorColor = "Vehicle_VehicleIdentification_VehicleInteriorColor"
	// FieldVehicleVehicleIdentificationVehicleInteriorType The type or material of the interior of the vehicle (e.g. synthetic fabric, leather, wood, etc.).
	FieldVehicleVehicleIdentificationVehicleInteriorType = "Vehicle_VehicleIdentification_VehicleInteriorType"
	// FieldVehicleVehicleIdentificationVehicleModelDate The release date in ISO 8601 format of a vehicle model (often used to differentiate versions of the same make and model).
	FieldVehicleVehicleIdentificationVehicleModelDate = "Vehicle_VehicleIdentification_VehicleModelDate"
	// FieldVehicleVehicleIdentificationVehicleSeatingCapacity The number of passengers that can be seated in the vehicle, both in terms of the physical space available, and in terms of limitations set by law.
	FieldVehicleVehicleIdentificationVehicleSeatingCapacity = "Vehicle_VehicleIdentification_VehicleSeatingCapacity"
	// FieldVehicleVehicleIdentificationVehicleSpecialUsage Indicates whether the vehicle has been used for special purposes, like commercial rental, driving school.
	FieldVehicleVehicleIdentificationVehicleSpecialUsage = "Vehicle_VehicleIdentification_VehicleSpecialUsage"
	// FieldVehicleVehicleIdentificationWMI 3-character World Manufacturer Identification (WMI) as defined by ISO 3780.
	FieldVehicleVehicleIdentificationWMI = "Vehicle_VehicleIdentification_WMI"
	// FieldVehicleVehicleIdentificationYear Model year of the vehicle.
	FieldVehicleVehicleIdentificationYear = "Vehicle_VehicleIdentification_Year"
	// FieldVehicleVersionVSS Supported Version of VSS.
	FieldVehicleVersionVSS = "Vehicle_VersionVSS"
	// FieldVehicleVersionVSSLabel Label to further describe the version.
	FieldVehicleVersionVSSLabel = "Vehicle_VersionVSS_Label"
	// FieldVehicleVersionVSSMajor Supported Version of VSS - Major version.
	FieldVehicleVersionVSSMajor = "Vehicle_VersionVSS_Major"
	// FieldVehicleVersionVSSMinor Supported Version of VSS - Minor version.
	FieldVehicleVersionVSSMinor = "Vehicle_VersionVSS_Minor"
	// FieldVehicleVersionVSSPatch Supported Version of VSS - Patch version.
	FieldVehicleVersionVSSPatch = "Vehicle_VersionVSS_Patch"
	// FieldVehicleWidth Overall vehicle width.
	FieldVehicleWidth = "Vehicle_Width"
	// FieldVehicleWidthExcludingMirrors Overall vehicle width excluding mirrors, as defined by SAE J1100-2009 W103.
	FieldVehicleWidthExcludingMirrors = "Vehicle_WidthExcludingMirrors"
	// FieldVehicleWidthFoldedMirrors Overall vehicle width with mirrors folded, as defined by SAE J1100-2009 W145.
	FieldVehicleWidthFoldedMirrors = "Vehicle_WidthFoldedMirrors"
	// FieldVehicleWidthIncludingMirrors Overall vehicle width including mirrors, as defined by SAE J1100-2009 W144.
	FieldVehicleWidthIncludingMirrors = "Vehicle_WidthIncludingMirrors"
)

type Vehicle struct {   
	// VehicleADASABSIsEnabled Indicates if ABS is enabled. True = Enabled. False = Disabled.
	VehicleADASABSIsEnabled bool `ch:"Vehicle_ADAS_ABS_IsEnabled"`
	// VehicleADASABSIsEngaged Indicates if ABS is currently regulating brake pressure. True = Engaged. False = Not Engaged.
	VehicleADASABSIsEngaged bool `ch:"Vehicle_ADAS_ABS_IsEngaged"`
	// VehicleADASABSIsError Indicates if ABS incurred an error condition. True = Error. False = No Error.
	VehicleADASABSIsError bool `ch:"Vehicle_ADAS_ABS_IsError"`
	// VehicleADASActiveAutonomyLevel Indicates the currently active level of driving automation according to the SAE J3016 (Taxonomy and Definitions for Terms Related to Driving Automation Systems for On-Road Motor Vehicles).
	VehicleADASActiveAutonomyLevel string `ch:"Vehicle_ADAS_ActiveAutonomyLevel"` 
	// VehicleADASCruiseControlIsActive Indicates if cruise control system is active (i.e. actively controls speed). True = Active. False = Inactive.
	VehicleADASCruiseControlIsActive bool `ch:"Vehicle_ADAS_CruiseControl_IsActive"`
	// VehicleADASCruiseControlIsEnabled Indicates if cruise control system is enabled (e.g. ready to receive configurations and settings) True = Enabled. False = Disabled.
	VehicleADASCruiseControlIsEnabled bool `ch:"Vehicle_ADAS_CruiseControl_IsEnabled"`
	// VehicleADASCruiseControlIsError Indicates if cruise control system incurred an error condition. True = Error. False = No Error.
	VehicleADASCruiseControlIsError bool `ch:"Vehicle_ADAS_CruiseControl_IsError"`
	// VehicleADASCruiseControlSpeedSet Set cruise control speed in kilometers per hour.
	VehicleADASCruiseControlSpeedSet float32 `ch:"Vehicle_ADAS_CruiseControl_SpeedSet"` 
	// VehicleADASDMSIsEnabled Indicates if DMS is enabled. True = Enabled. False = Disabled.
	VehicleADASDMSIsEnabled bool `ch:"Vehicle_ADAS_DMS_IsEnabled"`
	// VehicleADASDMSIsError Indicates if DMS incurred an error condition. True = Error. False = No Error.
	VehicleADASDMSIsError bool `ch:"Vehicle_ADAS_DMS_IsError"`
	// VehicleADASDMSIsWarning Indicates if DMS has registered a driver alert condition.
	VehicleADASDMSIsWarning bool `ch:"Vehicle_ADAS_DMS_IsWarning"` 
	// VehicleADASEBAIsEnabled Indicates if EBA is enabled. True = Enabled. False = Disabled.
	VehicleADASEBAIsEnabled bool `ch:"Vehicle_ADAS_EBA_IsEnabled"`
	// VehicleADASEBAIsEngaged Indicates if EBA is currently regulating brake pressure. True = Engaged. False = Not Engaged.
	VehicleADASEBAIsEngaged bool `ch:"Vehicle_ADAS_EBA_IsEngaged"`
	// VehicleADASEBAIsError Indicates if EBA incurred an error condition. True = Error. False = No Error.
	VehicleADASEBAIsError bool `ch:"Vehicle_ADAS_EBA_IsError"` 
	// VehicleADASEBDIsEnabled Indicates if EBD is enabled. True = Enabled. False = Disabled.
	VehicleADASEBDIsEnabled bool `ch:"Vehicle_ADAS_EBD_IsEnabled"`
	// VehicleADASEBDIsEngaged Indicates if EBD is currently regulating vehicle brakeforce distribution. True = Engaged. False = Not Engaged.
	VehicleADASEBDIsEngaged bool `ch:"Vehicle_ADAS_EBD_IsEngaged"`
	// VehicleADASEBDIsError Indicates if EBD incurred an error condition. True = Error. False = No Error.
	VehicleADASEBDIsError bool `ch:"Vehicle_ADAS_EBD_IsError"` 
	// VehicleADASESCIsEnabled Indicates if ESC is enabled. True = Enabled. False = Disabled.
	VehicleADASESCIsEnabled bool `ch:"Vehicle_ADAS_ESC_IsEnabled"`
	// VehicleADASESCIsEngaged Indicates if ESC is currently regulating vehicle stability. True = Engaged. False = Not Engaged.
	VehicleADASESCIsEngaged bool `ch:"Vehicle_ADAS_ESC_IsEngaged"`
	// VehicleADASESCIsError Indicates if ESC incurred an error condition. True = Error. False = No Error.
	VehicleADASESCIsError bool `ch:"Vehicle_ADAS_ESC_IsError"`
	// VehicleADASESCIsStrongCrossWindDetected Indicates if the ESC system is detecting strong cross winds. True = Strong cross winds detected. False = No strong cross winds detected.
	VehicleADASESCIsStrongCrossWindDetected bool `ch:"Vehicle_ADAS_ESC_IsStrongCrossWindDetected"` 
	// VehicleADASESCRoadFrictionLowerBound Lower bound road friction, as calculated by the ESC system. 5% possibility that road friction is below this value. 0 = no friction, 100 = maximum friction.
	VehicleADASESCRoadFrictionLowerBound float32 `ch:"Vehicle_ADAS_ESC_RoadFriction_LowerBound"`
	// VehicleADASESCRoadFrictionMostProbable Most probable road friction, as calculated by the ESC system. Exact meaning of most probable is implementation specific. 0 = no friction, 100 = maximum friction.
	VehicleADASESCRoadFrictionMostProbable float32 `ch:"Vehicle_ADAS_ESC_RoadFriction_MostProbable"`
	// VehicleADASESCRoadFrictionUpperBound Upper bound road friction, as calculated by the ESC system. 95% possibility that road friction is below this value. 0 = no friction, 100 = maximum friction.
	VehicleADASESCRoadFrictionUpperBound float32 `ch:"Vehicle_ADAS_ESC_RoadFriction_UpperBound"`
	// VehicleADASIsAutoPowerOptimize Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
	VehicleADASIsAutoPowerOptimize bool `ch:"Vehicle_ADAS_IsAutoPowerOptimize"` 
	// VehicleADASLaneDepartureDetectionIsEnabled Indicates if lane departure detection system is enabled. True = Enabled. False = Disabled.
	VehicleADASLaneDepartureDetectionIsEnabled bool `ch:"Vehicle_ADAS_LaneDepartureDetection_IsEnabled"`
	// VehicleADASLaneDepartureDetectionIsError Indicates if lane departure system incurred an error condition. True = Error. False = No Error.
	VehicleADASLaneDepartureDetectionIsError bool `ch:"Vehicle_ADAS_LaneDepartureDetection_IsError"`
	// VehicleADASLaneDepartureDetectionIsWarning Indicates if lane departure detection registered a lane departure.
	VehicleADASLaneDepartureDetectionIsWarning bool `ch:"Vehicle_ADAS_LaneDepartureDetection_IsWarning"` 
	// VehicleADASObstacleDetectionIsEnabled Indicates if obstacle sensor system is enabled (i.e. monitoring for obstacles). True = Enabled. False = Disabled.
	VehicleADASObstacleDetectionIsEnabled bool `ch:"Vehicle_ADAS_ObstacleDetection_IsEnabled"`
	// VehicleADASObstacleDetectionIsError Indicates if obstacle sensor system incurred an error condition. True = Error. False = No Error.
	VehicleADASObstacleDetectionIsError bool `ch:"Vehicle_ADAS_ObstacleDetection_IsError"`
	// VehicleADASObstacleDetectionIsWarning Indicates if obstacle sensor system registered an obstacle.
	VehicleADASObstacleDetectionIsWarning bool `ch:"Vehicle_ADAS_ObstacleDetection_IsWarning"`
	// VehicleADASPowerOptimizeLevel Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
	VehicleADASPowerOptimizeLevel uint8 `ch:"Vehicle_ADAS_PowerOptimizeLevel"`
	// VehicleADASSupportedAutonomyLevel Indicates the highest level of driving automation according to the SAE J3016 taxonomy the vehicle is capable of.
	VehicleADASSupportedAutonomyLevel string `ch:"Vehicle_ADAS_SupportedAutonomyLevel"` 
	// VehicleADASTCSIsEnabled Indicates if TCS is enabled. True = Enabled. False = Disabled.
	VehicleADASTCSIsEnabled bool `ch:"Vehicle_ADAS_TCS_IsEnabled"`
	// VehicleADASTCSIsEngaged Indicates if TCS is currently regulating traction. True = Engaged. False = Not Engaged.
	VehicleADASTCSIsEngaged bool `ch:"Vehicle_ADAS_TCS_IsEngaged"`
	// VehicleADASTCSIsError Indicates if TCS incurred an error condition. True = Error. False = No Error.
	VehicleADASTCSIsError bool `ch:"Vehicle_ADAS_TCS_IsError"` 
	// VehicleAccelerationLateral Vehicle acceleration in Y (lateral acceleration).
	VehicleAccelerationLateral float32 `ch:"Vehicle_Acceleration_Lateral"`
	// VehicleAccelerationLongitudinal Vehicle acceleration in X (longitudinal acceleration).
	VehicleAccelerationLongitudinal float32 `ch:"Vehicle_Acceleration_Longitudinal"`
	// VehicleAccelerationVertical Vehicle acceleration in Z (vertical acceleration).
	VehicleAccelerationVertical float32 `ch:"Vehicle_Acceleration_Vertical"` 
	// VehicleAngularVelocityPitch Vehicle rotation rate along Y (lateral).
	VehicleAngularVelocityPitch float32 `ch:"Vehicle_AngularVelocity_Pitch"`
	// VehicleAngularVelocityRoll Vehicle rotation rate along X (longitudinal).
	VehicleAngularVelocityRoll float32 `ch:"Vehicle_AngularVelocity_Roll"`
	// VehicleAngularVelocityYaw Vehicle rotation rate along Z (vertical).
	VehicleAngularVelocityYaw float32 `ch:"Vehicle_AngularVelocity_Yaw"`
	// VehicleAverageSpeed Average speed for the current trip.
	VehicleAverageSpeed float32 `ch:"Vehicle_AverageSpeed"` 
	// VehicleBodyBodyType Body type code as defined by ISO 3779.
	VehicleBodyBodyType string `ch:"Vehicle_Body_BodyType"` 
	// VehicleBodyHoodIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	VehicleBodyHoodIsOpen bool `ch:"Vehicle_Body_Hood_IsOpen"`
	// VehicleBodyHoodPosition Item position. 0 = Start position 100 = End position.
	VehicleBodyHoodPosition uint8 `ch:"Vehicle_Body_Hood_Position"`
	// VehicleBodyHoodSwitch Switch controlling sliding action such as window, sunroof, or blind.
	VehicleBodyHoodSwitch string `ch:"Vehicle_Body_Hood_Switch"` 
	// VehicleBodyHornIsActive Horn active or inactive. True = Active. False = Inactive.
	VehicleBodyHornIsActive bool `ch:"Vehicle_Body_Horn_IsActive"`
	// VehicleBodyIsAutoPowerOptimize Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
	VehicleBodyIsAutoPowerOptimize bool `ch:"Vehicle_Body_IsAutoPowerOptimize"`  
	// VehicleBodyLightsBackupIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	VehicleBodyLightsBackupIsDefect bool `ch:"Vehicle_Body_Lights_Backup_IsDefect"`
	// VehicleBodyLightsBackupIsOn Indicates if light is on or off. True = On. False = Off.
	VehicleBodyLightsBackupIsOn bool `ch:"Vehicle_Body_Lights_Backup_IsOn"`  
	// VehicleBodyLightsBeamHighIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	VehicleBodyLightsBeamHighIsDefect bool `ch:"Vehicle_Body_Lights_Beam_High_IsDefect"`
	// VehicleBodyLightsBeamHighIsOn Indicates if light is on or off. True = On. False = Off.
	VehicleBodyLightsBeamHighIsOn bool `ch:"Vehicle_Body_Lights_Beam_High_IsOn"` 
	// VehicleBodyLightsBeamLowIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	VehicleBodyLightsBeamLowIsDefect bool `ch:"Vehicle_Body_Lights_Beam_Low_IsDefect"`
	// VehicleBodyLightsBeamLowIsOn Indicates if light is on or off. True = On. False = Off.
	VehicleBodyLightsBeamLowIsOn bool `ch:"Vehicle_Body_Lights_Beam_Low_IsOn"` 
	// VehicleBodyLightsBrakeIsActive Indicates if break-light is active. INACTIVE means lights are off. ACTIVE means lights are on. ADAPTIVE means that break-light is indicating emergency-breaking.
	VehicleBodyLightsBrakeIsActive string `ch:"Vehicle_Body_Lights_Brake_IsActive"`
	// VehicleBodyLightsBrakeIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	VehicleBodyLightsBrakeIsDefect bool `ch:"Vehicle_Body_Lights_Brake_IsDefect"`  
	// VehicleBodyLightsDirectionIndicatorLeftIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	VehicleBodyLightsDirectionIndicatorLeftIsDefect bool `ch:"Vehicle_Body_Lights_DirectionIndicator_Left_IsDefect"`
	// VehicleBodyLightsDirectionIndicatorLeftIsSignaling Indicates if light is signaling or off. True = signaling. False = Off.
	VehicleBodyLightsDirectionIndicatorLeftIsSignaling bool `ch:"Vehicle_Body_Lights_DirectionIndicator_Left_IsSignaling"` 
	// VehicleBodyLightsDirectionIndicatorRightIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	VehicleBodyLightsDirectionIndicatorRightIsDefect bool `ch:"Vehicle_Body_Lights_DirectionIndicator_Right_IsDefect"`
	// VehicleBodyLightsDirectionIndicatorRightIsSignaling Indicates if light is signaling or off. True = signaling. False = Off.
	VehicleBodyLightsDirectionIndicatorRightIsSignaling bool `ch:"Vehicle_Body_Lights_DirectionIndicator_Right_IsSignaling"`  
	// VehicleBodyLightsFogFrontIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	VehicleBodyLightsFogFrontIsDefect bool `ch:"Vehicle_Body_Lights_Fog_Front_IsDefect"`
	// VehicleBodyLightsFogFrontIsOn Indicates if light is on or off. True = On. False = Off.
	VehicleBodyLightsFogFrontIsOn bool `ch:"Vehicle_Body_Lights_Fog_Front_IsOn"` 
	// VehicleBodyLightsFogRearIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	VehicleBodyLightsFogRearIsDefect bool `ch:"Vehicle_Body_Lights_Fog_Rear_IsDefect"`
	// VehicleBodyLightsFogRearIsOn Indicates if light is on or off. True = On. False = Off.
	VehicleBodyLightsFogRearIsOn bool `ch:"Vehicle_Body_Lights_Fog_Rear_IsOn"` 
	// VehicleBodyLightsHazardIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	VehicleBodyLightsHazardIsDefect bool `ch:"Vehicle_Body_Lights_Hazard_IsDefect"`
	// VehicleBodyLightsHazardIsSignaling Indicates if light is signaling or off. True = signaling. False = Off.
	VehicleBodyLightsHazardIsSignaling bool `ch:"Vehicle_Body_Lights_Hazard_IsSignaling"`
	// VehicleBodyLightsIsHighBeamSwitchOn Status of the high beam switch. True = high beam enabled. False = high beam not enabled.
	VehicleBodyLightsIsHighBeamSwitchOn bool `ch:"Vehicle_Body_Lights_IsHighBeamSwitchOn"` 
	// VehicleBodyLightsLicensePlateIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	VehicleBodyLightsLicensePlateIsDefect bool `ch:"Vehicle_Body_Lights_LicensePlate_IsDefect"`
	// VehicleBodyLightsLicensePlateIsOn Indicates if light is on or off. True = On. False = Off.
	VehicleBodyLightsLicensePlateIsOn bool `ch:"Vehicle_Body_Lights_LicensePlate_IsOn"`
	// VehicleBodyLightsLightSwitch Status of the vehicle main light switch.
	VehicleBodyLightsLightSwitch string `ch:"Vehicle_Body_Lights_LightSwitch"` 
	// VehicleBodyLightsParkingIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	VehicleBodyLightsParkingIsDefect bool `ch:"Vehicle_Body_Lights_Parking_IsDefect"`
	// VehicleBodyLightsParkingIsOn Indicates if light is on or off. True = On. False = Off.
	VehicleBodyLightsParkingIsOn bool `ch:"Vehicle_Body_Lights_Parking_IsOn"` 
	// VehicleBodyLightsRunningIsDefect Indicates if light is defect. True = Light is defect. False = Light has no defect.
	VehicleBodyLightsRunningIsDefect bool `ch:"Vehicle_Body_Lights_Running_IsDefect"`
	// VehicleBodyLightsRunningIsOn Indicates if light is on or off. True = On. False = Off.
	VehicleBodyLightsRunningIsOn bool `ch:"Vehicle_Body_Lights_Running_IsOn"`  
	// VehicleBodyMirrorsDriverSideIsFolded Is mirror folded? True = Fully or partially folded. False = Fully unfolded.
	VehicleBodyMirrorsDriverSideIsFolded bool `ch:"Vehicle_Body_Mirrors_DriverSide_IsFolded"`
	// VehicleBodyMirrorsDriverSideIsHeatingOn Mirror Heater on or off. True = Heater On. False = Heater Off.
	VehicleBodyMirrorsDriverSideIsHeatingOn bool `ch:"Vehicle_Body_Mirrors_DriverSide_IsHeatingOn"`
	// VehicleBodyMirrorsDriverSideIsLocked Is mirror movement locked? True = Locked, mirror will not react to Tilt/Pan change. False = Unlocked.
	VehicleBodyMirrorsDriverSideIsLocked bool `ch:"Vehicle_Body_Mirrors_DriverSide_IsLocked"`
	// VehicleBodyMirrorsDriverSidePan Mirror pan as a percent. 0 = Center Position. 100 = Fully Left Position. -100 = Fully Right Position.
	VehicleBodyMirrorsDriverSidePan int8 `ch:"Vehicle_Body_Mirrors_DriverSide_Pan"`
	// VehicleBodyMirrorsDriverSideTilt Mirror tilt as a percent. 0 = Center Position. 100 = Fully Upward Position. -100 = Fully Downward Position.
	VehicleBodyMirrorsDriverSideTilt int8 `ch:"Vehicle_Body_Mirrors_DriverSide_Tilt"` 
	// VehicleBodyMirrorsPassengerSideIsFolded Is mirror folded? True = Fully or partially folded. False = Fully unfolded.
	VehicleBodyMirrorsPassengerSideIsFolded bool `ch:"Vehicle_Body_Mirrors_PassengerSide_IsFolded"`
	// VehicleBodyMirrorsPassengerSideIsHeatingOn Mirror Heater on or off. True = Heater On. False = Heater Off.
	VehicleBodyMirrorsPassengerSideIsHeatingOn bool `ch:"Vehicle_Body_Mirrors_PassengerSide_IsHeatingOn"`
	// VehicleBodyMirrorsPassengerSideIsLocked Is mirror movement locked? True = Locked, mirror will not react to Tilt/Pan change. False = Unlocked.
	VehicleBodyMirrorsPassengerSideIsLocked bool `ch:"Vehicle_Body_Mirrors_PassengerSide_IsLocked"`
	// VehicleBodyMirrorsPassengerSidePan Mirror pan as a percent. 0 = Center Position. 100 = Fully Left Position. -100 = Fully Right Position.
	VehicleBodyMirrorsPassengerSidePan int8 `ch:"Vehicle_Body_Mirrors_PassengerSide_Pan"`
	// VehicleBodyMirrorsPassengerSideTilt Mirror tilt as a percent. 0 = Center Position. 100 = Fully Upward Position. -100 = Fully Downward Position.
	VehicleBodyMirrorsPassengerSideTilt int8 `ch:"Vehicle_Body_Mirrors_PassengerSide_Tilt"`
	// VehicleBodyPowerOptimizeLevel Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
	VehicleBodyPowerOptimizeLevel uint8 `ch:"Vehicle_Body_PowerOptimizeLevel"` 
	// VehicleBodyRaindetectionIntensity Rain intensity. 0 = Dry, No Rain. 100 = Covered.
	VehicleBodyRaindetectionIntensity uint8 `ch:"Vehicle_Body_Raindetection_Intensity"`
	// VehicleBodyRearMainSpoilerPosition Rear spoiler position, 0% = Spoiler fully stowed. 100% = Spoiler fully exposed.
	VehicleBodyRearMainSpoilerPosition float32 `ch:"Vehicle_Body_RearMainSpoilerPosition"`
	// VehicleBodyRefuelPosition Location of the fuel cap or charge port.
	VehicleBodyRefuelPosition string `ch:"Vehicle_Body_RefuelPosition"`  
	// VehicleBodyTrunkFrontIsLightOn Is trunk light on
	VehicleBodyTrunkFrontIsLightOn bool `ch:"Vehicle_Body_Trunk_Front_IsLightOn"`
	// VehicleBodyTrunkFrontIsLocked Is item locked or unlocked. True = Locked. False = Unlocked.
	VehicleBodyTrunkFrontIsLocked bool `ch:"Vehicle_Body_Trunk_Front_IsLocked"`
	// VehicleBodyTrunkFrontIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	VehicleBodyTrunkFrontIsOpen bool `ch:"Vehicle_Body_Trunk_Front_IsOpen"`
	// VehicleBodyTrunkFrontPosition Item position. 0 = Start position 100 = End position.
	VehicleBodyTrunkFrontPosition uint8 `ch:"Vehicle_Body_Trunk_Front_Position"`
	// VehicleBodyTrunkFrontSwitch Switch controlling sliding action such as window, sunroof, or blind.
	VehicleBodyTrunkFrontSwitch string `ch:"Vehicle_Body_Trunk_Front_Switch"` 
	// VehicleBodyTrunkRearIsLightOn Is trunk light on
	VehicleBodyTrunkRearIsLightOn bool `ch:"Vehicle_Body_Trunk_Rear_IsLightOn"`
	// VehicleBodyTrunkRearIsLocked Is item locked or unlocked. True = Locked. False = Unlocked.
	VehicleBodyTrunkRearIsLocked bool `ch:"Vehicle_Body_Trunk_Rear_IsLocked"`
	// VehicleBodyTrunkRearIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	VehicleBodyTrunkRearIsOpen bool `ch:"Vehicle_Body_Trunk_Rear_IsOpen"`
	// VehicleBodyTrunkRearPosition Item position. 0 = Start position 100 = End position.
	VehicleBodyTrunkRearPosition uint8 `ch:"Vehicle_Body_Trunk_Rear_Position"`
	// VehicleBodyTrunkRearSwitch Switch controlling sliding action such as window, sunroof, or blind.
	VehicleBodyTrunkRearSwitch string `ch:"Vehicle_Body_Trunk_Rear_Switch"`  
	// VehicleBodyWindshieldFrontIsHeatingOn Windshield heater status. False - off, True - on.
	VehicleBodyWindshieldFrontIsHeatingOn bool `ch:"Vehicle_Body_Windshield_Front_IsHeatingOn"` 
	// VehicleBodyWindshieldFrontWasherFluidIsLevelLow Low level indication for washer fluid. True = Level Low. False = Level OK.
	VehicleBodyWindshieldFrontWasherFluidIsLevelLow bool `ch:"Vehicle_Body_Windshield_Front_WasherFluid_IsLevelLow"`
	// VehicleBodyWindshieldFrontWasherFluidLevel Washer fluid level as a percent. 0 = Empty. 100 = Full.
	VehicleBodyWindshieldFrontWasherFluidLevel uint8 `ch:"Vehicle_Body_Windshield_Front_WasherFluid_Level"` 
	// VehicleBodyWindshieldFrontWipingIntensity Relative intensity/sensitivity for interval and rain sensor mode as requested by user/driver. Has no significance if Windshield.Wiping.Mode is OFF/SLOW/MEDIUM/FAST 0 - wipers inactive. 1 - minimum intensity (lowest frequency/sensitivity, longest interval). 2/3/4/... - higher intensity (higher frequency/sensitivity, shorter interval). Maximum value supported is vehicle specific.
	VehicleBodyWindshieldFrontWipingIntensity uint8 `ch:"Vehicle_Body_Windshield_Front_Wiping_Intensity"`
	// VehicleBodyWindshieldFrontWipingIsWipersWorn Wiper wear status. True = Worn, Replacement recommended or required. False = Not Worn.
	VehicleBodyWindshieldFrontWipingIsWipersWorn bool `ch:"Vehicle_Body_Windshield_Front_Wiping_IsWipersWorn"`
	// VehicleBodyWindshieldFrontWipingMode Wiper mode requested by user/driver. INTERVAL indicates intermittent wiping, with fixed time interval between each wipe. RAIN_SENSOR indicates intermittent wiping based on rain intensity.
	VehicleBodyWindshieldFrontWipingMode string `ch:"Vehicle_Body_Windshield_Front_Wiping_Mode"` 
	// VehicleBodyWindshieldFrontWipingSystemActualPosition Actual position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific.
	VehicleBodyWindshieldFrontWipingSystemActualPosition float32 `ch:"Vehicle_Body_Windshield_Front_Wiping_System_ActualPosition"`
	// VehicleBodyWindshieldFrontWipingSystemDriveCurrent Actual current used by wiper drive.
	VehicleBodyWindshieldFrontWipingSystemDriveCurrent float32 `ch:"Vehicle_Body_Windshield_Front_Wiping_System_DriveCurrent"`
	// VehicleBodyWindshieldFrontWipingSystemFrequency Wiping frequency/speed, measured in cycles per minute. The signal concerns the actual speed of the wiper blades when moving. Intervals/pauses are excluded, i.e. the value corresponds to the number of cycles that would be completed in 1 minute if wiping permanently over default range.
	VehicleBodyWindshieldFrontWipingSystemFrequency uint8 `ch:"Vehicle_Body_Windshield_Front_Wiping_System_Frequency"`
	// VehicleBodyWindshieldFrontWipingSystemIsBlocked Indicates if wiper movement is blocked. True = Movement blocked. False = Movement not blocked.
	VehicleBodyWindshieldFrontWipingSystemIsBlocked bool `ch:"Vehicle_Body_Windshield_Front_Wiping_System_IsBlocked"`
	// VehicleBodyWindshieldFrontWipingSystemIsEndingWipeCycle Indicates if current wipe movement is completed or near completion. True = Movement is completed or near completion. Changes to RequestedPosition will be executed first after reaching previous RequestedPosition, if it has not already been reached. False = Movement is not near completion. Any change to RequestedPosition will be executed immediately. Change of direction may not be allowed.
	VehicleBodyWindshieldFrontWipingSystemIsEndingWipeCycle bool `ch:"Vehicle_Body_Windshield_Front_Wiping_System_IsEndingWipeCycle"`
	// VehicleBodyWindshieldFrontWipingSystemIsOverheated Indicates if wiper system is overheated. True = Wiper system overheated. False = Wiper system not overheated.
	VehicleBodyWindshieldFrontWipingSystemIsOverheated bool `ch:"Vehicle_Body_Windshield_Front_Wiping_System_IsOverheated"`
	// VehicleBodyWindshieldFrontWipingSystemIsPositionReached Indicates if a requested position has been reached. IsPositionReached refers to the previous position in case the TargetPosition is updated while IsEndingWipeCycle=True. True = Current or Previous TargetPosition reached. False = Position not (yet) reached, or wipers have moved away from the reached position.
	VehicleBodyWindshieldFrontWipingSystemIsPositionReached bool `ch:"Vehicle_Body_Windshield_Front_Wiping_System_IsPositionReached"`
	// VehicleBodyWindshieldFrontWipingSystemIsWiperError Indicates system failure. True if wiping is disabled due to system failure.
	VehicleBodyWindshieldFrontWipingSystemIsWiperError bool `ch:"Vehicle_Body_Windshield_Front_Wiping_System_IsWiperError"`
	// VehicleBodyWindshieldFrontWipingSystemIsWiping Indicates wiper movement. True if wiper blades are moving. Change of direction shall be considered as IsWiping if wipers will continue to move directly after the change of direction.
	VehicleBodyWindshieldFrontWipingSystemIsWiping bool `ch:"Vehicle_Body_Windshield_Front_Wiping_System_IsWiping"`
	// VehicleBodyWindshieldFrontWipingSystemMode Requested mode of wiper system. STOP_HOLD means that the wipers shall move to position given by TargetPosition and then hold the position. WIPE means that wipers shall move to the position given by TargetPosition and then hold the position if no new TargetPosition is requested. PLANT_MODE means that wiping is disabled. Exact behavior is vehicle specific. EMERGENCY_STOP means that wiping shall be immediately stopped without holding the position.
	VehicleBodyWindshieldFrontWipingSystemMode string `ch:"Vehicle_Body_Windshield_Front_Wiping_System_Mode"`
	// VehicleBodyWindshieldFrontWipingSystemTargetPosition Requested position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific. System behavior when receiving TargetPosition depends on Mode and IsEndingWipeCycle. Supported values are vehicle specific and might be dynamically corrected. If IsEndingWipeCycle=True then wipers will complete current movement before actuating new TargetPosition. If IsEndingWipeCycle=False then wipers will directly change destination if the TargetPosition is changed.
	VehicleBodyWindshieldFrontWipingSystemTargetPosition float32 `ch:"Vehicle_Body_Windshield_Front_Wiping_System_TargetPosition"`
	// VehicleBodyWindshieldFrontWipingWiperWear Wiper wear as percent. 0 = No Wear. 100 = Worn. Replacement required. Method for calculating or estimating wiper wear is vehicle specific. For windshields with multiple wipers the wear reported shall correspond to the most worn wiper.
	VehicleBodyWindshieldFrontWipingWiperWear uint8 `ch:"Vehicle_Body_Windshield_Front_Wiping_WiperWear"` 
	// VehicleBodyWindshieldRearIsHeatingOn Windshield heater status. False - off, True - on.
	VehicleBodyWindshieldRearIsHeatingOn bool `ch:"Vehicle_Body_Windshield_Rear_IsHeatingOn"` 
	// VehicleBodyWindshieldRearWasherFluidIsLevelLow Low level indication for washer fluid. True = Level Low. False = Level OK.
	VehicleBodyWindshieldRearWasherFluidIsLevelLow bool `ch:"Vehicle_Body_Windshield_Rear_WasherFluid_IsLevelLow"`
	// VehicleBodyWindshieldRearWasherFluidLevel Washer fluid level as a percent. 0 = Empty. 100 = Full.
	VehicleBodyWindshieldRearWasherFluidLevel uint8 `ch:"Vehicle_Body_Windshield_Rear_WasherFluid_Level"` 
	// VehicleBodyWindshieldRearWipingIntensity Relative intensity/sensitivity for interval and rain sensor mode as requested by user/driver. Has no significance if Windshield.Wiping.Mode is OFF/SLOW/MEDIUM/FAST 0 - wipers inactive. 1 - minimum intensity (lowest frequency/sensitivity, longest interval). 2/3/4/... - higher intensity (higher frequency/sensitivity, shorter interval). Maximum value supported is vehicle specific.
	VehicleBodyWindshieldRearWipingIntensity uint8 `ch:"Vehicle_Body_Windshield_Rear_Wiping_Intensity"`
	// VehicleBodyWindshieldRearWipingIsWipersWorn Wiper wear status. True = Worn, Replacement recommended or required. False = Not Worn.
	VehicleBodyWindshieldRearWipingIsWipersWorn bool `ch:"Vehicle_Body_Windshield_Rear_Wiping_IsWipersWorn"`
	// VehicleBodyWindshieldRearWipingMode Wiper mode requested by user/driver. INTERVAL indicates intermittent wiping, with fixed time interval between each wipe. RAIN_SENSOR indicates intermittent wiping based on rain intensity.
	VehicleBodyWindshieldRearWipingMode string `ch:"Vehicle_Body_Windshield_Rear_Wiping_Mode"` 
	// VehicleBodyWindshieldRearWipingSystemActualPosition Actual position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific.
	VehicleBodyWindshieldRearWipingSystemActualPosition float32 `ch:"Vehicle_Body_Windshield_Rear_Wiping_System_ActualPosition"`
	// VehicleBodyWindshieldRearWipingSystemDriveCurrent Actual current used by wiper drive.
	VehicleBodyWindshieldRearWipingSystemDriveCurrent float32 `ch:"Vehicle_Body_Windshield_Rear_Wiping_System_DriveCurrent"`
	// VehicleBodyWindshieldRearWipingSystemFrequency Wiping frequency/speed, measured in cycles per minute. The signal concerns the actual speed of the wiper blades when moving. Intervals/pauses are excluded, i.e. the value corresponds to the number of cycles that would be completed in 1 minute if wiping permanently over default range.
	VehicleBodyWindshieldRearWipingSystemFrequency uint8 `ch:"Vehicle_Body_Windshield_Rear_Wiping_System_Frequency"`
	// VehicleBodyWindshieldRearWipingSystemIsBlocked Indicates if wiper movement is blocked. True = Movement blocked. False = Movement not blocked.
	VehicleBodyWindshieldRearWipingSystemIsBlocked bool `ch:"Vehicle_Body_Windshield_Rear_Wiping_System_IsBlocked"`
	// VehicleBodyWindshieldRearWipingSystemIsEndingWipeCycle Indicates if current wipe movement is completed or near completion. True = Movement is completed or near completion. Changes to RequestedPosition will be executed first after reaching previous RequestedPosition, if it has not already been reached. False = Movement is not near completion. Any change to RequestedPosition will be executed immediately. Change of direction may not be allowed.
	VehicleBodyWindshieldRearWipingSystemIsEndingWipeCycle bool `ch:"Vehicle_Body_Windshield_Rear_Wiping_System_IsEndingWipeCycle"`
	// VehicleBodyWindshieldRearWipingSystemIsOverheated Indicates if wiper system is overheated. True = Wiper system overheated. False = Wiper system not overheated.
	VehicleBodyWindshieldRearWipingSystemIsOverheated bool `ch:"Vehicle_Body_Windshield_Rear_Wiping_System_IsOverheated"`
	// VehicleBodyWindshieldRearWipingSystemIsPositionReached Indicates if a requested position has been reached. IsPositionReached refers to the previous position in case the TargetPosition is updated while IsEndingWipeCycle=True. True = Current or Previous TargetPosition reached. False = Position not (yet) reached, or wipers have moved away from the reached position.
	VehicleBodyWindshieldRearWipingSystemIsPositionReached bool `ch:"Vehicle_Body_Windshield_Rear_Wiping_System_IsPositionReached"`
	// VehicleBodyWindshieldRearWipingSystemIsWiperError Indicates system failure. True if wiping is disabled due to system failure.
	VehicleBodyWindshieldRearWipingSystemIsWiperError bool `ch:"Vehicle_Body_Windshield_Rear_Wiping_System_IsWiperError"`
	// VehicleBodyWindshieldRearWipingSystemIsWiping Indicates wiper movement. True if wiper blades are moving. Change of direction shall be considered as IsWiping if wipers will continue to move directly after the change of direction.
	VehicleBodyWindshieldRearWipingSystemIsWiping bool `ch:"Vehicle_Body_Windshield_Rear_Wiping_System_IsWiping"`
	// VehicleBodyWindshieldRearWipingSystemMode Requested mode of wiper system. STOP_HOLD means that the wipers shall move to position given by TargetPosition and then hold the position. WIPE means that wipers shall move to the position given by TargetPosition and then hold the position if no new TargetPosition is requested. PLANT_MODE means that wiping is disabled. Exact behavior is vehicle specific. EMERGENCY_STOP means that wiping shall be immediately stopped without holding the position.
	VehicleBodyWindshieldRearWipingSystemMode string `ch:"Vehicle_Body_Windshield_Rear_Wiping_System_Mode"`
	// VehicleBodyWindshieldRearWipingSystemTargetPosition Requested position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific. System behavior when receiving TargetPosition depends on Mode and IsEndingWipeCycle. Supported values are vehicle specific and might be dynamically corrected. If IsEndingWipeCycle=True then wipers will complete current movement before actuating new TargetPosition. If IsEndingWipeCycle=False then wipers will directly change destination if the TargetPosition is changed.
	VehicleBodyWindshieldRearWipingSystemTargetPosition float32 `ch:"Vehicle_Body_Windshield_Rear_Wiping_System_TargetPosition"`
	// VehicleBodyWindshieldRearWipingWiperWear Wiper wear as percent. 0 = No Wear. 100 = Worn. Replacement required. Method for calculating or estimating wiper wear is vehicle specific. For windshields with multiple wipers the wear reported shall correspond to the most worn wiper.
	VehicleBodyWindshieldRearWipingWiperWear uint8 `ch:"Vehicle_Body_Windshield_Rear_Wiping_WiperWear"`  
	// VehicleCabinConvertibleStatus Roof status on convertible vehicles.
	VehicleCabinConvertibleStatus string `ch:"Vehicle_Cabin_Convertible_Status"`   
	// VehicleCabinDoorRow1DriverSideIsChildLockActive Is door child lock active. True = Door cannot be opened from inside. False = Door can be opened from inside.
	VehicleCabinDoorRow1DriverSideIsChildLockActive bool `ch:"Vehicle_Cabin_Door_Row1_DriverSide_IsChildLockActive"`
	// VehicleCabinDoorRow1DriverSideIsLocked Is item locked or unlocked. True = Locked. False = Unlocked.
	VehicleCabinDoorRow1DriverSideIsLocked bool `ch:"Vehicle_Cabin_Door_Row1_DriverSide_IsLocked"`
	// VehicleCabinDoorRow1DriverSideIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	VehicleCabinDoorRow1DriverSideIsOpen bool `ch:"Vehicle_Cabin_Door_Row1_DriverSide_IsOpen"`
	// VehicleCabinDoorRow1DriverSidePosition Item position. 0 = Start position 100 = End position.
	VehicleCabinDoorRow1DriverSidePosition uint8 `ch:"Vehicle_Cabin_Door_Row1_DriverSide_Position"` 
	// VehicleCabinDoorRow1DriverSideShadeIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	VehicleCabinDoorRow1DriverSideShadeIsOpen bool `ch:"Vehicle_Cabin_Door_Row1_DriverSide_Shade_IsOpen"`
	// VehicleCabinDoorRow1DriverSideShadePosition Item position. 0 = Start position 100 = End position.
	VehicleCabinDoorRow1DriverSideShadePosition uint8 `ch:"Vehicle_Cabin_Door_Row1_DriverSide_Shade_Position"`
	// VehicleCabinDoorRow1DriverSideShadeSwitch Switch controlling sliding action such as window, sunroof, or blind.
	VehicleCabinDoorRow1DriverSideShadeSwitch string `ch:"Vehicle_Cabin_Door_Row1_DriverSide_Shade_Switch"`
	// VehicleCabinDoorRow1DriverSideSwitch Switch controlling sliding action such as window, sunroof, or blind.
	VehicleCabinDoorRow1DriverSideSwitch string `ch:"Vehicle_Cabin_Door_Row1_DriverSide_Switch"` 
	// VehicleCabinDoorRow1DriverSideWindowIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	VehicleCabinDoorRow1DriverSideWindowIsOpen bool `ch:"Vehicle_Cabin_Door_Row1_DriverSide_Window_IsOpen"`
	// VehicleCabinDoorRow1DriverSideWindowPosition Item position. 0 = Start position 100 = End position.
	VehicleCabinDoorRow1DriverSideWindowPosition uint8 `ch:"Vehicle_Cabin_Door_Row1_DriverSide_Window_Position"`
	// VehicleCabinDoorRow1DriverSideWindowSwitch Switch controlling sliding action such as window, sunroof, or blind.
	VehicleCabinDoorRow1DriverSideWindowSwitch string `ch:"Vehicle_Cabin_Door_Row1_DriverSide_Window_Switch"` 
	// VehicleCabinDoorRow1PassengerSideIsChildLockActive Is door child lock active. True = Door cannot be opened from inside. False = Door can be opened from inside.
	VehicleCabinDoorRow1PassengerSideIsChildLockActive bool `ch:"Vehicle_Cabin_Door_Row1_PassengerSide_IsChildLockActive"`
	// VehicleCabinDoorRow1PassengerSideIsLocked Is item locked or unlocked. True = Locked. False = Unlocked.
	VehicleCabinDoorRow1PassengerSideIsLocked bool `ch:"Vehicle_Cabin_Door_Row1_PassengerSide_IsLocked"`
	// VehicleCabinDoorRow1PassengerSideIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	VehicleCabinDoorRow1PassengerSideIsOpen bool `ch:"Vehicle_Cabin_Door_Row1_PassengerSide_IsOpen"`
	// VehicleCabinDoorRow1PassengerSidePosition Item position. 0 = Start position 100 = End position.
	VehicleCabinDoorRow1PassengerSidePosition uint8 `ch:"Vehicle_Cabin_Door_Row1_PassengerSide_Position"` 
	// VehicleCabinDoorRow1PassengerSideShadeIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	VehicleCabinDoorRow1PassengerSideShadeIsOpen bool `ch:"Vehicle_Cabin_Door_Row1_PassengerSide_Shade_IsOpen"`
	// VehicleCabinDoorRow1PassengerSideShadePosition Item position. 0 = Start position 100 = End position.
	VehicleCabinDoorRow1PassengerSideShadePosition uint8 `ch:"Vehicle_Cabin_Door_Row1_PassengerSide_Shade_Position"`
	// VehicleCabinDoorRow1PassengerSideShadeSwitch Switch controlling sliding action such as window, sunroof, or blind.
	VehicleCabinDoorRow1PassengerSideShadeSwitch string `ch:"Vehicle_Cabin_Door_Row1_PassengerSide_Shade_Switch"`
	// VehicleCabinDoorRow1PassengerSideSwitch Switch controlling sliding action such as window, sunroof, or blind.
	VehicleCabinDoorRow1PassengerSideSwitch string `ch:"Vehicle_Cabin_Door_Row1_PassengerSide_Switch"` 
	// VehicleCabinDoorRow1PassengerSideWindowIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	VehicleCabinDoorRow1PassengerSideWindowIsOpen bool `ch:"Vehicle_Cabin_Door_Row1_PassengerSide_Window_IsOpen"`
	// VehicleCabinDoorRow1PassengerSideWindowPosition Item position. 0 = Start position 100 = End position.
	VehicleCabinDoorRow1PassengerSideWindowPosition uint8 `ch:"Vehicle_Cabin_Door_Row1_PassengerSide_Window_Position"`
	// VehicleCabinDoorRow1PassengerSideWindowSwitch Switch controlling sliding action such as window, sunroof, or blind.
	VehicleCabinDoorRow1PassengerSideWindowSwitch string `ch:"Vehicle_Cabin_Door_Row1_PassengerSide_Window_Switch"`  
	// VehicleCabinDoorRow2DriverSideIsChildLockActive Is door child lock active. True = Door cannot be opened from inside. False = Door can be opened from inside.
	VehicleCabinDoorRow2DriverSideIsChildLockActive bool `ch:"Vehicle_Cabin_Door_Row2_DriverSide_IsChildLockActive"`
	// VehicleCabinDoorRow2DriverSideIsLocked Is item locked or unlocked. True = Locked. False = Unlocked.
	VehicleCabinDoorRow2DriverSideIsLocked bool `ch:"Vehicle_Cabin_Door_Row2_DriverSide_IsLocked"`
	// VehicleCabinDoorRow2DriverSideIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	VehicleCabinDoorRow2DriverSideIsOpen bool `ch:"Vehicle_Cabin_Door_Row2_DriverSide_IsOpen"`
	// VehicleCabinDoorRow2DriverSidePosition Item position. 0 = Start position 100 = End position.
	VehicleCabinDoorRow2DriverSidePosition uint8 `ch:"Vehicle_Cabin_Door_Row2_DriverSide_Position"` 
	// VehicleCabinDoorRow2DriverSideShadeIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	VehicleCabinDoorRow2DriverSideShadeIsOpen bool `ch:"Vehicle_Cabin_Door_Row2_DriverSide_Shade_IsOpen"`
	// VehicleCabinDoorRow2DriverSideShadePosition Item position. 0 = Start position 100 = End position.
	VehicleCabinDoorRow2DriverSideShadePosition uint8 `ch:"Vehicle_Cabin_Door_Row2_DriverSide_Shade_Position"`
	// VehicleCabinDoorRow2DriverSideShadeSwitch Switch controlling sliding action such as window, sunroof, or blind.
	VehicleCabinDoorRow2DriverSideShadeSwitch string `ch:"Vehicle_Cabin_Door_Row2_DriverSide_Shade_Switch"`
	// VehicleCabinDoorRow2DriverSideSwitch Switch controlling sliding action such as window, sunroof, or blind.
	VehicleCabinDoorRow2DriverSideSwitch string `ch:"Vehicle_Cabin_Door_Row2_DriverSide_Switch"` 
	// VehicleCabinDoorRow2DriverSideWindowIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	VehicleCabinDoorRow2DriverSideWindowIsOpen bool `ch:"Vehicle_Cabin_Door_Row2_DriverSide_Window_IsOpen"`
	// VehicleCabinDoorRow2DriverSideWindowPosition Item position. 0 = Start position 100 = End position.
	VehicleCabinDoorRow2DriverSideWindowPosition uint8 `ch:"Vehicle_Cabin_Door_Row2_DriverSide_Window_Position"`
	// VehicleCabinDoorRow2DriverSideWindowSwitch Switch controlling sliding action such as window, sunroof, or blind.
	VehicleCabinDoorRow2DriverSideWindowSwitch string `ch:"Vehicle_Cabin_Door_Row2_DriverSide_Window_Switch"` 
	// VehicleCabinDoorRow2PassengerSideIsChildLockActive Is door child lock active. True = Door cannot be opened from inside. False = Door can be opened from inside.
	VehicleCabinDoorRow2PassengerSideIsChildLockActive bool `ch:"Vehicle_Cabin_Door_Row2_PassengerSide_IsChildLockActive"`
	// VehicleCabinDoorRow2PassengerSideIsLocked Is item locked or unlocked. True = Locked. False = Unlocked.
	VehicleCabinDoorRow2PassengerSideIsLocked bool `ch:"Vehicle_Cabin_Door_Row2_PassengerSide_IsLocked"`
	// VehicleCabinDoorRow2PassengerSideIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	VehicleCabinDoorRow2PassengerSideIsOpen bool `ch:"Vehicle_Cabin_Door_Row2_PassengerSide_IsOpen"`
	// VehicleCabinDoorRow2PassengerSidePosition Item position. 0 = Start position 100 = End position.
	VehicleCabinDoorRow2PassengerSidePosition uint8 `ch:"Vehicle_Cabin_Door_Row2_PassengerSide_Position"` 
	// VehicleCabinDoorRow2PassengerSideShadeIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	VehicleCabinDoorRow2PassengerSideShadeIsOpen bool `ch:"Vehicle_Cabin_Door_Row2_PassengerSide_Shade_IsOpen"`
	// VehicleCabinDoorRow2PassengerSideShadePosition Item position. 0 = Start position 100 = End position.
	VehicleCabinDoorRow2PassengerSideShadePosition uint8 `ch:"Vehicle_Cabin_Door_Row2_PassengerSide_Shade_Position"`
	// VehicleCabinDoorRow2PassengerSideShadeSwitch Switch controlling sliding action such as window, sunroof, or blind.
	VehicleCabinDoorRow2PassengerSideShadeSwitch string `ch:"Vehicle_Cabin_Door_Row2_PassengerSide_Shade_Switch"`
	// VehicleCabinDoorRow2PassengerSideSwitch Switch controlling sliding action such as window, sunroof, or blind.
	VehicleCabinDoorRow2PassengerSideSwitch string `ch:"Vehicle_Cabin_Door_Row2_PassengerSide_Switch"` 
	// VehicleCabinDoorRow2PassengerSideWindowIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	VehicleCabinDoorRow2PassengerSideWindowIsOpen bool `ch:"Vehicle_Cabin_Door_Row2_PassengerSide_Window_IsOpen"`
	// VehicleCabinDoorRow2PassengerSideWindowPosition Item position. 0 = Start position 100 = End position.
	VehicleCabinDoorRow2PassengerSideWindowPosition uint8 `ch:"Vehicle_Cabin_Door_Row2_PassengerSide_Window_Position"`
	// VehicleCabinDoorRow2PassengerSideWindowSwitch Switch controlling sliding action such as window, sunroof, or blind.
	VehicleCabinDoorRow2PassengerSideWindowSwitch string `ch:"Vehicle_Cabin_Door_Row2_PassengerSide_Window_Switch"`
	// VehicleCabinDoorCount Number of doors in vehicle.
	VehicleCabinDoorCount uint8 `ch:"Vehicle_Cabin_DoorCount"`
	// VehicleCabinDriverPosition The position of the driver seat in row 1.
	VehicleCabinDriverPosition string `ch:"Vehicle_Cabin_DriverPosition"` 
	// VehicleCabinHVACAmbientAirTemperature Ambient air temperature inside the vehicle.
	VehicleCabinHVACAmbientAirTemperature float32 `ch:"Vehicle_Cabin_HVAC_AmbientAirTemperature"`
	// VehicleCabinHVACIsAirConditioningActive Is Air conditioning active.
	VehicleCabinHVACIsAirConditioningActive bool `ch:"Vehicle_Cabin_HVAC_IsAirConditioningActive"`
	// VehicleCabinHVACIsAutoPowerOptimize Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
	VehicleCabinHVACIsAutoPowerOptimize bool `ch:"Vehicle_Cabin_HVAC_IsAutoPowerOptimize"`
	// VehicleCabinHVACIsFrontDefrosterActive Is front defroster active.
	VehicleCabinHVACIsFrontDefrosterActive bool `ch:"Vehicle_Cabin_HVAC_IsFrontDefrosterActive"`
	// VehicleCabinHVACIsRearDefrosterActive Is rear defroster active.
	VehicleCabinHVACIsRearDefrosterActive bool `ch:"Vehicle_Cabin_HVAC_IsRearDefrosterActive"`
	// VehicleCabinHVACIsRecirculationActive Is recirculation active.
	VehicleCabinHVACIsRecirculationActive bool `ch:"Vehicle_Cabin_HVAC_IsRecirculationActive"`
	// VehicleCabinHVACPowerOptimizeLevel Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
	VehicleCabinHVACPowerOptimizeLevel uint8 `ch:"Vehicle_Cabin_HVAC_PowerOptimizeLevel"`   
	// VehicleCabinHVACStationRow1DriverAirDistribution Direction of airstream
	VehicleCabinHVACStationRow1DriverAirDistribution string `ch:"Vehicle_Cabin_HVAC_Station_Row1_Driver_AirDistribution"`
	// VehicleCabinHVACStationRow1DriverFanSpeed Fan Speed, 0 = off. 100 = max
	VehicleCabinHVACStationRow1DriverFanSpeed uint8 `ch:"Vehicle_Cabin_HVAC_Station_Row1_Driver_FanSpeed"`
	// VehicleCabinHVACStationRow1DriverTemperature Temperature
	VehicleCabinHVACStationRow1DriverTemperature float32 `ch:"Vehicle_Cabin_HVAC_Station_Row1_Driver_Temperature"` 
	// VehicleCabinHVACStationRow1PassengerAirDistribution Direction of airstream
	VehicleCabinHVACStationRow1PassengerAirDistribution string `ch:"Vehicle_Cabin_HVAC_Station_Row1_Passenger_AirDistribution"`
	// VehicleCabinHVACStationRow1PassengerFanSpeed Fan Speed, 0 = off. 100 = max
	VehicleCabinHVACStationRow1PassengerFanSpeed uint8 `ch:"Vehicle_Cabin_HVAC_Station_Row1_Passenger_FanSpeed"`
	// VehicleCabinHVACStationRow1PassengerTemperature Temperature
	VehicleCabinHVACStationRow1PassengerTemperature float32 `ch:"Vehicle_Cabin_HVAC_Station_Row1_Passenger_Temperature"`  
	// VehicleCabinHVACStationRow2DriverAirDistribution Direction of airstream
	VehicleCabinHVACStationRow2DriverAirDistribution string `ch:"Vehicle_Cabin_HVAC_Station_Row2_Driver_AirDistribution"`
	// VehicleCabinHVACStationRow2DriverFanSpeed Fan Speed, 0 = off. 100 = max
	VehicleCabinHVACStationRow2DriverFanSpeed uint8 `ch:"Vehicle_Cabin_HVAC_Station_Row2_Driver_FanSpeed"`
	// VehicleCabinHVACStationRow2DriverTemperature Temperature
	VehicleCabinHVACStationRow2DriverTemperature float32 `ch:"Vehicle_Cabin_HVAC_Station_Row2_Driver_Temperature"` 
	// VehicleCabinHVACStationRow2PassengerAirDistribution Direction of airstream
	VehicleCabinHVACStationRow2PassengerAirDistribution string `ch:"Vehicle_Cabin_HVAC_Station_Row2_Passenger_AirDistribution"`
	// VehicleCabinHVACStationRow2PassengerFanSpeed Fan Speed, 0 = off. 100 = max
	VehicleCabinHVACStationRow2PassengerFanSpeed uint8 `ch:"Vehicle_Cabin_HVAC_Station_Row2_Passenger_FanSpeed"`
	// VehicleCabinHVACStationRow2PassengerTemperature Temperature
	VehicleCabinHVACStationRow2PassengerTemperature float32 `ch:"Vehicle_Cabin_HVAC_Station_Row2_Passenger_Temperature"`  
	// VehicleCabinHVACStationRow3DriverAirDistribution Direction of airstream
	VehicleCabinHVACStationRow3DriverAirDistribution string `ch:"Vehicle_Cabin_HVAC_Station_Row3_Driver_AirDistribution"`
	// VehicleCabinHVACStationRow3DriverFanSpeed Fan Speed, 0 = off. 100 = max
	VehicleCabinHVACStationRow3DriverFanSpeed uint8 `ch:"Vehicle_Cabin_HVAC_Station_Row3_Driver_FanSpeed"`
	// VehicleCabinHVACStationRow3DriverTemperature Temperature
	VehicleCabinHVACStationRow3DriverTemperature float32 `ch:"Vehicle_Cabin_HVAC_Station_Row3_Driver_Temperature"` 
	// VehicleCabinHVACStationRow3PassengerAirDistribution Direction of airstream
	VehicleCabinHVACStationRow3PassengerAirDistribution string `ch:"Vehicle_Cabin_HVAC_Station_Row3_Passenger_AirDistribution"`
	// VehicleCabinHVACStationRow3PassengerFanSpeed Fan Speed, 0 = off. 100 = max
	VehicleCabinHVACStationRow3PassengerFanSpeed uint8 `ch:"Vehicle_Cabin_HVAC_Station_Row3_Passenger_FanSpeed"`
	// VehicleCabinHVACStationRow3PassengerTemperature Temperature
	VehicleCabinHVACStationRow3PassengerTemperature float32 `ch:"Vehicle_Cabin_HVAC_Station_Row3_Passenger_Temperature"`  
	// VehicleCabinHVACStationRow4DriverAirDistribution Direction of airstream
	VehicleCabinHVACStationRow4DriverAirDistribution string `ch:"Vehicle_Cabin_HVAC_Station_Row4_Driver_AirDistribution"`
	// VehicleCabinHVACStationRow4DriverFanSpeed Fan Speed, 0 = off. 100 = max
	VehicleCabinHVACStationRow4DriverFanSpeed uint8 `ch:"Vehicle_Cabin_HVAC_Station_Row4_Driver_FanSpeed"`
	// VehicleCabinHVACStationRow4DriverTemperature Temperature
	VehicleCabinHVACStationRow4DriverTemperature float32 `ch:"Vehicle_Cabin_HVAC_Station_Row4_Driver_Temperature"` 
	// VehicleCabinHVACStationRow4PassengerAirDistribution Direction of airstream
	VehicleCabinHVACStationRow4PassengerAirDistribution string `ch:"Vehicle_Cabin_HVAC_Station_Row4_Passenger_AirDistribution"`
	// VehicleCabinHVACStationRow4PassengerFanSpeed Fan Speed, 0 = off. 100 = max
	VehicleCabinHVACStationRow4PassengerFanSpeed uint8 `ch:"Vehicle_Cabin_HVAC_Station_Row4_Passenger_FanSpeed"`
	// VehicleCabinHVACStationRow4PassengerTemperature Temperature
	VehicleCabinHVACStationRow4PassengerTemperature float32 `ch:"Vehicle_Cabin_HVAC_Station_Row4_Passenger_Temperature"`  
	// VehicleCabinInfotainmentHMIBrightness Brightness of the HMI, relative to supported range. 0 = Lowest brightness possible. 100 = Maximum Brightness possible.
	VehicleCabinInfotainmentHMIBrightness float32 `ch:"Vehicle_Cabin_Infotainment_HMI_Brightness"`
	// VehicleCabinInfotainmentHMICurrentLanguage ISO 639-1 standard language code for the current HMI
	VehicleCabinInfotainmentHMICurrentLanguage string `ch:"Vehicle_Cabin_Infotainment_HMI_CurrentLanguage"`
	// VehicleCabinInfotainmentHMIDateFormat Date format used in the current HMI
	VehicleCabinInfotainmentHMIDateFormat string `ch:"Vehicle_Cabin_Infotainment_HMI_DateFormat"`
	// VehicleCabinInfotainmentHMIDayNightMode Current display theme
	VehicleCabinInfotainmentHMIDayNightMode string `ch:"Vehicle_Cabin_Infotainment_HMI_DayNightMode"`
	// VehicleCabinInfotainmentHMIDisplayOffDuration Duration in seconds before the display is turned off. Value shall be 0 if screen never shall turn off.
	VehicleCabinInfotainmentHMIDisplayOffDuration uint16 `ch:"Vehicle_Cabin_Infotainment_HMI_DisplayOffDuration"`
	// VehicleCabinInfotainmentHMIDistanceUnit Distance unit used in the current HMI
	VehicleCabinInfotainmentHMIDistanceUnit string `ch:"Vehicle_Cabin_Infotainment_HMI_DistanceUnit"`
	// VehicleCabinInfotainmentHMIEVEconomyUnits EV fuel economy unit used in the current HMI
	VehicleCabinInfotainmentHMIEVEconomyUnits string `ch:"Vehicle_Cabin_Infotainment_HMI_EVEconomyUnits"`
	// VehicleCabinInfotainmentHMIEVEnergyUnits EV energy unit used in the current HMI
	VehicleCabinInfotainmentHMIEVEnergyUnits string `ch:"Vehicle_Cabin_Infotainment_HMI_EVEnergyUnits"`
	// VehicleCabinInfotainmentHMIFontSize Font size used in the current HMI
	VehicleCabinInfotainmentHMIFontSize string `ch:"Vehicle_Cabin_Infotainment_HMI_FontSize"`
	// VehicleCabinInfotainmentHMIFuelEconomyUnits Fuel economy unit used in the current HMI
	VehicleCabinInfotainmentHMIFuelEconomyUnits string `ch:"Vehicle_Cabin_Infotainment_HMI_FuelEconomyUnits"`
	// VehicleCabinInfotainmentHMIFuelVolumeUnit Fuel volume unit used in the current HMI
	VehicleCabinInfotainmentHMIFuelVolumeUnit string `ch:"Vehicle_Cabin_Infotainment_HMI_FuelVolumeUnit"`
	// VehicleCabinInfotainmentHMIIsScreenAlwaysOn Used to prevent the screen going black if no action placed.
	VehicleCabinInfotainmentHMIIsScreenAlwaysOn bool `ch:"Vehicle_Cabin_Infotainment_HMI_IsScreenAlwaysOn"`
	// VehicleCabinInfotainmentHMILastActionTime Time for last hmi action, formatted according to ISO 8601 with UTC time zone.
	VehicleCabinInfotainmentHMILastActionTime string `ch:"Vehicle_Cabin_Infotainment_HMI_LastActionTime"`
	// VehicleCabinInfotainmentHMISpeedUnit Speed unit used in the current HMI
	VehicleCabinInfotainmentHMISpeedUnit string `ch:"Vehicle_Cabin_Infotainment_HMI_SpeedUnit"`
	// VehicleCabinInfotainmentHMITemperatureUnit Temperature unit used in the current HMI
	VehicleCabinInfotainmentHMITemperatureUnit string `ch:"Vehicle_Cabin_Infotainment_HMI_TemperatureUnit"`
	// VehicleCabinInfotainmentHMITimeFormat Time format used in the current HMI
	VehicleCabinInfotainmentHMITimeFormat string `ch:"Vehicle_Cabin_Infotainment_HMI_TimeFormat"`
	// VehicleCabinInfotainmentHMITirePressureUnit Tire pressure unit used in the current HMI
	VehicleCabinInfotainmentHMITirePressureUnit string `ch:"Vehicle_Cabin_Infotainment_HMI_TirePressureUnit"`
	// VehicleCabinInfotainmentIsAutoPowerOptimize Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
	VehicleCabinInfotainmentIsAutoPowerOptimize bool `ch:"Vehicle_Cabin_Infotainment_IsAutoPowerOptimize"` 
	// VehicleCabinInfotainmentMediaAction Tells if the media was
	VehicleCabinInfotainmentMediaAction string `ch:"Vehicle_Cabin_Infotainment_Media_Action"`
	// VehicleCabinInfotainmentMediaDeclinedURI URI of suggested media that was declined
	VehicleCabinInfotainmentMediaDeclinedURI string `ch:"Vehicle_Cabin_Infotainment_Media_DeclinedURI"` 
	// VehicleCabinInfotainmentMediaPlayedAlbum Name of album being played
	VehicleCabinInfotainmentMediaPlayedAlbum string `ch:"Vehicle_Cabin_Infotainment_Media_Played_Album"`
	// VehicleCabinInfotainmentMediaPlayedArtist Name of artist being played
	VehicleCabinInfotainmentMediaPlayedArtist string `ch:"Vehicle_Cabin_Infotainment_Media_Played_Artist"`
	// VehicleCabinInfotainmentMediaPlayedPlaybackRate Current playback rate of media being played.
	VehicleCabinInfotainmentMediaPlayedPlaybackRate float32 `ch:"Vehicle_Cabin_Infotainment_Media_Played_PlaybackRate"`
	// VehicleCabinInfotainmentMediaPlayedSource Media selected for playback
	VehicleCabinInfotainmentMediaPlayedSource string `ch:"Vehicle_Cabin_Infotainment_Media_Played_Source"`
	// VehicleCabinInfotainmentMediaPlayedTrack Name of track being played
	VehicleCabinInfotainmentMediaPlayedTrack string `ch:"Vehicle_Cabin_Infotainment_Media_Played_Track"`
	// VehicleCabinInfotainmentMediaPlayedURI User Resource associated with the media
	VehicleCabinInfotainmentMediaPlayedURI string `ch:"Vehicle_Cabin_Infotainment_Media_Played_URI"`
	// VehicleCabinInfotainmentMediaSelectedURI URI of suggested media that was selected
	VehicleCabinInfotainmentMediaSelectedURI string `ch:"Vehicle_Cabin_Infotainment_Media_SelectedURI"`
	// VehicleCabinInfotainmentMediaVolume Current Media Volume
	VehicleCabinInfotainmentMediaVolume uint8 `ch:"Vehicle_Cabin_Infotainment_Media_Volume"`  
	// VehicleCabinInfotainmentNavigationDestinationSetLatitude Latitude of destination in WGS 84 geodetic coordinates.
	VehicleCabinInfotainmentNavigationDestinationSetLatitude float64 `ch:"Vehicle_Cabin_Infotainment_Navigation_DestinationSet_Latitude"`
	// VehicleCabinInfotainmentNavigationDestinationSetLongitude Longitude of destination in WGS 84 geodetic coordinates.
	VehicleCabinInfotainmentNavigationDestinationSetLongitude float64 `ch:"Vehicle_Cabin_Infotainment_Navigation_DestinationSet_Longitude"`
	// VehicleCabinInfotainmentNavigationGuidanceVoice Navigation guidance state that was selected.
	VehicleCabinInfotainmentNavigationGuidanceVoice string `ch:"Vehicle_Cabin_Infotainment_Navigation_GuidanceVoice"` 
	// VehicleCabinInfotainmentNavigationMapIsAutoScaleModeUsed Used to select auto-scaling mode. This feature dynamically adjusts the zoom level of the map to provide an optimal view based on the current speed of the vehicle
	VehicleCabinInfotainmentNavigationMapIsAutoScaleModeUsed bool `ch:"Vehicle_Cabin_Infotainment_Navigation_Map_IsAutoScaleModeUsed"`
	// VehicleCabinInfotainmentNavigationMute Navigation mute state that was selected.
	VehicleCabinInfotainmentNavigationMute string `ch:"Vehicle_Cabin_Infotainment_Navigation_Mute"`
	// VehicleCabinInfotainmentNavigationVolume Current navigation volume
	VehicleCabinInfotainmentNavigationVolume uint8 `ch:"Vehicle_Cabin_Infotainment_Navigation_Volume"`
	// VehicleCabinInfotainmentPowerOptimizeLevel Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
	VehicleCabinInfotainmentPowerOptimizeLevel uint8 `ch:"Vehicle_Cabin_Infotainment_PowerOptimizeLevel"` 
	// VehicleCabinInfotainmentSmartphoneProjectionActive Projection activation info.
	VehicleCabinInfotainmentSmartphoneProjectionActive string `ch:"Vehicle_Cabin_Infotainment_SmartphoneProjection_Active"`
	// VehicleCabinInfotainmentSmartphoneProjectionSource Connectivity source selected for projection.
	VehicleCabinInfotainmentSmartphoneProjectionSource string `ch:"Vehicle_Cabin_Infotainment_SmartphoneProjection_Source"`
	// VehicleCabinInfotainmentSmartphoneProjectionSupportedMode Supportable list for projection.
	VehicleCabinInfotainmentSmartphoneProjectionSupportedMode []string `ch:"Vehicle_Cabin_Infotainment_SmartphoneProjection_SupportedMode"`
	// VehicleCabinIsAutoPowerOptimize Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
	VehicleCabinIsAutoPowerOptimize bool `ch:"Vehicle_Cabin_IsAutoPowerOptimize"`
	// VehicleCabinIsWindowChildLockEngaged Is window child lock engaged. True = Engaged. False = Disengaged.
	VehicleCabinIsWindowChildLockEngaged bool `ch:"Vehicle_Cabin_IsWindowChildLockEngaged"`    
	// VehicleCabinLightAmbientLightRow1DriverSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	VehicleCabinLightAmbientLightRow1DriverSideColor string `ch:"Vehicle_Cabin_Light_AmbientLight_Row1_DriverSide_Color"`
	// VehicleCabinLightAmbientLightRow1DriverSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	VehicleCabinLightAmbientLightRow1DriverSideIntensity uint8 `ch:"Vehicle_Cabin_Light_AmbientLight_Row1_DriverSide_Intensity"`
	// VehicleCabinLightAmbientLightRow1DriverSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	VehicleCabinLightAmbientLightRow1DriverSideIsLightOn bool `ch:"Vehicle_Cabin_Light_AmbientLight_Row1_DriverSide_IsLightOn"` 
	// VehicleCabinLightAmbientLightRow1PassengerSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	VehicleCabinLightAmbientLightRow1PassengerSideColor string `ch:"Vehicle_Cabin_Light_AmbientLight_Row1_PassengerSide_Color"`
	// VehicleCabinLightAmbientLightRow1PassengerSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	VehicleCabinLightAmbientLightRow1PassengerSideIntensity uint8 `ch:"Vehicle_Cabin_Light_AmbientLight_Row1_PassengerSide_Intensity"`
	// VehicleCabinLightAmbientLightRow1PassengerSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	VehicleCabinLightAmbientLightRow1PassengerSideIsLightOn bool `ch:"Vehicle_Cabin_Light_AmbientLight_Row1_PassengerSide_IsLightOn"`  
	// VehicleCabinLightAmbientLightRow2DriverSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	VehicleCabinLightAmbientLightRow2DriverSideColor string `ch:"Vehicle_Cabin_Light_AmbientLight_Row2_DriverSide_Color"`
	// VehicleCabinLightAmbientLightRow2DriverSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	VehicleCabinLightAmbientLightRow2DriverSideIntensity uint8 `ch:"Vehicle_Cabin_Light_AmbientLight_Row2_DriverSide_Intensity"`
	// VehicleCabinLightAmbientLightRow2DriverSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	VehicleCabinLightAmbientLightRow2DriverSideIsLightOn bool `ch:"Vehicle_Cabin_Light_AmbientLight_Row2_DriverSide_IsLightOn"` 
	// VehicleCabinLightAmbientLightRow2PassengerSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	VehicleCabinLightAmbientLightRow2PassengerSideColor string `ch:"Vehicle_Cabin_Light_AmbientLight_Row2_PassengerSide_Color"`
	// VehicleCabinLightAmbientLightRow2PassengerSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	VehicleCabinLightAmbientLightRow2PassengerSideIntensity uint8 `ch:"Vehicle_Cabin_Light_AmbientLight_Row2_PassengerSide_Intensity"`
	// VehicleCabinLightAmbientLightRow2PassengerSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	VehicleCabinLightAmbientLightRow2PassengerSideIsLightOn bool `ch:"Vehicle_Cabin_Light_AmbientLight_Row2_PassengerSide_IsLightOn"` 
	// VehicleCabinLightInteractiveLightBarColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	VehicleCabinLightInteractiveLightBarColor string `ch:"Vehicle_Cabin_Light_InteractiveLightBar_Color"`
	// VehicleCabinLightInteractiveLightBarEffect Light effect selection from a predefined set of allowed values.
	VehicleCabinLightInteractiveLightBarEffect string `ch:"Vehicle_Cabin_Light_InteractiveLightBar_Effect"`
	// VehicleCabinLightInteractiveLightBarIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	VehicleCabinLightInteractiveLightBarIntensity uint8 `ch:"Vehicle_Cabin_Light_InteractiveLightBar_Intensity"`
	// VehicleCabinLightInteractiveLightBarIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	VehicleCabinLightInteractiveLightBarIsLightOn bool `ch:"Vehicle_Cabin_Light_InteractiveLightBar_IsLightOn"`
	// VehicleCabinLightIsDomeOn Is central dome light on
	VehicleCabinLightIsDomeOn bool `ch:"Vehicle_Cabin_Light_IsDomeOn"`
	// VehicleCabinLightIsGloveBoxOn Is glove box light on
	VehicleCabinLightIsGloveBoxOn bool `ch:"Vehicle_Cabin_Light_IsGloveBoxOn"`
	// VehicleCabinLightPerceivedAmbientLight The percentage of ambient light that is measured (e.g., by a sensor) inside the cabin. 0 = No ambient light. 100 = Full brightness.
	VehicleCabinLightPerceivedAmbientLight uint8 `ch:"Vehicle_Cabin_Light_PerceivedAmbientLight"`   
	// VehicleCabinLightSpotlightRow1DriverSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	VehicleCabinLightSpotlightRow1DriverSideColor string `ch:"Vehicle_Cabin_Light_Spotlight_Row1_DriverSide_Color"`
	// VehicleCabinLightSpotlightRow1DriverSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	VehicleCabinLightSpotlightRow1DriverSideIntensity uint8 `ch:"Vehicle_Cabin_Light_Spotlight_Row1_DriverSide_Intensity"`
	// VehicleCabinLightSpotlightRow1DriverSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	VehicleCabinLightSpotlightRow1DriverSideIsLightOn bool `ch:"Vehicle_Cabin_Light_Spotlight_Row1_DriverSide_IsLightOn"` 
	// VehicleCabinLightSpotlightRow1PassengerSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	VehicleCabinLightSpotlightRow1PassengerSideColor string `ch:"Vehicle_Cabin_Light_Spotlight_Row1_PassengerSide_Color"`
	// VehicleCabinLightSpotlightRow1PassengerSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	VehicleCabinLightSpotlightRow1PassengerSideIntensity uint8 `ch:"Vehicle_Cabin_Light_Spotlight_Row1_PassengerSide_Intensity"`
	// VehicleCabinLightSpotlightRow1PassengerSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	VehicleCabinLightSpotlightRow1PassengerSideIsLightOn bool `ch:"Vehicle_Cabin_Light_Spotlight_Row1_PassengerSide_IsLightOn"`  
	// VehicleCabinLightSpotlightRow2DriverSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	VehicleCabinLightSpotlightRow2DriverSideColor string `ch:"Vehicle_Cabin_Light_Spotlight_Row2_DriverSide_Color"`
	// VehicleCabinLightSpotlightRow2DriverSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	VehicleCabinLightSpotlightRow2DriverSideIntensity uint8 `ch:"Vehicle_Cabin_Light_Spotlight_Row2_DriverSide_Intensity"`
	// VehicleCabinLightSpotlightRow2DriverSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	VehicleCabinLightSpotlightRow2DriverSideIsLightOn bool `ch:"Vehicle_Cabin_Light_Spotlight_Row2_DriverSide_IsLightOn"` 
	// VehicleCabinLightSpotlightRow2PassengerSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	VehicleCabinLightSpotlightRow2PassengerSideColor string `ch:"Vehicle_Cabin_Light_Spotlight_Row2_PassengerSide_Color"`
	// VehicleCabinLightSpotlightRow2PassengerSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	VehicleCabinLightSpotlightRow2PassengerSideIntensity uint8 `ch:"Vehicle_Cabin_Light_Spotlight_Row2_PassengerSide_Intensity"`
	// VehicleCabinLightSpotlightRow2PassengerSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	VehicleCabinLightSpotlightRow2PassengerSideIsLightOn bool `ch:"Vehicle_Cabin_Light_Spotlight_Row2_PassengerSide_IsLightOn"`  
	// VehicleCabinLightSpotlightRow3DriverSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	VehicleCabinLightSpotlightRow3DriverSideColor string `ch:"Vehicle_Cabin_Light_Spotlight_Row3_DriverSide_Color"`
	// VehicleCabinLightSpotlightRow3DriverSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	VehicleCabinLightSpotlightRow3DriverSideIntensity uint8 `ch:"Vehicle_Cabin_Light_Spotlight_Row3_DriverSide_Intensity"`
	// VehicleCabinLightSpotlightRow3DriverSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	VehicleCabinLightSpotlightRow3DriverSideIsLightOn bool `ch:"Vehicle_Cabin_Light_Spotlight_Row3_DriverSide_IsLightOn"` 
	// VehicleCabinLightSpotlightRow3PassengerSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	VehicleCabinLightSpotlightRow3PassengerSideColor string `ch:"Vehicle_Cabin_Light_Spotlight_Row3_PassengerSide_Color"`
	// VehicleCabinLightSpotlightRow3PassengerSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	VehicleCabinLightSpotlightRow3PassengerSideIntensity uint8 `ch:"Vehicle_Cabin_Light_Spotlight_Row3_PassengerSide_Intensity"`
	// VehicleCabinLightSpotlightRow3PassengerSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	VehicleCabinLightSpotlightRow3PassengerSideIsLightOn bool `ch:"Vehicle_Cabin_Light_Spotlight_Row3_PassengerSide_IsLightOn"`  
	// VehicleCabinLightSpotlightRow4DriverSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	VehicleCabinLightSpotlightRow4DriverSideColor string `ch:"Vehicle_Cabin_Light_Spotlight_Row4_DriverSide_Color"`
	// VehicleCabinLightSpotlightRow4DriverSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	VehicleCabinLightSpotlightRow4DriverSideIntensity uint8 `ch:"Vehicle_Cabin_Light_Spotlight_Row4_DriverSide_Intensity"`
	// VehicleCabinLightSpotlightRow4DriverSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	VehicleCabinLightSpotlightRow4DriverSideIsLightOn bool `ch:"Vehicle_Cabin_Light_Spotlight_Row4_DriverSide_IsLightOn"` 
	// VehicleCabinLightSpotlightRow4PassengerSideColor Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".
	VehicleCabinLightSpotlightRow4PassengerSideColor string `ch:"Vehicle_Cabin_Light_Spotlight_Row4_PassengerSide_Color"`
	// VehicleCabinLightSpotlightRow4PassengerSideIntensity How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).
	VehicleCabinLightSpotlightRow4PassengerSideIntensity uint8 `ch:"Vehicle_Cabin_Light_Spotlight_Row4_PassengerSide_Intensity"`
	// VehicleCabinLightSpotlightRow4PassengerSideIsLightOn Indicates whether the light is turned on. True = On, False = Off.
	VehicleCabinLightSpotlightRow4PassengerSideIsLightOn bool `ch:"Vehicle_Cabin_Light_Spotlight_Row4_PassengerSide_IsLightOn"`
	// VehicleCabinPowerOptimizeLevel Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
	VehicleCabinPowerOptimizeLevel uint8 `ch:"Vehicle_Cabin_PowerOptimizeLevel"` 
	// VehicleCabinRearShadeIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	VehicleCabinRearShadeIsOpen bool `ch:"Vehicle_Cabin_RearShade_IsOpen"`
	// VehicleCabinRearShadePosition Item position. 0 = Start position 100 = End position.
	VehicleCabinRearShadePosition uint8 `ch:"Vehicle_Cabin_RearShade_Position"`
	// VehicleCabinRearShadeSwitch Switch controlling sliding action such as window, sunroof, or blind.
	VehicleCabinRearShadeSwitch string `ch:"Vehicle_Cabin_RearShade_Switch"` 
	// VehicleCabinRearviewMirrorDimmingLevel Dimming level of rear-view mirror. 0 = Undimmed. 100 = Fully dimmed.
	VehicleCabinRearviewMirrorDimmingLevel uint8 `ch:"Vehicle_Cabin_RearviewMirror_DimmingLevel"`    
	// VehicleCabinSeatRow1DriverSideAirbagIsDeployed Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.
	VehicleCabinSeatRow1DriverSideAirbagIsDeployed bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Airbag_IsDeployed"`  
	// VehicleCabinSeatRow1DriverSideBackrestLumbarHeight Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.
	VehicleCabinSeatRow1DriverSideBackrestLumbarHeight uint8 `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Backrest_Lumbar_Height"`
	// VehicleCabinSeatRow1DriverSideBackrestLumbarSupport Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.
	VehicleCabinSeatRow1DriverSideBackrestLumbarSupport float32 `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Backrest_Lumbar_Support"`
	// VehicleCabinSeatRow1DriverSideBackrestRecline Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.
	VehicleCabinSeatRow1DriverSideBackrestRecline float32 `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Backrest_Recline"` 
	// VehicleCabinSeatRow1DriverSideBackrestSideBolsterSupport Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.
	VehicleCabinSeatRow1DriverSideBackrestSideBolsterSupport float32 `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Backrest_SideBolster_Support"` 
	// VehicleCabinSeatRow1DriverSideHeadrestAngle Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.
	VehicleCabinSeatRow1DriverSideHeadrestAngle float32 `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Headrest_Angle"`
	// VehicleCabinSeatRow1DriverSideHeadrestHeight Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.
	VehicleCabinSeatRow1DriverSideHeadrestHeight uint8 `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Headrest_Height"`
	// VehicleCabinSeatRow1DriverSideHeating Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat.
	VehicleCabinSeatRow1DriverSideHeating int8 `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Heating"`
	// VehicleCabinSeatRow1DriverSideHeatingCooling Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.
	VehicleCabinSeatRow1DriverSideHeatingCooling int8 `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_HeatingCooling"`
	// VehicleCabinSeatRow1DriverSideHeight Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.
	VehicleCabinSeatRow1DriverSideHeight uint16 `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Height"`
	// VehicleCabinSeatRow1DriverSideIsBelted Is the belt engaged.
	VehicleCabinSeatRow1DriverSideIsBelted bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_IsBelted"`
	// VehicleCabinSeatRow1DriverSideIsOccupied Does the seat have a passenger in it.
	VehicleCabinSeatRow1DriverSideIsOccupied bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_IsOccupied"`
	// VehicleCabinSeatRow1DriverSideMassage Seat massage level. 0 = off. 100 = max massage.
	VehicleCabinSeatRow1DriverSideMassage uint8 `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Massage"`  
	// VehicleCabinSeatRow1DriverSideOccupantIdentifierIssuer Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.
	VehicleCabinSeatRow1DriverSideOccupantIdentifierIssuer string `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Occupant_Identifier_Issuer"`
	// VehicleCabinSeatRow1DriverSideOccupantIdentifierSubject Subject for the authentication of the occupant e.g. UserID 7331677.
	VehicleCabinSeatRow1DriverSideOccupantIdentifierSubject string `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Occupant_Identifier_Subject"`
	// VehicleCabinSeatRow1DriverSidePosition Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.
	VehicleCabinSeatRow1DriverSidePosition uint16 `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Position"`
	// VehicleCabinSeatRow1DriverSideSeatBeltHeight Seat belt position on vehicle z-axis. Position is relative within available movable range of the seat belt. 0 = Lowermost position supported.
	VehicleCabinSeatRow1DriverSideSeatBeltHeight uint16 `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_SeatBeltHeight"` 
	// VehicleCabinSeatRow1DriverSideSeatingLength Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).
	VehicleCabinSeatRow1DriverSideSeatingLength uint16 `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Seating_Length"`  
	// VehicleCabinSeatRow1DriverSideSwitchBackrestIsReclineBackwardEngaged Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).
	VehicleCabinSeatRow1DriverSideSwitchBackrestIsReclineBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Backrest_IsReclineBackwardEngaged"`
	// VehicleCabinSeatRow1DriverSideSwitchBackrestIsReclineForwardEngaged Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).
	VehicleCabinSeatRow1DriverSideSwitchBackrestIsReclineForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Backrest_IsReclineForwardEngaged"` 
	// VehicleCabinSeatRow1DriverSideSwitchBackrestLumbarIsDownEngaged Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow1DriverSideSwitchBackrestLumbarIsDownEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Backrest_Lumbar_IsDownEngaged"`
	// VehicleCabinSeatRow1DriverSideSwitchBackrestLumbarIsLessSupportEngaged Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow1DriverSideSwitchBackrestLumbarIsLessSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Backrest_Lumbar_IsLessSupportEngaged"`
	// VehicleCabinSeatRow1DriverSideSwitchBackrestLumbarIsMoreSupportEngaged Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow1DriverSideSwitchBackrestLumbarIsMoreSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Backrest_Lumbar_IsMoreSupportEngaged"`
	// VehicleCabinSeatRow1DriverSideSwitchBackrestLumbarIsUpEngaged Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow1DriverSideSwitchBackrestLumbarIsUpEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Backrest_Lumbar_IsUpEngaged"` 
	// VehicleCabinSeatRow1DriverSideSwitchBackrestSideBolsterIsLessSupportEngaged Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	VehicleCabinSeatRow1DriverSideSwitchBackrestSideBolsterIsLessSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Backrest_SideBolster_IsLessSupportEngaged"`
	// VehicleCabinSeatRow1DriverSideSwitchBackrestSideBolsterIsMoreSupportEngaged Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	VehicleCabinSeatRow1DriverSideSwitchBackrestSideBolsterIsMoreSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Backrest_SideBolster_IsMoreSupportEngaged"` 
	// VehicleCabinSeatRow1DriverSideSwitchHeadrestIsBackwardEngaged Head rest backward switch engaged (SingleSeat.Headrest.Angle).
	VehicleCabinSeatRow1DriverSideSwitchHeadrestIsBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Headrest_IsBackwardEngaged"`
	// VehicleCabinSeatRow1DriverSideSwitchHeadrestIsDownEngaged Head rest down switch engaged (SingleSeat.Headrest.Height).
	VehicleCabinSeatRow1DriverSideSwitchHeadrestIsDownEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Headrest_IsDownEngaged"`
	// VehicleCabinSeatRow1DriverSideSwitchHeadrestIsForwardEngaged Head rest forward switch engaged (SingleSeat.Headrest.Angle).
	VehicleCabinSeatRow1DriverSideSwitchHeadrestIsForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Headrest_IsForwardEngaged"`
	// VehicleCabinSeatRow1DriverSideSwitchHeadrestIsUpEngaged Head rest up switch engaged (SingleSeat.Headrest.Height).
	VehicleCabinSeatRow1DriverSideSwitchHeadrestIsUpEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Headrest_IsUpEngaged"`
	// VehicleCabinSeatRow1DriverSideSwitchIsBackwardEngaged Seat backward switch engaged (SingleSeat.Position).
	VehicleCabinSeatRow1DriverSideSwitchIsBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_IsBackwardEngaged"`
	// VehicleCabinSeatRow1DriverSideSwitchIsCoolerEngaged Cooler switch for Seat heater (SingleSeat.Heating).
	VehicleCabinSeatRow1DriverSideSwitchIsCoolerEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_IsCoolerEngaged"`
	// VehicleCabinSeatRow1DriverSideSwitchIsDownEngaged Seat down switch engaged (SingleSeat.Height).
	VehicleCabinSeatRow1DriverSideSwitchIsDownEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_IsDownEngaged"`
	// VehicleCabinSeatRow1DriverSideSwitchIsForwardEngaged Seat forward switch engaged (SingleSeat.Position).
	VehicleCabinSeatRow1DriverSideSwitchIsForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_IsForwardEngaged"`
	// VehicleCabinSeatRow1DriverSideSwitchIsTiltBackwardEngaged Tilt backward switch engaged (SingleSeat.Tilt).
	VehicleCabinSeatRow1DriverSideSwitchIsTiltBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_IsTiltBackwardEngaged"`
	// VehicleCabinSeatRow1DriverSideSwitchIsTiltForwardEngaged Tilt forward switch engaged (SingleSeat.Tilt).
	VehicleCabinSeatRow1DriverSideSwitchIsTiltForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_IsTiltForwardEngaged"`
	// VehicleCabinSeatRow1DriverSideSwitchIsUpEngaged Seat up switch engaged (SingleSeat.Height).
	VehicleCabinSeatRow1DriverSideSwitchIsUpEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_IsUpEngaged"`
	// VehicleCabinSeatRow1DriverSideSwitchIsWarmerEngaged Warmer switch for Seat heater (SingleSeat.Heating).
	VehicleCabinSeatRow1DriverSideSwitchIsWarmerEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_IsWarmerEngaged"` 
	// VehicleCabinSeatRow1DriverSideSwitchMassageIsDecreaseEngaged Decrease massage level switch engaged (SingleSeat.Massage).
	VehicleCabinSeatRow1DriverSideSwitchMassageIsDecreaseEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Massage_IsDecreaseEngaged"`
	// VehicleCabinSeatRow1DriverSideSwitchMassageIsIncreaseEngaged Increase massage level switch engaged (SingleSeat.Massage).
	VehicleCabinSeatRow1DriverSideSwitchMassageIsIncreaseEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Massage_IsIncreaseEngaged"` 
	// VehicleCabinSeatRow1DriverSideSwitchSeatingIsBackwardEngaged Is switch to decrease seating length engaged (SingleSeat.Seating.Length).
	VehicleCabinSeatRow1DriverSideSwitchSeatingIsBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Seating_IsBackwardEngaged"`
	// VehicleCabinSeatRow1DriverSideSwitchSeatingIsForwardEngaged Is switch to increase seating length engaged (SingleSeat.Seating.Length).
	VehicleCabinSeatRow1DriverSideSwitchSeatingIsForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Switch_Seating_IsForwardEngaged"`
	// VehicleCabinSeatRow1DriverSideTilt Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.
	VehicleCabinSeatRow1DriverSideTilt float32 `ch:"Vehicle_Cabin_Seat_Row1_DriverSide_Tilt"`  
	// VehicleCabinSeatRow1MiddleAirbagIsDeployed Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.
	VehicleCabinSeatRow1MiddleAirbagIsDeployed bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Airbag_IsDeployed"`  
	// VehicleCabinSeatRow1MiddleBackrestLumbarHeight Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.
	VehicleCabinSeatRow1MiddleBackrestLumbarHeight uint8 `ch:"Vehicle_Cabin_Seat_Row1_Middle_Backrest_Lumbar_Height"`
	// VehicleCabinSeatRow1MiddleBackrestLumbarSupport Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.
	VehicleCabinSeatRow1MiddleBackrestLumbarSupport float32 `ch:"Vehicle_Cabin_Seat_Row1_Middle_Backrest_Lumbar_Support"`
	// VehicleCabinSeatRow1MiddleBackrestRecline Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.
	VehicleCabinSeatRow1MiddleBackrestRecline float32 `ch:"Vehicle_Cabin_Seat_Row1_Middle_Backrest_Recline"` 
	// VehicleCabinSeatRow1MiddleBackrestSideBolsterSupport Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.
	VehicleCabinSeatRow1MiddleBackrestSideBolsterSupport float32 `ch:"Vehicle_Cabin_Seat_Row1_Middle_Backrest_SideBolster_Support"` 
	// VehicleCabinSeatRow1MiddleHeadrestAngle Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.
	VehicleCabinSeatRow1MiddleHeadrestAngle float32 `ch:"Vehicle_Cabin_Seat_Row1_Middle_Headrest_Angle"`
	// VehicleCabinSeatRow1MiddleHeadrestHeight Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.
	VehicleCabinSeatRow1MiddleHeadrestHeight uint8 `ch:"Vehicle_Cabin_Seat_Row1_Middle_Headrest_Height"`
	// VehicleCabinSeatRow1MiddleHeating Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat.
	VehicleCabinSeatRow1MiddleHeating int8 `ch:"Vehicle_Cabin_Seat_Row1_Middle_Heating"`
	// VehicleCabinSeatRow1MiddleHeatingCooling Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.
	VehicleCabinSeatRow1MiddleHeatingCooling int8 `ch:"Vehicle_Cabin_Seat_Row1_Middle_HeatingCooling"`
	// VehicleCabinSeatRow1MiddleHeight Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.
	VehicleCabinSeatRow1MiddleHeight uint16 `ch:"Vehicle_Cabin_Seat_Row1_Middle_Height"`
	// VehicleCabinSeatRow1MiddleIsBelted Is the belt engaged.
	VehicleCabinSeatRow1MiddleIsBelted bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_IsBelted"`
	// VehicleCabinSeatRow1MiddleIsOccupied Does the seat have a passenger in it.
	VehicleCabinSeatRow1MiddleIsOccupied bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_IsOccupied"`
	// VehicleCabinSeatRow1MiddleMassage Seat massage level. 0 = off. 100 = max massage.
	VehicleCabinSeatRow1MiddleMassage uint8 `ch:"Vehicle_Cabin_Seat_Row1_Middle_Massage"`  
	// VehicleCabinSeatRow1MiddleOccupantIdentifierIssuer Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.
	VehicleCabinSeatRow1MiddleOccupantIdentifierIssuer string `ch:"Vehicle_Cabin_Seat_Row1_Middle_Occupant_Identifier_Issuer"`
	// VehicleCabinSeatRow1MiddleOccupantIdentifierSubject Subject for the authentication of the occupant e.g. UserID 7331677.
	VehicleCabinSeatRow1MiddleOccupantIdentifierSubject string `ch:"Vehicle_Cabin_Seat_Row1_Middle_Occupant_Identifier_Subject"`
	// VehicleCabinSeatRow1MiddlePosition Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.
	VehicleCabinSeatRow1MiddlePosition uint16 `ch:"Vehicle_Cabin_Seat_Row1_Middle_Position"`
	// VehicleCabinSeatRow1MiddleSeatBeltHeight Seat belt position on vehicle z-axis. Position is relative within available movable range of the seat belt. 0 = Lowermost position supported.
	VehicleCabinSeatRow1MiddleSeatBeltHeight uint16 `ch:"Vehicle_Cabin_Seat_Row1_Middle_SeatBeltHeight"` 
	// VehicleCabinSeatRow1MiddleSeatingLength Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).
	VehicleCabinSeatRow1MiddleSeatingLength uint16 `ch:"Vehicle_Cabin_Seat_Row1_Middle_Seating_Length"`  
	// VehicleCabinSeatRow1MiddleSwitchBackrestIsReclineBackwardEngaged Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).
	VehicleCabinSeatRow1MiddleSwitchBackrestIsReclineBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_Backrest_IsReclineBackwardEngaged"`
	// VehicleCabinSeatRow1MiddleSwitchBackrestIsReclineForwardEngaged Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).
	VehicleCabinSeatRow1MiddleSwitchBackrestIsReclineForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_Backrest_IsReclineForwardEngaged"` 
	// VehicleCabinSeatRow1MiddleSwitchBackrestLumbarIsDownEngaged Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow1MiddleSwitchBackrestLumbarIsDownEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_Backrest_Lumbar_IsDownEngaged"`
	// VehicleCabinSeatRow1MiddleSwitchBackrestLumbarIsLessSupportEngaged Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow1MiddleSwitchBackrestLumbarIsLessSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_Backrest_Lumbar_IsLessSupportEngaged"`
	// VehicleCabinSeatRow1MiddleSwitchBackrestLumbarIsMoreSupportEngaged Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow1MiddleSwitchBackrestLumbarIsMoreSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_Backrest_Lumbar_IsMoreSupportEngaged"`
	// VehicleCabinSeatRow1MiddleSwitchBackrestLumbarIsUpEngaged Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow1MiddleSwitchBackrestLumbarIsUpEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_Backrest_Lumbar_IsUpEngaged"` 
	// VehicleCabinSeatRow1MiddleSwitchBackrestSideBolsterIsLessSupportEngaged Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	VehicleCabinSeatRow1MiddleSwitchBackrestSideBolsterIsLessSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_Backrest_SideBolster_IsLessSupportEngaged"`
	// VehicleCabinSeatRow1MiddleSwitchBackrestSideBolsterIsMoreSupportEngaged Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	VehicleCabinSeatRow1MiddleSwitchBackrestSideBolsterIsMoreSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_Backrest_SideBolster_IsMoreSupportEngaged"` 
	// VehicleCabinSeatRow1MiddleSwitchHeadrestIsBackwardEngaged Head rest backward switch engaged (SingleSeat.Headrest.Angle).
	VehicleCabinSeatRow1MiddleSwitchHeadrestIsBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_Headrest_IsBackwardEngaged"`
	// VehicleCabinSeatRow1MiddleSwitchHeadrestIsDownEngaged Head rest down switch engaged (SingleSeat.Headrest.Height).
	VehicleCabinSeatRow1MiddleSwitchHeadrestIsDownEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_Headrest_IsDownEngaged"`
	// VehicleCabinSeatRow1MiddleSwitchHeadrestIsForwardEngaged Head rest forward switch engaged (SingleSeat.Headrest.Angle).
	VehicleCabinSeatRow1MiddleSwitchHeadrestIsForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_Headrest_IsForwardEngaged"`
	// VehicleCabinSeatRow1MiddleSwitchHeadrestIsUpEngaged Head rest up switch engaged (SingleSeat.Headrest.Height).
	VehicleCabinSeatRow1MiddleSwitchHeadrestIsUpEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_Headrest_IsUpEngaged"`
	// VehicleCabinSeatRow1MiddleSwitchIsBackwardEngaged Seat backward switch engaged (SingleSeat.Position).
	VehicleCabinSeatRow1MiddleSwitchIsBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_IsBackwardEngaged"`
	// VehicleCabinSeatRow1MiddleSwitchIsCoolerEngaged Cooler switch for Seat heater (SingleSeat.Heating).
	VehicleCabinSeatRow1MiddleSwitchIsCoolerEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_IsCoolerEngaged"`
	// VehicleCabinSeatRow1MiddleSwitchIsDownEngaged Seat down switch engaged (SingleSeat.Height).
	VehicleCabinSeatRow1MiddleSwitchIsDownEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_IsDownEngaged"`
	// VehicleCabinSeatRow1MiddleSwitchIsForwardEngaged Seat forward switch engaged (SingleSeat.Position).
	VehicleCabinSeatRow1MiddleSwitchIsForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_IsForwardEngaged"`
	// VehicleCabinSeatRow1MiddleSwitchIsTiltBackwardEngaged Tilt backward switch engaged (SingleSeat.Tilt).
	VehicleCabinSeatRow1MiddleSwitchIsTiltBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_IsTiltBackwardEngaged"`
	// VehicleCabinSeatRow1MiddleSwitchIsTiltForwardEngaged Tilt forward switch engaged (SingleSeat.Tilt).
	VehicleCabinSeatRow1MiddleSwitchIsTiltForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_IsTiltForwardEngaged"`
	// VehicleCabinSeatRow1MiddleSwitchIsUpEngaged Seat up switch engaged (SingleSeat.Height).
	VehicleCabinSeatRow1MiddleSwitchIsUpEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_IsUpEngaged"`
	// VehicleCabinSeatRow1MiddleSwitchIsWarmerEngaged Warmer switch for Seat heater (SingleSeat.Heating).
	VehicleCabinSeatRow1MiddleSwitchIsWarmerEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_IsWarmerEngaged"` 
	// VehicleCabinSeatRow1MiddleSwitchMassageIsDecreaseEngaged Decrease massage level switch engaged (SingleSeat.Massage).
	VehicleCabinSeatRow1MiddleSwitchMassageIsDecreaseEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_Massage_IsDecreaseEngaged"`
	// VehicleCabinSeatRow1MiddleSwitchMassageIsIncreaseEngaged Increase massage level switch engaged (SingleSeat.Massage).
	VehicleCabinSeatRow1MiddleSwitchMassageIsIncreaseEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_Massage_IsIncreaseEngaged"` 
	// VehicleCabinSeatRow1MiddleSwitchSeatingIsBackwardEngaged Is switch to decrease seating length engaged (SingleSeat.Seating.Length).
	VehicleCabinSeatRow1MiddleSwitchSeatingIsBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_Seating_IsBackwardEngaged"`
	// VehicleCabinSeatRow1MiddleSwitchSeatingIsForwardEngaged Is switch to increase seating length engaged (SingleSeat.Seating.Length).
	VehicleCabinSeatRow1MiddleSwitchSeatingIsForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_Middle_Switch_Seating_IsForwardEngaged"`
	// VehicleCabinSeatRow1MiddleTilt Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.
	VehicleCabinSeatRow1MiddleTilt float32 `ch:"Vehicle_Cabin_Seat_Row1_Middle_Tilt"`  
	// VehicleCabinSeatRow1PassengerSideAirbagIsDeployed Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.
	VehicleCabinSeatRow1PassengerSideAirbagIsDeployed bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Airbag_IsDeployed"`  
	// VehicleCabinSeatRow1PassengerSideBackrestLumbarHeight Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.
	VehicleCabinSeatRow1PassengerSideBackrestLumbarHeight uint8 `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Backrest_Lumbar_Height"`
	// VehicleCabinSeatRow1PassengerSideBackrestLumbarSupport Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.
	VehicleCabinSeatRow1PassengerSideBackrestLumbarSupport float32 `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Backrest_Lumbar_Support"`
	// VehicleCabinSeatRow1PassengerSideBackrestRecline Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.
	VehicleCabinSeatRow1PassengerSideBackrestRecline float32 `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Backrest_Recline"` 
	// VehicleCabinSeatRow1PassengerSideBackrestSideBolsterSupport Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.
	VehicleCabinSeatRow1PassengerSideBackrestSideBolsterSupport float32 `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Backrest_SideBolster_Support"` 
	// VehicleCabinSeatRow1PassengerSideHeadrestAngle Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.
	VehicleCabinSeatRow1PassengerSideHeadrestAngle float32 `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Headrest_Angle"`
	// VehicleCabinSeatRow1PassengerSideHeadrestHeight Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.
	VehicleCabinSeatRow1PassengerSideHeadrestHeight uint8 `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Headrest_Height"`
	// VehicleCabinSeatRow1PassengerSideHeating Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat.
	VehicleCabinSeatRow1PassengerSideHeating int8 `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Heating"`
	// VehicleCabinSeatRow1PassengerSideHeatingCooling Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.
	VehicleCabinSeatRow1PassengerSideHeatingCooling int8 `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_HeatingCooling"`
	// VehicleCabinSeatRow1PassengerSideHeight Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.
	VehicleCabinSeatRow1PassengerSideHeight uint16 `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Height"`
	// VehicleCabinSeatRow1PassengerSideIsBelted Is the belt engaged.
	VehicleCabinSeatRow1PassengerSideIsBelted bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_IsBelted"`
	// VehicleCabinSeatRow1PassengerSideIsOccupied Does the seat have a passenger in it.
	VehicleCabinSeatRow1PassengerSideIsOccupied bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_IsOccupied"`
	// VehicleCabinSeatRow1PassengerSideMassage Seat massage level. 0 = off. 100 = max massage.
	VehicleCabinSeatRow1PassengerSideMassage uint8 `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Massage"`  
	// VehicleCabinSeatRow1PassengerSideOccupantIdentifierIssuer Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.
	VehicleCabinSeatRow1PassengerSideOccupantIdentifierIssuer string `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Occupant_Identifier_Issuer"`
	// VehicleCabinSeatRow1PassengerSideOccupantIdentifierSubject Subject for the authentication of the occupant e.g. UserID 7331677.
	VehicleCabinSeatRow1PassengerSideOccupantIdentifierSubject string `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Occupant_Identifier_Subject"`
	// VehicleCabinSeatRow1PassengerSidePosition Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.
	VehicleCabinSeatRow1PassengerSidePosition uint16 `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Position"`
	// VehicleCabinSeatRow1PassengerSideSeatBeltHeight Seat belt position on vehicle z-axis. Position is relative within available movable range of the seat belt. 0 = Lowermost position supported.
	VehicleCabinSeatRow1PassengerSideSeatBeltHeight uint16 `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_SeatBeltHeight"` 
	// VehicleCabinSeatRow1PassengerSideSeatingLength Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).
	VehicleCabinSeatRow1PassengerSideSeatingLength uint16 `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Seating_Length"`  
	// VehicleCabinSeatRow1PassengerSideSwitchBackrestIsReclineBackwardEngaged Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).
	VehicleCabinSeatRow1PassengerSideSwitchBackrestIsReclineBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Backrest_IsReclineBackwardEngaged"`
	// VehicleCabinSeatRow1PassengerSideSwitchBackrestIsReclineForwardEngaged Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).
	VehicleCabinSeatRow1PassengerSideSwitchBackrestIsReclineForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Backrest_IsReclineForwardEngaged"` 
	// VehicleCabinSeatRow1PassengerSideSwitchBackrestLumbarIsDownEngaged Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow1PassengerSideSwitchBackrestLumbarIsDownEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Backrest_Lumbar_IsDownEngaged"`
	// VehicleCabinSeatRow1PassengerSideSwitchBackrestLumbarIsLessSupportEngaged Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow1PassengerSideSwitchBackrestLumbarIsLessSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Backrest_Lumbar_IsLessSupportEngaged"`
	// VehicleCabinSeatRow1PassengerSideSwitchBackrestLumbarIsMoreSupportEngaged Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow1PassengerSideSwitchBackrestLumbarIsMoreSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Backrest_Lumbar_IsMoreSupportEngaged"`
	// VehicleCabinSeatRow1PassengerSideSwitchBackrestLumbarIsUpEngaged Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow1PassengerSideSwitchBackrestLumbarIsUpEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Backrest_Lumbar_IsUpEngaged"` 
	// VehicleCabinSeatRow1PassengerSideSwitchBackrestSideBolsterIsLessSupportEngaged Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	VehicleCabinSeatRow1PassengerSideSwitchBackrestSideBolsterIsLessSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Backrest_SideBolster_IsLessSupportEngaged"`
	// VehicleCabinSeatRow1PassengerSideSwitchBackrestSideBolsterIsMoreSupportEngaged Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	VehicleCabinSeatRow1PassengerSideSwitchBackrestSideBolsterIsMoreSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Backrest_SideBolster_IsMoreSupportEngaged"` 
	// VehicleCabinSeatRow1PassengerSideSwitchHeadrestIsBackwardEngaged Head rest backward switch engaged (SingleSeat.Headrest.Angle).
	VehicleCabinSeatRow1PassengerSideSwitchHeadrestIsBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Headrest_IsBackwardEngaged"`
	// VehicleCabinSeatRow1PassengerSideSwitchHeadrestIsDownEngaged Head rest down switch engaged (SingleSeat.Headrest.Height).
	VehicleCabinSeatRow1PassengerSideSwitchHeadrestIsDownEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Headrest_IsDownEngaged"`
	// VehicleCabinSeatRow1PassengerSideSwitchHeadrestIsForwardEngaged Head rest forward switch engaged (SingleSeat.Headrest.Angle).
	VehicleCabinSeatRow1PassengerSideSwitchHeadrestIsForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Headrest_IsForwardEngaged"`
	// VehicleCabinSeatRow1PassengerSideSwitchHeadrestIsUpEngaged Head rest up switch engaged (SingleSeat.Headrest.Height).
	VehicleCabinSeatRow1PassengerSideSwitchHeadrestIsUpEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Headrest_IsUpEngaged"`
	// VehicleCabinSeatRow1PassengerSideSwitchIsBackwardEngaged Seat backward switch engaged (SingleSeat.Position).
	VehicleCabinSeatRow1PassengerSideSwitchIsBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_IsBackwardEngaged"`
	// VehicleCabinSeatRow1PassengerSideSwitchIsCoolerEngaged Cooler switch for Seat heater (SingleSeat.Heating).
	VehicleCabinSeatRow1PassengerSideSwitchIsCoolerEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_IsCoolerEngaged"`
	// VehicleCabinSeatRow1PassengerSideSwitchIsDownEngaged Seat down switch engaged (SingleSeat.Height).
	VehicleCabinSeatRow1PassengerSideSwitchIsDownEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_IsDownEngaged"`
	// VehicleCabinSeatRow1PassengerSideSwitchIsForwardEngaged Seat forward switch engaged (SingleSeat.Position).
	VehicleCabinSeatRow1PassengerSideSwitchIsForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_IsForwardEngaged"`
	// VehicleCabinSeatRow1PassengerSideSwitchIsTiltBackwardEngaged Tilt backward switch engaged (SingleSeat.Tilt).
	VehicleCabinSeatRow1PassengerSideSwitchIsTiltBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_IsTiltBackwardEngaged"`
	// VehicleCabinSeatRow1PassengerSideSwitchIsTiltForwardEngaged Tilt forward switch engaged (SingleSeat.Tilt).
	VehicleCabinSeatRow1PassengerSideSwitchIsTiltForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_IsTiltForwardEngaged"`
	// VehicleCabinSeatRow1PassengerSideSwitchIsUpEngaged Seat up switch engaged (SingleSeat.Height).
	VehicleCabinSeatRow1PassengerSideSwitchIsUpEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_IsUpEngaged"`
	// VehicleCabinSeatRow1PassengerSideSwitchIsWarmerEngaged Warmer switch for Seat heater (SingleSeat.Heating).
	VehicleCabinSeatRow1PassengerSideSwitchIsWarmerEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_IsWarmerEngaged"` 
	// VehicleCabinSeatRow1PassengerSideSwitchMassageIsDecreaseEngaged Decrease massage level switch engaged (SingleSeat.Massage).
	VehicleCabinSeatRow1PassengerSideSwitchMassageIsDecreaseEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Massage_IsDecreaseEngaged"`
	// VehicleCabinSeatRow1PassengerSideSwitchMassageIsIncreaseEngaged Increase massage level switch engaged (SingleSeat.Massage).
	VehicleCabinSeatRow1PassengerSideSwitchMassageIsIncreaseEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Massage_IsIncreaseEngaged"` 
	// VehicleCabinSeatRow1PassengerSideSwitchSeatingIsBackwardEngaged Is switch to decrease seating length engaged (SingleSeat.Seating.Length).
	VehicleCabinSeatRow1PassengerSideSwitchSeatingIsBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Seating_IsBackwardEngaged"`
	// VehicleCabinSeatRow1PassengerSideSwitchSeatingIsForwardEngaged Is switch to increase seating length engaged (SingleSeat.Seating.Length).
	VehicleCabinSeatRow1PassengerSideSwitchSeatingIsForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Switch_Seating_IsForwardEngaged"`
	// VehicleCabinSeatRow1PassengerSideTilt Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.
	VehicleCabinSeatRow1PassengerSideTilt float32 `ch:"Vehicle_Cabin_Seat_Row1_PassengerSide_Tilt"`   
	// VehicleCabinSeatRow2DriverSideAirbagIsDeployed Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.
	VehicleCabinSeatRow2DriverSideAirbagIsDeployed bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Airbag_IsDeployed"`  
	// VehicleCabinSeatRow2DriverSideBackrestLumbarHeight Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.
	VehicleCabinSeatRow2DriverSideBackrestLumbarHeight uint8 `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Backrest_Lumbar_Height"`
	// VehicleCabinSeatRow2DriverSideBackrestLumbarSupport Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.
	VehicleCabinSeatRow2DriverSideBackrestLumbarSupport float32 `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Backrest_Lumbar_Support"`
	// VehicleCabinSeatRow2DriverSideBackrestRecline Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.
	VehicleCabinSeatRow2DriverSideBackrestRecline float32 `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Backrest_Recline"` 
	// VehicleCabinSeatRow2DriverSideBackrestSideBolsterSupport Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.
	VehicleCabinSeatRow2DriverSideBackrestSideBolsterSupport float32 `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Backrest_SideBolster_Support"` 
	// VehicleCabinSeatRow2DriverSideHeadrestAngle Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.
	VehicleCabinSeatRow2DriverSideHeadrestAngle float32 `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Headrest_Angle"`
	// VehicleCabinSeatRow2DriverSideHeadrestHeight Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.
	VehicleCabinSeatRow2DriverSideHeadrestHeight uint8 `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Headrest_Height"`
	// VehicleCabinSeatRow2DriverSideHeating Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat.
	VehicleCabinSeatRow2DriverSideHeating int8 `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Heating"`
	// VehicleCabinSeatRow2DriverSideHeatingCooling Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.
	VehicleCabinSeatRow2DriverSideHeatingCooling int8 `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_HeatingCooling"`
	// VehicleCabinSeatRow2DriverSideHeight Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.
	VehicleCabinSeatRow2DriverSideHeight uint16 `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Height"`
	// VehicleCabinSeatRow2DriverSideIsBelted Is the belt engaged.
	VehicleCabinSeatRow2DriverSideIsBelted bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_IsBelted"`
	// VehicleCabinSeatRow2DriverSideIsOccupied Does the seat have a passenger in it.
	VehicleCabinSeatRow2DriverSideIsOccupied bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_IsOccupied"`
	// VehicleCabinSeatRow2DriverSideMassage Seat massage level. 0 = off. 100 = max massage.
	VehicleCabinSeatRow2DriverSideMassage uint8 `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Massage"`  
	// VehicleCabinSeatRow2DriverSideOccupantIdentifierIssuer Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.
	VehicleCabinSeatRow2DriverSideOccupantIdentifierIssuer string `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Occupant_Identifier_Issuer"`
	// VehicleCabinSeatRow2DriverSideOccupantIdentifierSubject Subject for the authentication of the occupant e.g. UserID 7331677.
	VehicleCabinSeatRow2DriverSideOccupantIdentifierSubject string `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Occupant_Identifier_Subject"`
	// VehicleCabinSeatRow2DriverSidePosition Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.
	VehicleCabinSeatRow2DriverSidePosition uint16 `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Position"`
	// VehicleCabinSeatRow2DriverSideSeatBeltHeight Seat belt position on vehicle z-axis. Position is relative within available movable range of the seat belt. 0 = Lowermost position supported.
	VehicleCabinSeatRow2DriverSideSeatBeltHeight uint16 `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_SeatBeltHeight"` 
	// VehicleCabinSeatRow2DriverSideSeatingLength Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).
	VehicleCabinSeatRow2DriverSideSeatingLength uint16 `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Seating_Length"`  
	// VehicleCabinSeatRow2DriverSideSwitchBackrestIsReclineBackwardEngaged Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).
	VehicleCabinSeatRow2DriverSideSwitchBackrestIsReclineBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Backrest_IsReclineBackwardEngaged"`
	// VehicleCabinSeatRow2DriverSideSwitchBackrestIsReclineForwardEngaged Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).
	VehicleCabinSeatRow2DriverSideSwitchBackrestIsReclineForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Backrest_IsReclineForwardEngaged"` 
	// VehicleCabinSeatRow2DriverSideSwitchBackrestLumbarIsDownEngaged Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow2DriverSideSwitchBackrestLumbarIsDownEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Backrest_Lumbar_IsDownEngaged"`
	// VehicleCabinSeatRow2DriverSideSwitchBackrestLumbarIsLessSupportEngaged Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow2DriverSideSwitchBackrestLumbarIsLessSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Backrest_Lumbar_IsLessSupportEngaged"`
	// VehicleCabinSeatRow2DriverSideSwitchBackrestLumbarIsMoreSupportEngaged Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow2DriverSideSwitchBackrestLumbarIsMoreSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Backrest_Lumbar_IsMoreSupportEngaged"`
	// VehicleCabinSeatRow2DriverSideSwitchBackrestLumbarIsUpEngaged Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow2DriverSideSwitchBackrestLumbarIsUpEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Backrest_Lumbar_IsUpEngaged"` 
	// VehicleCabinSeatRow2DriverSideSwitchBackrestSideBolsterIsLessSupportEngaged Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	VehicleCabinSeatRow2DriverSideSwitchBackrestSideBolsterIsLessSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Backrest_SideBolster_IsLessSupportEngaged"`
	// VehicleCabinSeatRow2DriverSideSwitchBackrestSideBolsterIsMoreSupportEngaged Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	VehicleCabinSeatRow2DriverSideSwitchBackrestSideBolsterIsMoreSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Backrest_SideBolster_IsMoreSupportEngaged"` 
	// VehicleCabinSeatRow2DriverSideSwitchHeadrestIsBackwardEngaged Head rest backward switch engaged (SingleSeat.Headrest.Angle).
	VehicleCabinSeatRow2DriverSideSwitchHeadrestIsBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Headrest_IsBackwardEngaged"`
	// VehicleCabinSeatRow2DriverSideSwitchHeadrestIsDownEngaged Head rest down switch engaged (SingleSeat.Headrest.Height).
	VehicleCabinSeatRow2DriverSideSwitchHeadrestIsDownEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Headrest_IsDownEngaged"`
	// VehicleCabinSeatRow2DriverSideSwitchHeadrestIsForwardEngaged Head rest forward switch engaged (SingleSeat.Headrest.Angle).
	VehicleCabinSeatRow2DriverSideSwitchHeadrestIsForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Headrest_IsForwardEngaged"`
	// VehicleCabinSeatRow2DriverSideSwitchHeadrestIsUpEngaged Head rest up switch engaged (SingleSeat.Headrest.Height).
	VehicleCabinSeatRow2DriverSideSwitchHeadrestIsUpEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Headrest_IsUpEngaged"`
	// VehicleCabinSeatRow2DriverSideSwitchIsBackwardEngaged Seat backward switch engaged (SingleSeat.Position).
	VehicleCabinSeatRow2DriverSideSwitchIsBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_IsBackwardEngaged"`
	// VehicleCabinSeatRow2DriverSideSwitchIsCoolerEngaged Cooler switch for Seat heater (SingleSeat.Heating).
	VehicleCabinSeatRow2DriverSideSwitchIsCoolerEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_IsCoolerEngaged"`
	// VehicleCabinSeatRow2DriverSideSwitchIsDownEngaged Seat down switch engaged (SingleSeat.Height).
	VehicleCabinSeatRow2DriverSideSwitchIsDownEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_IsDownEngaged"`
	// VehicleCabinSeatRow2DriverSideSwitchIsForwardEngaged Seat forward switch engaged (SingleSeat.Position).
	VehicleCabinSeatRow2DriverSideSwitchIsForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_IsForwardEngaged"`
	// VehicleCabinSeatRow2DriverSideSwitchIsTiltBackwardEngaged Tilt backward switch engaged (SingleSeat.Tilt).
	VehicleCabinSeatRow2DriverSideSwitchIsTiltBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_IsTiltBackwardEngaged"`
	// VehicleCabinSeatRow2DriverSideSwitchIsTiltForwardEngaged Tilt forward switch engaged (SingleSeat.Tilt).
	VehicleCabinSeatRow2DriverSideSwitchIsTiltForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_IsTiltForwardEngaged"`
	// VehicleCabinSeatRow2DriverSideSwitchIsUpEngaged Seat up switch engaged (SingleSeat.Height).
	VehicleCabinSeatRow2DriverSideSwitchIsUpEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_IsUpEngaged"`
	// VehicleCabinSeatRow2DriverSideSwitchIsWarmerEngaged Warmer switch for Seat heater (SingleSeat.Heating).
	VehicleCabinSeatRow2DriverSideSwitchIsWarmerEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_IsWarmerEngaged"` 
	// VehicleCabinSeatRow2DriverSideSwitchMassageIsDecreaseEngaged Decrease massage level switch engaged (SingleSeat.Massage).
	VehicleCabinSeatRow2DriverSideSwitchMassageIsDecreaseEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Massage_IsDecreaseEngaged"`
	// VehicleCabinSeatRow2DriverSideSwitchMassageIsIncreaseEngaged Increase massage level switch engaged (SingleSeat.Massage).
	VehicleCabinSeatRow2DriverSideSwitchMassageIsIncreaseEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Massage_IsIncreaseEngaged"` 
	// VehicleCabinSeatRow2DriverSideSwitchSeatingIsBackwardEngaged Is switch to decrease seating length engaged (SingleSeat.Seating.Length).
	VehicleCabinSeatRow2DriverSideSwitchSeatingIsBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Seating_IsBackwardEngaged"`
	// VehicleCabinSeatRow2DriverSideSwitchSeatingIsForwardEngaged Is switch to increase seating length engaged (SingleSeat.Seating.Length).
	VehicleCabinSeatRow2DriverSideSwitchSeatingIsForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Switch_Seating_IsForwardEngaged"`
	// VehicleCabinSeatRow2DriverSideTilt Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.
	VehicleCabinSeatRow2DriverSideTilt float32 `ch:"Vehicle_Cabin_Seat_Row2_DriverSide_Tilt"`  
	// VehicleCabinSeatRow2MiddleAirbagIsDeployed Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.
	VehicleCabinSeatRow2MiddleAirbagIsDeployed bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Airbag_IsDeployed"`  
	// VehicleCabinSeatRow2MiddleBackrestLumbarHeight Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.
	VehicleCabinSeatRow2MiddleBackrestLumbarHeight uint8 `ch:"Vehicle_Cabin_Seat_Row2_Middle_Backrest_Lumbar_Height"`
	// VehicleCabinSeatRow2MiddleBackrestLumbarSupport Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.
	VehicleCabinSeatRow2MiddleBackrestLumbarSupport float32 `ch:"Vehicle_Cabin_Seat_Row2_Middle_Backrest_Lumbar_Support"`
	// VehicleCabinSeatRow2MiddleBackrestRecline Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.
	VehicleCabinSeatRow2MiddleBackrestRecline float32 `ch:"Vehicle_Cabin_Seat_Row2_Middle_Backrest_Recline"` 
	// VehicleCabinSeatRow2MiddleBackrestSideBolsterSupport Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.
	VehicleCabinSeatRow2MiddleBackrestSideBolsterSupport float32 `ch:"Vehicle_Cabin_Seat_Row2_Middle_Backrest_SideBolster_Support"` 
	// VehicleCabinSeatRow2MiddleHeadrestAngle Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.
	VehicleCabinSeatRow2MiddleHeadrestAngle float32 `ch:"Vehicle_Cabin_Seat_Row2_Middle_Headrest_Angle"`
	// VehicleCabinSeatRow2MiddleHeadrestHeight Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.
	VehicleCabinSeatRow2MiddleHeadrestHeight uint8 `ch:"Vehicle_Cabin_Seat_Row2_Middle_Headrest_Height"`
	// VehicleCabinSeatRow2MiddleHeating Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat.
	VehicleCabinSeatRow2MiddleHeating int8 `ch:"Vehicle_Cabin_Seat_Row2_Middle_Heating"`
	// VehicleCabinSeatRow2MiddleHeatingCooling Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.
	VehicleCabinSeatRow2MiddleHeatingCooling int8 `ch:"Vehicle_Cabin_Seat_Row2_Middle_HeatingCooling"`
	// VehicleCabinSeatRow2MiddleHeight Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.
	VehicleCabinSeatRow2MiddleHeight uint16 `ch:"Vehicle_Cabin_Seat_Row2_Middle_Height"`
	// VehicleCabinSeatRow2MiddleIsBelted Is the belt engaged.
	VehicleCabinSeatRow2MiddleIsBelted bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_IsBelted"`
	// VehicleCabinSeatRow2MiddleIsOccupied Does the seat have a passenger in it.
	VehicleCabinSeatRow2MiddleIsOccupied bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_IsOccupied"`
	// VehicleCabinSeatRow2MiddleMassage Seat massage level. 0 = off. 100 = max massage.
	VehicleCabinSeatRow2MiddleMassage uint8 `ch:"Vehicle_Cabin_Seat_Row2_Middle_Massage"`  
	// VehicleCabinSeatRow2MiddleOccupantIdentifierIssuer Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.
	VehicleCabinSeatRow2MiddleOccupantIdentifierIssuer string `ch:"Vehicle_Cabin_Seat_Row2_Middle_Occupant_Identifier_Issuer"`
	// VehicleCabinSeatRow2MiddleOccupantIdentifierSubject Subject for the authentication of the occupant e.g. UserID 7331677.
	VehicleCabinSeatRow2MiddleOccupantIdentifierSubject string `ch:"Vehicle_Cabin_Seat_Row2_Middle_Occupant_Identifier_Subject"`
	// VehicleCabinSeatRow2MiddlePosition Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.
	VehicleCabinSeatRow2MiddlePosition uint16 `ch:"Vehicle_Cabin_Seat_Row2_Middle_Position"`
	// VehicleCabinSeatRow2MiddleSeatBeltHeight Seat belt position on vehicle z-axis. Position is relative within available movable range of the seat belt. 0 = Lowermost position supported.
	VehicleCabinSeatRow2MiddleSeatBeltHeight uint16 `ch:"Vehicle_Cabin_Seat_Row2_Middle_SeatBeltHeight"` 
	// VehicleCabinSeatRow2MiddleSeatingLength Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).
	VehicleCabinSeatRow2MiddleSeatingLength uint16 `ch:"Vehicle_Cabin_Seat_Row2_Middle_Seating_Length"`  
	// VehicleCabinSeatRow2MiddleSwitchBackrestIsReclineBackwardEngaged Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).
	VehicleCabinSeatRow2MiddleSwitchBackrestIsReclineBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_Backrest_IsReclineBackwardEngaged"`
	// VehicleCabinSeatRow2MiddleSwitchBackrestIsReclineForwardEngaged Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).
	VehicleCabinSeatRow2MiddleSwitchBackrestIsReclineForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_Backrest_IsReclineForwardEngaged"` 
	// VehicleCabinSeatRow2MiddleSwitchBackrestLumbarIsDownEngaged Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow2MiddleSwitchBackrestLumbarIsDownEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_Backrest_Lumbar_IsDownEngaged"`
	// VehicleCabinSeatRow2MiddleSwitchBackrestLumbarIsLessSupportEngaged Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow2MiddleSwitchBackrestLumbarIsLessSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_Backrest_Lumbar_IsLessSupportEngaged"`
	// VehicleCabinSeatRow2MiddleSwitchBackrestLumbarIsMoreSupportEngaged Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow2MiddleSwitchBackrestLumbarIsMoreSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_Backrest_Lumbar_IsMoreSupportEngaged"`
	// VehicleCabinSeatRow2MiddleSwitchBackrestLumbarIsUpEngaged Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow2MiddleSwitchBackrestLumbarIsUpEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_Backrest_Lumbar_IsUpEngaged"` 
	// VehicleCabinSeatRow2MiddleSwitchBackrestSideBolsterIsLessSupportEngaged Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	VehicleCabinSeatRow2MiddleSwitchBackrestSideBolsterIsLessSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_Backrest_SideBolster_IsLessSupportEngaged"`
	// VehicleCabinSeatRow2MiddleSwitchBackrestSideBolsterIsMoreSupportEngaged Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	VehicleCabinSeatRow2MiddleSwitchBackrestSideBolsterIsMoreSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_Backrest_SideBolster_IsMoreSupportEngaged"` 
	// VehicleCabinSeatRow2MiddleSwitchHeadrestIsBackwardEngaged Head rest backward switch engaged (SingleSeat.Headrest.Angle).
	VehicleCabinSeatRow2MiddleSwitchHeadrestIsBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_Headrest_IsBackwardEngaged"`
	// VehicleCabinSeatRow2MiddleSwitchHeadrestIsDownEngaged Head rest down switch engaged (SingleSeat.Headrest.Height).
	VehicleCabinSeatRow2MiddleSwitchHeadrestIsDownEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_Headrest_IsDownEngaged"`
	// VehicleCabinSeatRow2MiddleSwitchHeadrestIsForwardEngaged Head rest forward switch engaged (SingleSeat.Headrest.Angle).
	VehicleCabinSeatRow2MiddleSwitchHeadrestIsForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_Headrest_IsForwardEngaged"`
	// VehicleCabinSeatRow2MiddleSwitchHeadrestIsUpEngaged Head rest up switch engaged (SingleSeat.Headrest.Height).
	VehicleCabinSeatRow2MiddleSwitchHeadrestIsUpEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_Headrest_IsUpEngaged"`
	// VehicleCabinSeatRow2MiddleSwitchIsBackwardEngaged Seat backward switch engaged (SingleSeat.Position).
	VehicleCabinSeatRow2MiddleSwitchIsBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_IsBackwardEngaged"`
	// VehicleCabinSeatRow2MiddleSwitchIsCoolerEngaged Cooler switch for Seat heater (SingleSeat.Heating).
	VehicleCabinSeatRow2MiddleSwitchIsCoolerEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_IsCoolerEngaged"`
	// VehicleCabinSeatRow2MiddleSwitchIsDownEngaged Seat down switch engaged (SingleSeat.Height).
	VehicleCabinSeatRow2MiddleSwitchIsDownEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_IsDownEngaged"`
	// VehicleCabinSeatRow2MiddleSwitchIsForwardEngaged Seat forward switch engaged (SingleSeat.Position).
	VehicleCabinSeatRow2MiddleSwitchIsForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_IsForwardEngaged"`
	// VehicleCabinSeatRow2MiddleSwitchIsTiltBackwardEngaged Tilt backward switch engaged (SingleSeat.Tilt).
	VehicleCabinSeatRow2MiddleSwitchIsTiltBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_IsTiltBackwardEngaged"`
	// VehicleCabinSeatRow2MiddleSwitchIsTiltForwardEngaged Tilt forward switch engaged (SingleSeat.Tilt).
	VehicleCabinSeatRow2MiddleSwitchIsTiltForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_IsTiltForwardEngaged"`
	// VehicleCabinSeatRow2MiddleSwitchIsUpEngaged Seat up switch engaged (SingleSeat.Height).
	VehicleCabinSeatRow2MiddleSwitchIsUpEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_IsUpEngaged"`
	// VehicleCabinSeatRow2MiddleSwitchIsWarmerEngaged Warmer switch for Seat heater (SingleSeat.Heating).
	VehicleCabinSeatRow2MiddleSwitchIsWarmerEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_IsWarmerEngaged"` 
	// VehicleCabinSeatRow2MiddleSwitchMassageIsDecreaseEngaged Decrease massage level switch engaged (SingleSeat.Massage).
	VehicleCabinSeatRow2MiddleSwitchMassageIsDecreaseEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_Massage_IsDecreaseEngaged"`
	// VehicleCabinSeatRow2MiddleSwitchMassageIsIncreaseEngaged Increase massage level switch engaged (SingleSeat.Massage).
	VehicleCabinSeatRow2MiddleSwitchMassageIsIncreaseEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_Massage_IsIncreaseEngaged"` 
	// VehicleCabinSeatRow2MiddleSwitchSeatingIsBackwardEngaged Is switch to decrease seating length engaged (SingleSeat.Seating.Length).
	VehicleCabinSeatRow2MiddleSwitchSeatingIsBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_Seating_IsBackwardEngaged"`
	// VehicleCabinSeatRow2MiddleSwitchSeatingIsForwardEngaged Is switch to increase seating length engaged (SingleSeat.Seating.Length).
	VehicleCabinSeatRow2MiddleSwitchSeatingIsForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_Middle_Switch_Seating_IsForwardEngaged"`
	// VehicleCabinSeatRow2MiddleTilt Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.
	VehicleCabinSeatRow2MiddleTilt float32 `ch:"Vehicle_Cabin_Seat_Row2_Middle_Tilt"`  
	// VehicleCabinSeatRow2PassengerSideAirbagIsDeployed Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.
	VehicleCabinSeatRow2PassengerSideAirbagIsDeployed bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Airbag_IsDeployed"`  
	// VehicleCabinSeatRow2PassengerSideBackrestLumbarHeight Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.
	VehicleCabinSeatRow2PassengerSideBackrestLumbarHeight uint8 `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Backrest_Lumbar_Height"`
	// VehicleCabinSeatRow2PassengerSideBackrestLumbarSupport Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.
	VehicleCabinSeatRow2PassengerSideBackrestLumbarSupport float32 `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Backrest_Lumbar_Support"`
	// VehicleCabinSeatRow2PassengerSideBackrestRecline Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.
	VehicleCabinSeatRow2PassengerSideBackrestRecline float32 `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Backrest_Recline"` 
	// VehicleCabinSeatRow2PassengerSideBackrestSideBolsterSupport Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.
	VehicleCabinSeatRow2PassengerSideBackrestSideBolsterSupport float32 `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Backrest_SideBolster_Support"` 
	// VehicleCabinSeatRow2PassengerSideHeadrestAngle Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.
	VehicleCabinSeatRow2PassengerSideHeadrestAngle float32 `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Headrest_Angle"`
	// VehicleCabinSeatRow2PassengerSideHeadrestHeight Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.
	VehicleCabinSeatRow2PassengerSideHeadrestHeight uint8 `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Headrest_Height"`
	// VehicleCabinSeatRow2PassengerSideHeating Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat.
	VehicleCabinSeatRow2PassengerSideHeating int8 `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Heating"`
	// VehicleCabinSeatRow2PassengerSideHeatingCooling Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.
	VehicleCabinSeatRow2PassengerSideHeatingCooling int8 `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_HeatingCooling"`
	// VehicleCabinSeatRow2PassengerSideHeight Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.
	VehicleCabinSeatRow2PassengerSideHeight uint16 `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Height"`
	// VehicleCabinSeatRow2PassengerSideIsBelted Is the belt engaged.
	VehicleCabinSeatRow2PassengerSideIsBelted bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_IsBelted"`
	// VehicleCabinSeatRow2PassengerSideIsOccupied Does the seat have a passenger in it.
	VehicleCabinSeatRow2PassengerSideIsOccupied bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_IsOccupied"`
	// VehicleCabinSeatRow2PassengerSideMassage Seat massage level. 0 = off. 100 = max massage.
	VehicleCabinSeatRow2PassengerSideMassage uint8 `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Massage"`  
	// VehicleCabinSeatRow2PassengerSideOccupantIdentifierIssuer Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.
	VehicleCabinSeatRow2PassengerSideOccupantIdentifierIssuer string `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Occupant_Identifier_Issuer"`
	// VehicleCabinSeatRow2PassengerSideOccupantIdentifierSubject Subject for the authentication of the occupant e.g. UserID 7331677.
	VehicleCabinSeatRow2PassengerSideOccupantIdentifierSubject string `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Occupant_Identifier_Subject"`
	// VehicleCabinSeatRow2PassengerSidePosition Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.
	VehicleCabinSeatRow2PassengerSidePosition uint16 `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Position"`
	// VehicleCabinSeatRow2PassengerSideSeatBeltHeight Seat belt position on vehicle z-axis. Position is relative within available movable range of the seat belt. 0 = Lowermost position supported.
	VehicleCabinSeatRow2PassengerSideSeatBeltHeight uint16 `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_SeatBeltHeight"` 
	// VehicleCabinSeatRow2PassengerSideSeatingLength Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).
	VehicleCabinSeatRow2PassengerSideSeatingLength uint16 `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Seating_Length"`  
	// VehicleCabinSeatRow2PassengerSideSwitchBackrestIsReclineBackwardEngaged Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).
	VehicleCabinSeatRow2PassengerSideSwitchBackrestIsReclineBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Backrest_IsReclineBackwardEngaged"`
	// VehicleCabinSeatRow2PassengerSideSwitchBackrestIsReclineForwardEngaged Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).
	VehicleCabinSeatRow2PassengerSideSwitchBackrestIsReclineForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Backrest_IsReclineForwardEngaged"` 
	// VehicleCabinSeatRow2PassengerSideSwitchBackrestLumbarIsDownEngaged Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow2PassengerSideSwitchBackrestLumbarIsDownEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Backrest_Lumbar_IsDownEngaged"`
	// VehicleCabinSeatRow2PassengerSideSwitchBackrestLumbarIsLessSupportEngaged Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow2PassengerSideSwitchBackrestLumbarIsLessSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Backrest_Lumbar_IsLessSupportEngaged"`
	// VehicleCabinSeatRow2PassengerSideSwitchBackrestLumbarIsMoreSupportEngaged Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow2PassengerSideSwitchBackrestLumbarIsMoreSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Backrest_Lumbar_IsMoreSupportEngaged"`
	// VehicleCabinSeatRow2PassengerSideSwitchBackrestLumbarIsUpEngaged Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).
	VehicleCabinSeatRow2PassengerSideSwitchBackrestLumbarIsUpEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Backrest_Lumbar_IsUpEngaged"` 
	// VehicleCabinSeatRow2PassengerSideSwitchBackrestSideBolsterIsLessSupportEngaged Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	VehicleCabinSeatRow2PassengerSideSwitchBackrestSideBolsterIsLessSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Backrest_SideBolster_IsLessSupportEngaged"`
	// VehicleCabinSeatRow2PassengerSideSwitchBackrestSideBolsterIsMoreSupportEngaged Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).
	VehicleCabinSeatRow2PassengerSideSwitchBackrestSideBolsterIsMoreSupportEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Backrest_SideBolster_IsMoreSupportEngaged"` 
	// VehicleCabinSeatRow2PassengerSideSwitchHeadrestIsBackwardEngaged Head rest backward switch engaged (SingleSeat.Headrest.Angle).
	VehicleCabinSeatRow2PassengerSideSwitchHeadrestIsBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Headrest_IsBackwardEngaged"`
	// VehicleCabinSeatRow2PassengerSideSwitchHeadrestIsDownEngaged Head rest down switch engaged (SingleSeat.Headrest.Height).
	VehicleCabinSeatRow2PassengerSideSwitchHeadrestIsDownEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Headrest_IsDownEngaged"`
	// VehicleCabinSeatRow2PassengerSideSwitchHeadrestIsForwardEngaged Head rest forward switch engaged (SingleSeat.Headrest.Angle).
	VehicleCabinSeatRow2PassengerSideSwitchHeadrestIsForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Headrest_IsForwardEngaged"`
	// VehicleCabinSeatRow2PassengerSideSwitchHeadrestIsUpEngaged Head rest up switch engaged (SingleSeat.Headrest.Height).
	VehicleCabinSeatRow2PassengerSideSwitchHeadrestIsUpEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Headrest_IsUpEngaged"`
	// VehicleCabinSeatRow2PassengerSideSwitchIsBackwardEngaged Seat backward switch engaged (SingleSeat.Position).
	VehicleCabinSeatRow2PassengerSideSwitchIsBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_IsBackwardEngaged"`
	// VehicleCabinSeatRow2PassengerSideSwitchIsCoolerEngaged Cooler switch for Seat heater (SingleSeat.Heating).
	VehicleCabinSeatRow2PassengerSideSwitchIsCoolerEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_IsCoolerEngaged"`
	// VehicleCabinSeatRow2PassengerSideSwitchIsDownEngaged Seat down switch engaged (SingleSeat.Height).
	VehicleCabinSeatRow2PassengerSideSwitchIsDownEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_IsDownEngaged"`
	// VehicleCabinSeatRow2PassengerSideSwitchIsForwardEngaged Seat forward switch engaged (SingleSeat.Position).
	VehicleCabinSeatRow2PassengerSideSwitchIsForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_IsForwardEngaged"`
	// VehicleCabinSeatRow2PassengerSideSwitchIsTiltBackwardEngaged Tilt backward switch engaged (SingleSeat.Tilt).
	VehicleCabinSeatRow2PassengerSideSwitchIsTiltBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_IsTiltBackwardEngaged"`
	// VehicleCabinSeatRow2PassengerSideSwitchIsTiltForwardEngaged Tilt forward switch engaged (SingleSeat.Tilt).
	VehicleCabinSeatRow2PassengerSideSwitchIsTiltForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_IsTiltForwardEngaged"`
	// VehicleCabinSeatRow2PassengerSideSwitchIsUpEngaged Seat up switch engaged (SingleSeat.Height).
	VehicleCabinSeatRow2PassengerSideSwitchIsUpEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_IsUpEngaged"`
	// VehicleCabinSeatRow2PassengerSideSwitchIsWarmerEngaged Warmer switch for Seat heater (SingleSeat.Heating).
	VehicleCabinSeatRow2PassengerSideSwitchIsWarmerEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_IsWarmerEngaged"` 
	// VehicleCabinSeatRow2PassengerSideSwitchMassageIsDecreaseEngaged Decrease massage level switch engaged (SingleSeat.Massage).
	VehicleCabinSeatRow2PassengerSideSwitchMassageIsDecreaseEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Massage_IsDecreaseEngaged"`
	// VehicleCabinSeatRow2PassengerSideSwitchMassageIsIncreaseEngaged Increase massage level switch engaged (SingleSeat.Massage).
	VehicleCabinSeatRow2PassengerSideSwitchMassageIsIncreaseEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Massage_IsIncreaseEngaged"` 
	// VehicleCabinSeatRow2PassengerSideSwitchSeatingIsBackwardEngaged Is switch to decrease seating length engaged (SingleSeat.Seating.Length).
	VehicleCabinSeatRow2PassengerSideSwitchSeatingIsBackwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Seating_IsBackwardEngaged"`
	// VehicleCabinSeatRow2PassengerSideSwitchSeatingIsForwardEngaged Is switch to increase seating length engaged (SingleSeat.Seating.Length).
	VehicleCabinSeatRow2PassengerSideSwitchSeatingIsForwardEngaged bool `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Switch_Seating_IsForwardEngaged"`
	// VehicleCabinSeatRow2PassengerSideTilt Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.
	VehicleCabinSeatRow2PassengerSideTilt float32 `ch:"Vehicle_Cabin_Seat_Row2_PassengerSide_Tilt"`
	// VehicleCabinSeatPosCount Number of seats across each row from the front to the rear.
	VehicleCabinSeatPosCount []uint8 `ch:"Vehicle_Cabin_SeatPosCount"`
	// VehicleCabinSeatRowCount Number of seat rows in vehicle.
	VehicleCabinSeatRowCount uint8 `ch:"Vehicle_Cabin_SeatRowCount"` 
	// VehicleCabinSunroofPosition Sunroof position. 0 = Fully closed 100 = Fully opened. -100 = Fully tilted.
	VehicleCabinSunroofPosition int8 `ch:"Vehicle_Cabin_Sunroof_Position"` 
	// VehicleCabinSunroofShadeIsOpen Is item open or closed? True = Fully or partially open. False = Fully closed.
	VehicleCabinSunroofShadeIsOpen bool `ch:"Vehicle_Cabin_Sunroof_Shade_IsOpen"`
	// VehicleCabinSunroofShadePosition Item position. 0 = Start position 100 = End position.
	VehicleCabinSunroofShadePosition uint8 `ch:"Vehicle_Cabin_Sunroof_Shade_Position"`
	// VehicleCabinSunroofShadeSwitch Switch controlling sliding action such as window, sunroof, or blind.
	VehicleCabinSunroofShadeSwitch string `ch:"Vehicle_Cabin_Sunroof_Shade_Switch"`
	// VehicleCabinSunroofSwitch Switch controlling sliding action such as window, sunroof, or shade.
	VehicleCabinSunroofSwitch string `ch:"Vehicle_Cabin_Sunroof_Switch"`
	// VehicleCargoVolume The available volume for cargo or luggage. For automobiles, this is usually the trunk volume.
	VehicleCargoVolume float32 `ch:"Vehicle_CargoVolume"`  
	// VehicleChassisAcceleratorPedalPosition Accelerator pedal position as percent. 0 = Not depressed. 100 = Fully depressed.
	VehicleChassisAcceleratorPedalPosition uint8 `ch:"Vehicle_Chassis_Accelerator_PedalPosition"`  
	// VehicleChassisAxleRow1AxleWidth The lateral distance between the wheel mounting faces, measured along the spindle axis.
	VehicleChassisAxleRow1AxleWidth uint16 `ch:"Vehicle_Chassis_Axle_Row1_AxleWidth"`
	// VehicleChassisAxleRow1SteeringAngle Single track two-axle model steering angle. Angle according to ISO 8855. Positive = degrees to the left. Negative = degrees to the right.
	VehicleChassisAxleRow1SteeringAngle float32 `ch:"Vehicle_Chassis_Axle_Row1_SteeringAngle"`
	// VehicleChassisAxleRow1TireAspectRatio Aspect ratio between tire section height and tire section width, as per ETRTO / TRA standard.
	VehicleChassisAxleRow1TireAspectRatio uint8 `ch:"Vehicle_Chassis_Axle_Row1_TireAspectRatio"`
	// VehicleChassisAxleRow1TireDiameter Outer diameter of tires, in inches, as per ETRTO / TRA standard.
	VehicleChassisAxleRow1TireDiameter float32 `ch:"Vehicle_Chassis_Axle_Row1_TireDiameter"`
	// VehicleChassisAxleRow1TireWidth Nominal section width of tires, in mm, as per ETRTO / TRA standard.
	VehicleChassisAxleRow1TireWidth uint16 `ch:"Vehicle_Chassis_Axle_Row1_TireWidth"`
	// VehicleChassisAxleRow1TrackWidth The lateral distance between the centers of the wheels, measured along the spindle, or axle axis. If there are dual rear wheels, measure from the midway points between the inner and outer tires.
	VehicleChassisAxleRow1TrackWidth uint16 `ch:"Vehicle_Chassis_Axle_Row1_TrackWidth"`
	// VehicleChassisAxleRow1TreadWidth The lateral distance between the centerlines of the base tires at ground, including camber angle. If there are dual rear wheels, measure from the midway points between the inner and outer tires.
	VehicleChassisAxleRow1TreadWidth uint16 `ch:"Vehicle_Chassis_Axle_Row1_TreadWidth"`   
	// VehicleChassisAxleRow1WheelLeftBrakeFluidLevel Brake fluid level as percent. 0 = Empty. 100 = Full.
	VehicleChassisAxleRow1WheelLeftBrakeFluidLevel uint8 `ch:"Vehicle_Chassis_Axle_Row1_Wheel_Left_Brake_FluidLevel"`
	// VehicleChassisAxleRow1WheelLeftBrakeIsBrakesWorn Brake pad wear status. True = Worn. False = Not Worn.
	VehicleChassisAxleRow1WheelLeftBrakeIsBrakesWorn bool `ch:"Vehicle_Chassis_Axle_Row1_Wheel_Left_Brake_IsBrakesWorn"`
	// VehicleChassisAxleRow1WheelLeftBrakeIsFluidLevelLow Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK.
	VehicleChassisAxleRow1WheelLeftBrakeIsFluidLevelLow bool `ch:"Vehicle_Chassis_Axle_Row1_Wheel_Left_Brake_IsFluidLevelLow"`
	// VehicleChassisAxleRow1WheelLeftBrakePadWear Brake pad wear as percent. 0 = No Wear. 100 = Worn.
	VehicleChassisAxleRow1WheelLeftBrakePadWear uint8 `ch:"Vehicle_Chassis_Axle_Row1_Wheel_Left_Brake_PadWear"`
	// VehicleChassisAxleRow1WheelLeftSpeed Rotational speed of a vehicle's wheel.
	VehicleChassisAxleRow1WheelLeftSpeed float32 `ch:"Vehicle_Chassis_Axle_Row1_Wheel_Left_Speed"` 
	// VehicleChassisAxleRow1WheelLeftTireIsPressureLow Tire Pressure Status. True = Low tire pressure. False = Good tire pressure.
	VehicleChassisAxleRow1WheelLeftTireIsPressureLow bool `ch:"Vehicle_Chassis_Axle_Row1_Wheel_Left_Tire_IsPressureLow"`
	// VehicleChassisAxleRow1WheelLeftTirePressure Tire pressure in kilo-Pascal.
	VehicleChassisAxleRow1WheelLeftTirePressure uint16 `ch:"Vehicle_Chassis_Axle_Row1_Wheel_Left_Tire_Pressure"`
	// VehicleChassisAxleRow1WheelLeftTireTemperature Tire temperature in Celsius.
	VehicleChassisAxleRow1WheelLeftTireTemperature float32 `ch:"Vehicle_Chassis_Axle_Row1_Wheel_Left_Tire_Temperature"`  
	// VehicleChassisAxleRow1WheelRightBrakeFluidLevel Brake fluid level as percent. 0 = Empty. 100 = Full.
	VehicleChassisAxleRow1WheelRightBrakeFluidLevel uint8 `ch:"Vehicle_Chassis_Axle_Row1_Wheel_Right_Brake_FluidLevel"`
	// VehicleChassisAxleRow1WheelRightBrakeIsBrakesWorn Brake pad wear status. True = Worn. False = Not Worn.
	VehicleChassisAxleRow1WheelRightBrakeIsBrakesWorn bool `ch:"Vehicle_Chassis_Axle_Row1_Wheel_Right_Brake_IsBrakesWorn"`
	// VehicleChassisAxleRow1WheelRightBrakeIsFluidLevelLow Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK.
	VehicleChassisAxleRow1WheelRightBrakeIsFluidLevelLow bool `ch:"Vehicle_Chassis_Axle_Row1_Wheel_Right_Brake_IsFluidLevelLow"`
	// VehicleChassisAxleRow1WheelRightBrakePadWear Brake pad wear as percent. 0 = No Wear. 100 = Worn.
	VehicleChassisAxleRow1WheelRightBrakePadWear uint8 `ch:"Vehicle_Chassis_Axle_Row1_Wheel_Right_Brake_PadWear"`
	// VehicleChassisAxleRow1WheelRightSpeed Rotational speed of a vehicle's wheel.
	VehicleChassisAxleRow1WheelRightSpeed float32 `ch:"Vehicle_Chassis_Axle_Row1_Wheel_Right_Speed"` 
	// VehicleChassisAxleRow1WheelRightTireIsPressureLow Tire Pressure Status. True = Low tire pressure. False = Good tire pressure.
	VehicleChassisAxleRow1WheelRightTireIsPressureLow bool `ch:"Vehicle_Chassis_Axle_Row1_Wheel_Right_Tire_IsPressureLow"`
	// VehicleChassisAxleRow1WheelRightTirePressure Tire pressure in kilo-Pascal.
	VehicleChassisAxleRow1WheelRightTirePressure uint16 `ch:"Vehicle_Chassis_Axle_Row1_Wheel_Right_Tire_Pressure"`
	// VehicleChassisAxleRow1WheelRightTireTemperature Tire temperature in Celsius.
	VehicleChassisAxleRow1WheelRightTireTemperature float32 `ch:"Vehicle_Chassis_Axle_Row1_Wheel_Right_Tire_Temperature"`
	// VehicleChassisAxleRow1WheelCount Number of wheels on the axle
	VehicleChassisAxleRow1WheelCount uint8 `ch:"Vehicle_Chassis_Axle_Row1_WheelCount"`
	// VehicleChassisAxleRow1WheelDiameter Diameter of wheels (rims without tires), in inches, as per ETRTO / TRA standard.
	VehicleChassisAxleRow1WheelDiameter float32 `ch:"Vehicle_Chassis_Axle_Row1_WheelDiameter"`
	// VehicleChassisAxleRow1WheelWidth Width of wheels (rims without tires), in inches, as per ETRTO / TRA standard.
	VehicleChassisAxleRow1WheelWidth float32 `ch:"Vehicle_Chassis_Axle_Row1_WheelWidth"` 
	// VehicleChassisAxleRow2AxleWidth The lateral distance between the wheel mounting faces, measured along the spindle axis.
	VehicleChassisAxleRow2AxleWidth uint16 `ch:"Vehicle_Chassis_Axle_Row2_AxleWidth"`
	// VehicleChassisAxleRow2SteeringAngle Single track two-axle model steering angle. Angle according to ISO 8855. Positive = degrees to the left. Negative = degrees to the right.
	VehicleChassisAxleRow2SteeringAngle float32 `ch:"Vehicle_Chassis_Axle_Row2_SteeringAngle"`
	// VehicleChassisAxleRow2TireAspectRatio Aspect ratio between tire section height and tire section width, as per ETRTO / TRA standard.
	VehicleChassisAxleRow2TireAspectRatio uint8 `ch:"Vehicle_Chassis_Axle_Row2_TireAspectRatio"`
	// VehicleChassisAxleRow2TireDiameter Outer diameter of tires, in inches, as per ETRTO / TRA standard.
	VehicleChassisAxleRow2TireDiameter float32 `ch:"Vehicle_Chassis_Axle_Row2_TireDiameter"`
	// VehicleChassisAxleRow2TireWidth Nominal section width of tires, in mm, as per ETRTO / TRA standard.
	VehicleChassisAxleRow2TireWidth uint16 `ch:"Vehicle_Chassis_Axle_Row2_TireWidth"`
	// VehicleChassisAxleRow2TrackWidth The lateral distance between the centers of the wheels, measured along the spindle, or axle axis. If there are dual rear wheels, measure from the midway points between the inner and outer tires.
	VehicleChassisAxleRow2TrackWidth uint16 `ch:"Vehicle_Chassis_Axle_Row2_TrackWidth"`
	// VehicleChassisAxleRow2TreadWidth The lateral distance between the centerlines of the base tires at ground, including camber angle. If there are dual rear wheels, measure from the midway points between the inner and outer tires.
	VehicleChassisAxleRow2TreadWidth uint16 `ch:"Vehicle_Chassis_Axle_Row2_TreadWidth"`   
	// VehicleChassisAxleRow2WheelLeftBrakeFluidLevel Brake fluid level as percent. 0 = Empty. 100 = Full.
	VehicleChassisAxleRow2WheelLeftBrakeFluidLevel uint8 `ch:"Vehicle_Chassis_Axle_Row2_Wheel_Left_Brake_FluidLevel"`
	// VehicleChassisAxleRow2WheelLeftBrakeIsBrakesWorn Brake pad wear status. True = Worn. False = Not Worn.
	VehicleChassisAxleRow2WheelLeftBrakeIsBrakesWorn bool `ch:"Vehicle_Chassis_Axle_Row2_Wheel_Left_Brake_IsBrakesWorn"`
	// VehicleChassisAxleRow2WheelLeftBrakeIsFluidLevelLow Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK.
	VehicleChassisAxleRow2WheelLeftBrakeIsFluidLevelLow bool `ch:"Vehicle_Chassis_Axle_Row2_Wheel_Left_Brake_IsFluidLevelLow"`
	// VehicleChassisAxleRow2WheelLeftBrakePadWear Brake pad wear as percent. 0 = No Wear. 100 = Worn.
	VehicleChassisAxleRow2WheelLeftBrakePadWear uint8 `ch:"Vehicle_Chassis_Axle_Row2_Wheel_Left_Brake_PadWear"`
	// VehicleChassisAxleRow2WheelLeftSpeed Rotational speed of a vehicle's wheel.
	VehicleChassisAxleRow2WheelLeftSpeed float32 `ch:"Vehicle_Chassis_Axle_Row2_Wheel_Left_Speed"` 
	// VehicleChassisAxleRow2WheelLeftTireIsPressureLow Tire Pressure Status. True = Low tire pressure. False = Good tire pressure.
	VehicleChassisAxleRow2WheelLeftTireIsPressureLow bool `ch:"Vehicle_Chassis_Axle_Row2_Wheel_Left_Tire_IsPressureLow"`
	// VehicleChassisAxleRow2WheelLeftTirePressure Tire pressure in kilo-Pascal.
	VehicleChassisAxleRow2WheelLeftTirePressure uint16 `ch:"Vehicle_Chassis_Axle_Row2_Wheel_Left_Tire_Pressure"`
	// VehicleChassisAxleRow2WheelLeftTireTemperature Tire temperature in Celsius.
	VehicleChassisAxleRow2WheelLeftTireTemperature float32 `ch:"Vehicle_Chassis_Axle_Row2_Wheel_Left_Tire_Temperature"`  
	// VehicleChassisAxleRow2WheelRightBrakeFluidLevel Brake fluid level as percent. 0 = Empty. 100 = Full.
	VehicleChassisAxleRow2WheelRightBrakeFluidLevel uint8 `ch:"Vehicle_Chassis_Axle_Row2_Wheel_Right_Brake_FluidLevel"`
	// VehicleChassisAxleRow2WheelRightBrakeIsBrakesWorn Brake pad wear status. True = Worn. False = Not Worn.
	VehicleChassisAxleRow2WheelRightBrakeIsBrakesWorn bool `ch:"Vehicle_Chassis_Axle_Row2_Wheel_Right_Brake_IsBrakesWorn"`
	// VehicleChassisAxleRow2WheelRightBrakeIsFluidLevelLow Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK.
	VehicleChassisAxleRow2WheelRightBrakeIsFluidLevelLow bool `ch:"Vehicle_Chassis_Axle_Row2_Wheel_Right_Brake_IsFluidLevelLow"`
	// VehicleChassisAxleRow2WheelRightBrakePadWear Brake pad wear as percent. 0 = No Wear. 100 = Worn.
	VehicleChassisAxleRow2WheelRightBrakePadWear uint8 `ch:"Vehicle_Chassis_Axle_Row2_Wheel_Right_Brake_PadWear"`
	// VehicleChassisAxleRow2WheelRightSpeed Rotational speed of a vehicle's wheel.
	VehicleChassisAxleRow2WheelRightSpeed float32 `ch:"Vehicle_Chassis_Axle_Row2_Wheel_Right_Speed"` 
	// VehicleChassisAxleRow2WheelRightTireIsPressureLow Tire Pressure Status. True = Low tire pressure. False = Good tire pressure.
	VehicleChassisAxleRow2WheelRightTireIsPressureLow bool `ch:"Vehicle_Chassis_Axle_Row2_Wheel_Right_Tire_IsPressureLow"`
	// VehicleChassisAxleRow2WheelRightTirePressure Tire pressure in kilo-Pascal.
	VehicleChassisAxleRow2WheelRightTirePressure uint16 `ch:"Vehicle_Chassis_Axle_Row2_Wheel_Right_Tire_Pressure"`
	// VehicleChassisAxleRow2WheelRightTireTemperature Tire temperature in Celsius.
	VehicleChassisAxleRow2WheelRightTireTemperature float32 `ch:"Vehicle_Chassis_Axle_Row2_Wheel_Right_Tire_Temperature"`
	// VehicleChassisAxleRow2WheelCount Number of wheels on the axle
	VehicleChassisAxleRow2WheelCount uint8 `ch:"Vehicle_Chassis_Axle_Row2_WheelCount"`
	// VehicleChassisAxleRow2WheelDiameter Diameter of wheels (rims without tires), in inches, as per ETRTO / TRA standard.
	VehicleChassisAxleRow2WheelDiameter float32 `ch:"Vehicle_Chassis_Axle_Row2_WheelDiameter"`
	// VehicleChassisAxleRow2WheelWidth Width of wheels (rims without tires), in inches, as per ETRTO / TRA standard.
	VehicleChassisAxleRow2WheelWidth float32 `ch:"Vehicle_Chassis_Axle_Row2_WheelWidth"`
	// VehicleChassisAxleCount Number of axles on the vehicle
	VehicleChassisAxleCount uint8 `ch:"Vehicle_Chassis_AxleCount"` 
	// VehicleChassisBrakeIsDriverEmergencyBrakingDetected Indicates if emergency braking initiated by driver is detected. True = Emergency braking detected. False = Emergency braking not detected.
	VehicleChassisBrakeIsDriverEmergencyBrakingDetected bool `ch:"Vehicle_Chassis_Brake_IsDriverEmergencyBrakingDetected"`
	// VehicleChassisBrakePedalPosition Brake pedal position as percent. 0 = Not depressed. 100 = Fully depressed.
	VehicleChassisBrakePedalPosition uint8 `ch:"Vehicle_Chassis_Brake_PedalPosition"` 
	// VehicleChassisParkingBrakeIsAutoApplyEnabled Indicates if parking brake will be automatically engaged when the vehicle engine is turned off.
	VehicleChassisParkingBrakeIsAutoApplyEnabled bool `ch:"Vehicle_Chassis_ParkingBrake_IsAutoApplyEnabled"`
	// VehicleChassisParkingBrakeIsEngaged Parking brake status. True = Parking Brake is Engaged. False = Parking Brake is not Engaged.
	VehicleChassisParkingBrakeIsEngaged bool `ch:"Vehicle_Chassis_ParkingBrake_IsEngaged"` 
	// VehicleChassisSteeringWheelAngle Steering wheel angle. Positive = degrees to the left. Negative = degrees to the right.
	VehicleChassisSteeringWheelAngle int16 `ch:"Vehicle_Chassis_SteeringWheel_Angle"`
	// VehicleChassisSteeringWheelExtension Steering wheel column extension from dashboard. 0 = Closest to dashboard. 100 = Furthest from dashboard.
	VehicleChassisSteeringWheelExtension uint8 `ch:"Vehicle_Chassis_SteeringWheel_Extension"`
	// VehicleChassisSteeringWheelHeatingCooling Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.
	VehicleChassisSteeringWheelHeatingCooling int8 `ch:"Vehicle_Chassis_SteeringWheel_HeatingCooling"`
	// VehicleChassisSteeringWheelTilt Steering wheel column tilt. 0 = Lowest position. 100 = Highest position.
	VehicleChassisSteeringWheelTilt uint8 `ch:"Vehicle_Chassis_SteeringWheel_Tilt"`
	// VehicleChassisWheelbase Overall wheelbase, in mm.
	VehicleChassisWheelbase uint16 `ch:"Vehicle_Chassis_Wheelbase"` 
	// VehicleConnectivityIsConnectivityAvailable Indicates if connectivity between vehicle and cloud is available. True = Connectivity is available. False = Connectivity is not available.
	VehicleConnectivityIsConnectivityAvailable bool `ch:"Vehicle_Connectivity_IsConnectivityAvailable"`
	// VehicleCurbWeight Vehicle curb weight, including all liquids and full tank of fuel, but no cargo or passengers.
	VehicleCurbWeight uint16 `ch:"Vehicle_CurbWeight"` 
	// VehicleCurrentLocationAltitude Current altitude relative to WGS 84 reference ellipsoid, as measured at the position of GNSS receiver antenna.
	VehicleCurrentLocationAltitude float64 `ch:"Vehicle_CurrentLocation_Altitude"` 
	// VehicleCurrentLocationGNSSReceiverFixType Fix status of GNSS receiver.
	VehicleCurrentLocationGNSSReceiverFixType string `ch:"Vehicle_CurrentLocation_GNSSReceiver_FixType"` 
	// VehicleCurrentLocationGNSSReceiverMountingPositionX Mounting position of GNSS receiver antenna relative to vehicle coordinate system. Axis definitions according to ISO 8855. Origin at center of (first) rear axle. Positive values = forward of rear axle. Negative values = backward of rear axle.
	VehicleCurrentLocationGNSSReceiverMountingPositionX int16 `ch:"Vehicle_CurrentLocation_GNSSReceiver_MountingPosition_X"`
	// VehicleCurrentLocationGNSSReceiverMountingPositionY Mounting position of GNSS receiver antenna relative to vehicle coordinate system. Axis definitions according to ISO 8855. Origin at center of (first) rear axle. Positive values = left of origin. Negative values = right of origin. Left/Right is as seen from driver perspective, i.e. by a person looking forward.
	VehicleCurrentLocationGNSSReceiverMountingPositionY int16 `ch:"Vehicle_CurrentLocation_GNSSReceiver_MountingPosition_Y"`
	// VehicleCurrentLocationGNSSReceiverMountingPositionZ Mounting position of GNSS receiver on Z-axis. Axis definitions according to ISO 8855. Origin at center of (first) rear axle. Positive values = above center of rear axle. Negative values = below center of rear axle.
	VehicleCurrentLocationGNSSReceiverMountingPositionZ int16 `ch:"Vehicle_CurrentLocation_GNSSReceiver_MountingPosition_Z"`
	// VehicleCurrentLocationHeading Current heading relative to geographic north. 0 = North, 90 = East, 180 = South, 270 = West.
	VehicleCurrentLocationHeading float64 `ch:"Vehicle_CurrentLocation_Heading"`
	// VehicleCurrentLocationHorizontalAccuracy Accuracy of the latitude and longitude coordinates.
	VehicleCurrentLocationHorizontalAccuracy float64 `ch:"Vehicle_CurrentLocation_HorizontalAccuracy"`
	// VehicleCurrentLocationLatitude Current latitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
	VehicleCurrentLocationLatitude float64 `ch:"Vehicle_CurrentLocation_Latitude"`
	// VehicleCurrentLocationLongitude Current longitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
	VehicleCurrentLocationLongitude float64 `ch:"Vehicle_CurrentLocation_Longitude"`
	// VehicleCurrentLocationTimestamp Timestamp from GNSS system for current location, formatted according to ISO 8601 with UTC time zone.
	VehicleCurrentLocationTimestamp string `ch:"Vehicle_CurrentLocation_Timestamp"`
	// VehicleCurrentLocationVerticalAccuracy Accuracy of altitude.
	VehicleCurrentLocationVerticalAccuracy float64 `ch:"Vehicle_CurrentLocation_VerticalAccuracy"`
	// VehicleCurrentOverallWeight Current overall Vehicle weight. Including passengers, cargo and other load inside the car.
	VehicleCurrentOverallWeight uint16 `ch:"Vehicle_CurrentOverallWeight"` 
	// VehicleDIMODefinitionID ID for the vehicles definition
	VehicleDIMODefinitionID string `ch:"Vehicle_DIMO_DefinitionID"`
	// VehicleDIMOSource where the data was sourced from
	VehicleDIMOSource string `ch:"Vehicle_DIMO_Source"`
	// VehicleDIMOSubject subjet of this vehicle data
	VehicleDIMOSubject string `ch:"Vehicle_DIMO_Subject"`
	// VehicleDIMOTimestamp timestamp of when this data was colllected
	VehicleDIMOTimestamp string `ch:"Vehicle_DIMO_Timestamp"`
	// VehicleDIMOType type of data collected
	VehicleDIMOType string `ch:"Vehicle_DIMO_Type"`
	// VehicleDIMOVehicleID unque DIMO ID for the vehicle
	VehicleDIMOVehicleID string `ch:"Vehicle_DIMO_VehicleID"` 
	// VehicleDriverAttentiveProbability Probability of attentiveness of the driver.
	VehicleDriverAttentiveProbability float32 `ch:"Vehicle_Driver_AttentiveProbability"`
	// VehicleDriverDistractionLevel Distraction level of the driver, which can be evaluated by multiple factors e.g. driving situation, acoustical or optical signals inside the cockpit, ongoing phone calls.
	VehicleDriverDistractionLevel float32 `ch:"Vehicle_Driver_DistractionLevel"`
	// VehicleDriverFatigueLevel Fatigue level of the driver, which can be evaluated by multiple factors e.g. trip time, behaviour of steering, eye status.
	VehicleDriverFatigueLevel float32 `ch:"Vehicle_Driver_FatigueLevel"`
	// VehicleDriverHeartRate Heart rate of the driver.
	VehicleDriverHeartRate uint16 `ch:"Vehicle_Driver_HeartRate"` 
	// VehicleDriverIdentifierIssuer Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.
	VehicleDriverIdentifierIssuer string `ch:"Vehicle_Driver_Identifier_Issuer"`
	// VehicleDriverIdentifierSubject Subject for the authentication of the occupant e.g. UserID 7331677.
	VehicleDriverIdentifierSubject string `ch:"Vehicle_Driver_Identifier_Subject"`
	// VehicleDriverIsEyesOnRoad Has driver the eyes on road or not?
	VehicleDriverIsEyesOnRoad bool `ch:"Vehicle_Driver_IsEyesOnRoad"`
	// VehicleDriverIsHandsOnWheel Are the driver's hands on the steering wheel or not?
	VehicleDriverIsHandsOnWheel bool `ch:"Vehicle_Driver_IsHandsOnWheel"`
	// VehicleEmissionsCO2 The CO2 emissions.
	VehicleEmissionsCO2 int16 `ch:"Vehicle_EmissionsCO2"` 
	// VehicleExteriorAirTemperature Air temperature outside the vehicle.
	VehicleExteriorAirTemperature float32 `ch:"Vehicle_Exterior_AirTemperature"`
	// VehicleExteriorHumidity Relative humidity outside the vehicle. 0 = Dry, 100 = Air fully saturated.
	VehicleExteriorHumidity float32 `ch:"Vehicle_Exterior_Humidity"`
	// VehicleExteriorLightIntensity Light intensity outside the vehicle. 0 = No light detected, 100 = Fully lit.
	VehicleExteriorLightIntensity float32 `ch:"Vehicle_Exterior_LightIntensity"`
	// VehicleGrossWeight Curb weight of vehicle, including all liquids and full tank of fuel and full load of cargo and passengers.
	VehicleGrossWeight uint16 `ch:"Vehicle_GrossWeight"`
	// VehicleHeight Overall vehicle height.
	VehicleHeight uint16 `ch:"Vehicle_Height"`
	// VehicleIsAutoPowerOptimize Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
	VehicleIsAutoPowerOptimize bool `ch:"Vehicle_IsAutoPowerOptimize"`
	// VehicleIsBrokenDown Vehicle breakdown or any similar event causing vehicle to stop on the road, that might pose a risk to other road users. True = Vehicle broken down on the road, due to e.g. engine problems, flat tire, out of gas, brake problems. False = Vehicle not broken down.
	VehicleIsBrokenDown bool `ch:"Vehicle_IsBrokenDown"`
	// VehicleIsMoving Indicates whether the vehicle is stationary or moving.
	VehicleIsMoving bool `ch:"Vehicle_IsMoving"`
	// VehicleLength Overall vehicle length.
	VehicleLength uint16 `ch:"Vehicle_Length"` 
	// VehicleLowVoltageBatteryCurrentCurrent Current current flowing in/out of the low voltage battery. Positive = Current flowing in to battery, e.g. during charging or driving. Negative = Current flowing out of battery, e.g. when using the battery to start a combustion engine.
	VehicleLowVoltageBatteryCurrentCurrent float32 `ch:"Vehicle_LowVoltageBattery_CurrentCurrent"`
	// VehicleLowVoltageBatteryCurrentVoltage Current Voltage of the low voltage battery.
	VehicleLowVoltageBatteryCurrentVoltage float32 `ch:"Vehicle_LowVoltageBattery_CurrentVoltage"`
	// VehicleLowVoltageBatteryNominalCapacity Nominal capacity of the low voltage battery.
	VehicleLowVoltageBatteryNominalCapacity uint16 `ch:"Vehicle_LowVoltageBattery_NominalCapacity"`
	// VehicleLowVoltageBatteryNominalVoltage Nominal Voltage of the battery.
	VehicleLowVoltageBatteryNominalVoltage uint16 `ch:"Vehicle_LowVoltageBattery_NominalVoltage"`
	// VehicleLowVoltageSystemState State of the supply voltage of the control units (usually 12V).
	VehicleLowVoltageSystemState string `ch:"Vehicle_LowVoltageSystemState"`
	// VehicleMaxTowBallWeight Maximum vertical weight on the tow ball of a trailer.
	VehicleMaxTowBallWeight uint16 `ch:"Vehicle_MaxTowBallWeight"`
	// VehicleMaxTowWeight Maximum weight of trailer.
	VehicleMaxTowWeight uint16 `ch:"Vehicle_MaxTowWeight"` 
	// VehicleOBDAbsoluteLoad PID 43 - Absolute load value
	VehicleOBDAbsoluteLoad float32 `ch:"Vehicle_OBD_AbsoluteLoad"`
	// VehicleOBDAcceleratorPositionD PID 49 - Accelerator pedal position D
	VehicleOBDAcceleratorPositionD float32 `ch:"Vehicle_OBD_AcceleratorPositionD"`
	// VehicleOBDAcceleratorPositionE PID 4A - Accelerator pedal position E
	VehicleOBDAcceleratorPositionE float32 `ch:"Vehicle_OBD_AcceleratorPositionE"`
	// VehicleOBDAcceleratorPositionF PID 4B - Accelerator pedal position F
	VehicleOBDAcceleratorPositionF float32 `ch:"Vehicle_OBD_AcceleratorPositionF"`
	// VehicleOBDAirStatus PID 12 - Secondary air status
	VehicleOBDAirStatus string `ch:"Vehicle_OBD_AirStatus"`
	// VehicleOBDAmbientAirTemperature PID 46 - Ambient air temperature
	VehicleOBDAmbientAirTemperature float32 `ch:"Vehicle_OBD_AmbientAirTemperature"`
	// VehicleOBDBarometricPressure PID 33 - Barometric pressure
	VehicleOBDBarometricPressure float32 `ch:"Vehicle_OBD_BarometricPressure"`  
	// VehicleOBDCatalystBank1Temperature1 PID 3C - Catalyst temperature from bank 1, sensor 1
	VehicleOBDCatalystBank1Temperature1 float32 `ch:"Vehicle_OBD_Catalyst_Bank1_Temperature1"`
	// VehicleOBDCatalystBank1Temperature2 PID 3E - Catalyst temperature from bank 1, sensor 2
	VehicleOBDCatalystBank1Temperature2 float32 `ch:"Vehicle_OBD_Catalyst_Bank1_Temperature2"` 
	// VehicleOBDCatalystBank2Temperature1 PID 3D - Catalyst temperature from bank 2, sensor 1
	VehicleOBDCatalystBank2Temperature1 float32 `ch:"Vehicle_OBD_Catalyst_Bank2_Temperature1"`
	// VehicleOBDCatalystBank2Temperature2 PID 3F - Catalyst temperature from bank 2, sensor 2
	VehicleOBDCatalystBank2Temperature2 float32 `ch:"Vehicle_OBD_Catalyst_Bank2_Temperature2"`
	// VehicleOBDCommandedEGR PID 2C - Commanded exhaust gas recirculation (EGR)
	VehicleOBDCommandedEGR float32 `ch:"Vehicle_OBD_CommandedEGR"`
	// VehicleOBDCommandedEVAP PID 2E - Commanded evaporative purge (EVAP) valve
	VehicleOBDCommandedEVAP float32 `ch:"Vehicle_OBD_CommandedEVAP"`
	// VehicleOBDCommandedEquivalenceRatio PID 44 - Commanded equivalence ratio
	VehicleOBDCommandedEquivalenceRatio float32 `ch:"Vehicle_OBD_CommandedEquivalenceRatio"`
	// VehicleOBDControlModuleVoltage PID 42 - Control module voltage
	VehicleOBDControlModuleVoltage float32 `ch:"Vehicle_OBD_ControlModuleVoltage"`
	// VehicleOBDCoolantTemperature PID 05 - Coolant temperature
	VehicleOBDCoolantTemperature float32 `ch:"Vehicle_OBD_CoolantTemperature"`
	// VehicleOBDDTCList List of currently active DTCs formatted according OBD II (SAE-J2012DA_201812) standard ([P|C|B|U]XXXXX )
	VehicleOBDDTCList []string `ch:"Vehicle_OBD_DTCList"`
	// VehicleOBDDistanceSinceDTCClear PID 31 - Distance traveled since codes cleared
	VehicleOBDDistanceSinceDTCClear float32 `ch:"Vehicle_OBD_DistanceSinceDTCClear"`
	// VehicleOBDDistanceWithMIL PID 21 - Distance traveled with MIL on
	VehicleOBDDistanceWithMIL float32 `ch:"Vehicle_OBD_DistanceWithMIL"` 
	// VehicleOBDDriveCycleStatusDTCCount Number of sensor Trouble Codes (DTC)
	VehicleOBDDriveCycleStatusDTCCount uint8 `ch:"Vehicle_OBD_DriveCycleStatus_DTCCount"`
	// VehicleOBDDriveCycleStatusIgnitionType Type of the ignition for ICE - spark = spark plug ignition, compression = self-igniting (Diesel engines)
	VehicleOBDDriveCycleStatusIgnitionType string `ch:"Vehicle_OBD_DriveCycleStatus_IgnitionType"`
	// VehicleOBDDriveCycleStatusIsMILOn Malfunction Indicator Light (MIL) - False = Off, True = On
	VehicleOBDDriveCycleStatusIsMILOn bool `ch:"Vehicle_OBD_DriveCycleStatus_IsMILOn"`
	// VehicleOBDEGRError PID 2D - Exhaust gas recirculation (EGR) error
	VehicleOBDEGRError float32 `ch:"Vehicle_OBD_EGRError"`
	// VehicleOBDEVAPVaporPressure PID 32 - Evaporative purge (EVAP) system pressure
	VehicleOBDEVAPVaporPressure float32 `ch:"Vehicle_OBD_EVAPVaporPressure"`
	// VehicleOBDEVAPVaporPressureAbsolute PID 53 - Absolute evaporative purge (EVAP) system pressure
	VehicleOBDEVAPVaporPressureAbsolute float32 `ch:"Vehicle_OBD_EVAPVaporPressureAbsolute"`
	// VehicleOBDEVAPVaporPressureAlternate PID 54 - Alternate evaporative purge (EVAP) system pressure
	VehicleOBDEVAPVaporPressureAlternate float32 `ch:"Vehicle_OBD_EVAPVaporPressureAlternate"`
	// VehicleOBDEngineLoad PID 04 - Engine load in percent - 0 = no load, 100 = full load
	VehicleOBDEngineLoad float32 `ch:"Vehicle_OBD_EngineLoad"`
	// VehicleOBDEngineSpeed PID 0C - Engine speed measured as rotations per minute
	VehicleOBDEngineSpeed float32 `ch:"Vehicle_OBD_EngineSpeed"`
	// VehicleOBDEthanolPercent PID 52 - Percentage of ethanol in the fuel
	VehicleOBDEthanolPercent float32 `ch:"Vehicle_OBD_EthanolPercent"`
	// VehicleOBDFreezeDTC PID 02 - DTC that triggered the freeze frame
	VehicleOBDFreezeDTC string `ch:"Vehicle_OBD_FreezeDTC"`
	// VehicleOBDFuelInjectionTiming PID 5D - Fuel injection timing
	VehicleOBDFuelInjectionTiming float32 `ch:"Vehicle_OBD_FuelInjectionTiming"`
	// VehicleOBDFuelLevel PID 2F - Fuel level in the fuel tank
	VehicleOBDFuelLevel float32 `ch:"Vehicle_OBD_FuelLevel"`
	// VehicleOBDFuelPressure PID 0A - Fuel pressure
	VehicleOBDFuelPressure float32 `ch:"Vehicle_OBD_FuelPressure"`
	// VehicleOBDFuelRailPressureAbsolute PID 59 - Absolute fuel rail pressure
	VehicleOBDFuelRailPressureAbsolute float32 `ch:"Vehicle_OBD_FuelRailPressureAbsolute"`
	// VehicleOBDFuelRailPressureDirect PID 23 - Fuel rail pressure direct inject
	VehicleOBDFuelRailPressureDirect float32 `ch:"Vehicle_OBD_FuelRailPressureDirect"`
	// VehicleOBDFuelRailPressureVac PID 22 - Fuel rail pressure relative to vacuum
	VehicleOBDFuelRailPressureVac float32 `ch:"Vehicle_OBD_FuelRailPressureVac"`
	// VehicleOBDFuelRate PID 5E - Engine fuel rate
	VehicleOBDFuelRate float32 `ch:"Vehicle_OBD_FuelRate"`
	// VehicleOBDFuelStatus PID 03 - Fuel status
	VehicleOBDFuelStatus string `ch:"Vehicle_OBD_FuelStatus"`
	// VehicleOBDFuelType PID 51 - Fuel type
	VehicleOBDFuelType uint8 `ch:"Vehicle_OBD_FuelType"`
	// VehicleOBDHybridBatteryRemaining PID 5B - Remaining life of hybrid battery
	VehicleOBDHybridBatteryRemaining float32 `ch:"Vehicle_OBD_HybridBatteryRemaining"`
	// VehicleOBDIntakeTemp PID 0F - Intake temperature
	VehicleOBDIntakeTemp float32 `ch:"Vehicle_OBD_IntakeTemp"`
	// VehicleOBDIsPTOActive PID 1E - Auxiliary input status (power take off)
	VehicleOBDIsPTOActive bool `ch:"Vehicle_OBD_IsPTOActive"`
	// VehicleOBDLongTermFuelTrim1 PID 07 - Long Term (learned) Fuel Trim - Bank 1 - negative percent leaner, positive percent richer
	VehicleOBDLongTermFuelTrim1 float32 `ch:"Vehicle_OBD_LongTermFuelTrim1"`
	// VehicleOBDLongTermFuelTrim2 PID 09 - Long Term (learned) Fuel Trim - Bank 2 - negative percent leaner, positive percent richer
	VehicleOBDLongTermFuelTrim2 float32 `ch:"Vehicle_OBD_LongTermFuelTrim2"`
	// VehicleOBDLongTermO2Trim1 PID 56 (byte A) - Long term secondary O2 trim - Bank 1
	VehicleOBDLongTermO2Trim1 float32 `ch:"Vehicle_OBD_LongTermO2Trim1"`
	// VehicleOBDLongTermO2Trim2 PID 58 (byte A) - Long term secondary O2 trim - Bank 2
	VehicleOBDLongTermO2Trim2 float32 `ch:"Vehicle_OBD_LongTermO2Trim2"`
	// VehicleOBDLongTermO2Trim3 PID 56 (byte B) - Long term secondary O2 trim - Bank 3
	VehicleOBDLongTermO2Trim3 float32 `ch:"Vehicle_OBD_LongTermO2Trim3"`
	// VehicleOBDLongTermO2Trim4 PID 58 (byte B) - Long term secondary O2 trim - Bank 4
	VehicleOBDLongTermO2Trim4 float32 `ch:"Vehicle_OBD_LongTermO2Trim4"`
	// VehicleOBDMAF PID 10 - Grams of air drawn into engine per second
	VehicleOBDMAF float32 `ch:"Vehicle_OBD_MAF"`
	// VehicleOBDMAP PID 0B - Intake manifold pressure
	VehicleOBDMAP float32 `ch:"Vehicle_OBD_MAP"`
	// VehicleOBDMaxMAF PID 50 - Maximum flow for mass air flow sensor
	VehicleOBDMaxMAF float32 `ch:"Vehicle_OBD_MaxMAF"`  
	// VehicleOBDO2Sensor1ShortTermFuelTrim PID 1x (byte B) - Short term fuel trim
	VehicleOBDO2Sensor1ShortTermFuelTrim float32 `ch:"Vehicle_OBD_O2_Sensor1_ShortTermFuelTrim"`
	// VehicleOBDO2Sensor1Voltage PID 1x (byte A) - Sensor voltage
	VehicleOBDO2Sensor1Voltage float32 `ch:"Vehicle_OBD_O2_Sensor1_Voltage"` 
	// VehicleOBDO2Sensor2ShortTermFuelTrim PID 1x (byte B) - Short term fuel trim
	VehicleOBDO2Sensor2ShortTermFuelTrim float32 `ch:"Vehicle_OBD_O2_Sensor2_ShortTermFuelTrim"`
	// VehicleOBDO2Sensor2Voltage PID 1x (byte A) - Sensor voltage
	VehicleOBDO2Sensor2Voltage float32 `ch:"Vehicle_OBD_O2_Sensor2_Voltage"` 
	// VehicleOBDO2Sensor3ShortTermFuelTrim PID 1x (byte B) - Short term fuel trim
	VehicleOBDO2Sensor3ShortTermFuelTrim float32 `ch:"Vehicle_OBD_O2_Sensor3_ShortTermFuelTrim"`
	// VehicleOBDO2Sensor3Voltage PID 1x (byte A) - Sensor voltage
	VehicleOBDO2Sensor3Voltage float32 `ch:"Vehicle_OBD_O2_Sensor3_Voltage"` 
	// VehicleOBDO2Sensor4ShortTermFuelTrim PID 1x (byte B) - Short term fuel trim
	VehicleOBDO2Sensor4ShortTermFuelTrim float32 `ch:"Vehicle_OBD_O2_Sensor4_ShortTermFuelTrim"`
	// VehicleOBDO2Sensor4Voltage PID 1x (byte A) - Sensor voltage
	VehicleOBDO2Sensor4Voltage float32 `ch:"Vehicle_OBD_O2_Sensor4_Voltage"` 
	// VehicleOBDO2Sensor5ShortTermFuelTrim PID 1x (byte B) - Short term fuel trim
	VehicleOBDO2Sensor5ShortTermFuelTrim float32 `ch:"Vehicle_OBD_O2_Sensor5_ShortTermFuelTrim"`
	// VehicleOBDO2Sensor5Voltage PID 1x (byte A) - Sensor voltage
	VehicleOBDO2Sensor5Voltage float32 `ch:"Vehicle_OBD_O2_Sensor5_Voltage"` 
	// VehicleOBDO2Sensor6ShortTermFuelTrim PID 1x (byte B) - Short term fuel trim
	VehicleOBDO2Sensor6ShortTermFuelTrim float32 `ch:"Vehicle_OBD_O2_Sensor6_ShortTermFuelTrim"`
	// VehicleOBDO2Sensor6Voltage PID 1x (byte A) - Sensor voltage
	VehicleOBDO2Sensor6Voltage float32 `ch:"Vehicle_OBD_O2_Sensor6_Voltage"` 
	// VehicleOBDO2Sensor7ShortTermFuelTrim PID 1x (byte B) - Short term fuel trim
	VehicleOBDO2Sensor7ShortTermFuelTrim float32 `ch:"Vehicle_OBD_O2_Sensor7_ShortTermFuelTrim"`
	// VehicleOBDO2Sensor7Voltage PID 1x (byte A) - Sensor voltage
	VehicleOBDO2Sensor7Voltage float32 `ch:"Vehicle_OBD_O2_Sensor7_Voltage"` 
	// VehicleOBDO2Sensor8ShortTermFuelTrim PID 1x (byte B) - Short term fuel trim
	VehicleOBDO2Sensor8ShortTermFuelTrim float32 `ch:"Vehicle_OBD_O2_Sensor8_ShortTermFuelTrim"`
	// VehicleOBDO2Sensor8Voltage PID 1x (byte A) - Sensor voltage
	VehicleOBDO2Sensor8Voltage float32 `ch:"Vehicle_OBD_O2_Sensor8_Voltage"`  
	// VehicleOBDO2WRSensor1Current PID 3x (byte CD) - Current for wide range/band oxygen sensor
	VehicleOBDO2WRSensor1Current float32 `ch:"Vehicle_OBD_O2WR_Sensor1_Current"`
	// VehicleOBDO2WRSensor1Lambda PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor
	VehicleOBDO2WRSensor1Lambda float32 `ch:"Vehicle_OBD_O2WR_Sensor1_Lambda"`
	// VehicleOBDO2WRSensor1Voltage PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
	VehicleOBDO2WRSensor1Voltage float32 `ch:"Vehicle_OBD_O2WR_Sensor1_Voltage"` 
	// VehicleOBDO2WRSensor2Current PID 3x (byte CD) - Current for wide range/band oxygen sensor
	VehicleOBDO2WRSensor2Current float32 `ch:"Vehicle_OBD_O2WR_Sensor2_Current"`
	// VehicleOBDO2WRSensor2Lambda PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor
	VehicleOBDO2WRSensor2Lambda float32 `ch:"Vehicle_OBD_O2WR_Sensor2_Lambda"`
	// VehicleOBDO2WRSensor2Voltage PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
	VehicleOBDO2WRSensor2Voltage float32 `ch:"Vehicle_OBD_O2WR_Sensor2_Voltage"` 
	// VehicleOBDO2WRSensor3Current PID 3x (byte CD) - Current for wide range/band oxygen sensor
	VehicleOBDO2WRSensor3Current float32 `ch:"Vehicle_OBD_O2WR_Sensor3_Current"`
	// VehicleOBDO2WRSensor3Lambda PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor
	VehicleOBDO2WRSensor3Lambda float32 `ch:"Vehicle_OBD_O2WR_Sensor3_Lambda"`
	// VehicleOBDO2WRSensor3Voltage PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
	VehicleOBDO2WRSensor3Voltage float32 `ch:"Vehicle_OBD_O2WR_Sensor3_Voltage"` 
	// VehicleOBDO2WRSensor4Current PID 3x (byte CD) - Current for wide range/band oxygen sensor
	VehicleOBDO2WRSensor4Current float32 `ch:"Vehicle_OBD_O2WR_Sensor4_Current"`
	// VehicleOBDO2WRSensor4Lambda PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor
	VehicleOBDO2WRSensor4Lambda float32 `ch:"Vehicle_OBD_O2WR_Sensor4_Lambda"`
	// VehicleOBDO2WRSensor4Voltage PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
	VehicleOBDO2WRSensor4Voltage float32 `ch:"Vehicle_OBD_O2WR_Sensor4_Voltage"` 
	// VehicleOBDO2WRSensor5Current PID 3x (byte CD) - Current for wide range/band oxygen sensor
	VehicleOBDO2WRSensor5Current float32 `ch:"Vehicle_OBD_O2WR_Sensor5_Current"`
	// VehicleOBDO2WRSensor5Lambda PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor
	VehicleOBDO2WRSensor5Lambda float32 `ch:"Vehicle_OBD_O2WR_Sensor5_Lambda"`
	// VehicleOBDO2WRSensor5Voltage PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
	VehicleOBDO2WRSensor5Voltage float32 `ch:"Vehicle_OBD_O2WR_Sensor5_Voltage"` 
	// VehicleOBDO2WRSensor6Current PID 3x (byte CD) - Current for wide range/band oxygen sensor
	VehicleOBDO2WRSensor6Current float32 `ch:"Vehicle_OBD_O2WR_Sensor6_Current"`
	// VehicleOBDO2WRSensor6Lambda PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor
	VehicleOBDO2WRSensor6Lambda float32 `ch:"Vehicle_OBD_O2WR_Sensor6_Lambda"`
	// VehicleOBDO2WRSensor6Voltage PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
	VehicleOBDO2WRSensor6Voltage float32 `ch:"Vehicle_OBD_O2WR_Sensor6_Voltage"` 
	// VehicleOBDO2WRSensor7Current PID 3x (byte CD) - Current for wide range/band oxygen sensor
	VehicleOBDO2WRSensor7Current float32 `ch:"Vehicle_OBD_O2WR_Sensor7_Current"`
	// VehicleOBDO2WRSensor7Lambda PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor
	VehicleOBDO2WRSensor7Lambda float32 `ch:"Vehicle_OBD_O2WR_Sensor7_Lambda"`
	// VehicleOBDO2WRSensor7Voltage PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
	VehicleOBDO2WRSensor7Voltage float32 `ch:"Vehicle_OBD_O2WR_Sensor7_Voltage"` 
	// VehicleOBDO2WRSensor8Current PID 3x (byte CD) - Current for wide range/band oxygen sensor
	VehicleOBDO2WRSensor8Current float32 `ch:"Vehicle_OBD_O2WR_Sensor8_Current"`
	// VehicleOBDO2WRSensor8Lambda PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor
	VehicleOBDO2WRSensor8Lambda float32 `ch:"Vehicle_OBD_O2WR_Sensor8_Lambda"`
	// VehicleOBDO2WRSensor8Voltage PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
	VehicleOBDO2WRSensor8Voltage float32 `ch:"Vehicle_OBD_O2WR_Sensor8_Voltage"`
	// VehicleOBDOBDStandards PID 1C - OBD standards this vehicle conforms to
	VehicleOBDOBDStandards uint8 `ch:"Vehicle_OBD_OBDStandards"`
	// VehicleOBDOilTemperature PID 5C - Engine oil temperature
	VehicleOBDOilTemperature float32 `ch:"Vehicle_OBD_OilTemperature"`
	// VehicleOBDOxygenSensorsIn2Banks PID 13 - Presence of oxygen sensors in 2 banks. [A0..A3] == Bank 1, Sensors 1-4. [A4..A7] == Bank 2, Sensors 1-4
	VehicleOBDOxygenSensorsIn2Banks uint8 `ch:"Vehicle_OBD_OxygenSensorsIn2Banks"`
	// VehicleOBDOxygenSensorsIn4Banks PID 1D - Presence of oxygen sensors in 4 banks. Similar to PID 13, but [A0..A7] == [B1S1, B1S2, B2S1, B2S2, B3S1, B3S2, B4S1, B4S2]
	VehicleOBDOxygenSensorsIn4Banks uint8 `ch:"Vehicle_OBD_OxygenSensorsIn4Banks"`
	// VehicleOBDPidsA PID 00 - Array of the supported PIDs 01 to 20 in Hexadecimal.
	VehicleOBDPidsA []string `ch:"Vehicle_OBD_PidsA"`
	// VehicleOBDPidsB PID 20 - Array of the supported PIDs 21 to 40 in Hexadecimal.
	VehicleOBDPidsB []string `ch:"Vehicle_OBD_PidsB"`
	// VehicleOBDPidsC PID 40 - Array of the supported PIDs 41 to 60 in Hexadecimal.
	VehicleOBDPidsC []string `ch:"Vehicle_OBD_PidsC"`
	// VehicleOBDRelativeAcceleratorPosition PID 5A - Relative accelerator pedal position
	VehicleOBDRelativeAcceleratorPosition float32 `ch:"Vehicle_OBD_RelativeAcceleratorPosition"`
	// VehicleOBDRelativeThrottlePosition PID 45 - Relative throttle position
	VehicleOBDRelativeThrottlePosition float32 `ch:"Vehicle_OBD_RelativeThrottlePosition"`
	// VehicleOBDRunTime PID 1F - Engine run time
	VehicleOBDRunTime float32 `ch:"Vehicle_OBD_RunTime"`
	// VehicleOBDRunTimeMIL PID 4D - Run time with MIL on
	VehicleOBDRunTimeMIL float32 `ch:"Vehicle_OBD_RunTimeMIL"`
	// VehicleOBDShortTermFuelTrim1 PID 06 - Short Term (immediate) Fuel Trim - Bank 1 - negative percent leaner, positive percent richer
	VehicleOBDShortTermFuelTrim1 float32 `ch:"Vehicle_OBD_ShortTermFuelTrim1"`
	// VehicleOBDShortTermFuelTrim2 PID 08 - Short Term (immediate) Fuel Trim - Bank 2 - negative percent leaner, positive percent richer
	VehicleOBDShortTermFuelTrim2 float32 `ch:"Vehicle_OBD_ShortTermFuelTrim2"`
	// VehicleOBDShortTermO2Trim1 PID 55 (byte A) - Short term secondary O2 trim - Bank 1
	VehicleOBDShortTermO2Trim1 float32 `ch:"Vehicle_OBD_ShortTermO2Trim1"`
	// VehicleOBDShortTermO2Trim2 PID 57 (byte A) - Short term secondary O2 trim - Bank 2
	VehicleOBDShortTermO2Trim2 float32 `ch:"Vehicle_OBD_ShortTermO2Trim2"`
	// VehicleOBDShortTermO2Trim3 PID 55 (byte B) - Short term secondary O2 trim - Bank 3
	VehicleOBDShortTermO2Trim3 float32 `ch:"Vehicle_OBD_ShortTermO2Trim3"`
	// VehicleOBDShortTermO2Trim4 PID 57 (byte B) - Short term secondary O2 trim - Bank 4
	VehicleOBDShortTermO2Trim4 float32 `ch:"Vehicle_OBD_ShortTermO2Trim4"`
	// VehicleOBDSpeed PID 0D - Vehicle speed
	VehicleOBDSpeed float32 `ch:"Vehicle_OBD_Speed"` 
	// VehicleOBDStatusDTCCount Number of Diagnostic Trouble Codes (DTC)
	VehicleOBDStatusDTCCount uint8 `ch:"Vehicle_OBD_Status_DTCCount"`
	// VehicleOBDStatusIgnitionType Type of the ignition for ICE - spark = spark plug ignition, compression = self-igniting (Diesel engines)
	VehicleOBDStatusIgnitionType string `ch:"Vehicle_OBD_Status_IgnitionType"`
	// VehicleOBDStatusIsMILOn Malfunction Indicator Light (MIL) False = Off, True = On
	VehicleOBDStatusIsMILOn bool `ch:"Vehicle_OBD_Status_IsMILOn"`
	// VehicleOBDThrottleActuator PID 4C - Commanded throttle actuator
	VehicleOBDThrottleActuator float32 `ch:"Vehicle_OBD_ThrottleActuator"`
	// VehicleOBDThrottlePosition PID 11 - Throttle position - 0 = closed throttle, 100 = open throttle
	VehicleOBDThrottlePosition float32 `ch:"Vehicle_OBD_ThrottlePosition"`
	// VehicleOBDThrottlePositionB PID 47 - Absolute throttle position B
	VehicleOBDThrottlePositionB float32 `ch:"Vehicle_OBD_ThrottlePositionB"`
	// VehicleOBDThrottlePositionC PID 48 - Absolute throttle position C
	VehicleOBDThrottlePositionC float32 `ch:"Vehicle_OBD_ThrottlePositionC"`
	// VehicleOBDTimeSinceDTCCleared PID 4E - Time since trouble codes cleared
	VehicleOBDTimeSinceDTCCleared float32 `ch:"Vehicle_OBD_TimeSinceDTCCleared"`
	// VehicleOBDTimingAdvance PID 0E - Time advance
	VehicleOBDTimingAdvance float32 `ch:"Vehicle_OBD_TimingAdvance"`
	// VehicleOBDWarmupsSinceDTCClear PID 30 - Number of warm-ups since codes cleared
	VehicleOBDWarmupsSinceDTCClear uint8 `ch:"Vehicle_OBD_WarmupsSinceDTCClear"`
	// VehiclePowerOptimizeLevel Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
	VehiclePowerOptimizeLevel uint8 `ch:"Vehicle_PowerOptimizeLevel"` 
	// VehiclePowertrainAccumulatedBrakingEnergy The accumulated energy from regenerative braking over lifetime.
	VehiclePowertrainAccumulatedBrakingEnergy float32 `ch:"Vehicle_Powertrain_AccumulatedBrakingEnergy"` 
	// VehiclePowertrainCombustionEngineAspirationType Type of aspiration (natural, turbocharger, supercharger etc).
	VehiclePowertrainCombustionEngineAspirationType string `ch:"Vehicle_Powertrain_CombustionEngine_AspirationType"`
	// VehiclePowertrainCombustionEngineBore Bore in millimetres.
	VehiclePowertrainCombustionEngineBore float32 `ch:"Vehicle_Powertrain_CombustionEngine_Bore"`
	// VehiclePowertrainCombustionEngineCompressionRatio Engine compression ratio, specified in the format 'X:1', e.g. '9.2:1'.
	VehiclePowertrainCombustionEngineCompressionRatio string `ch:"Vehicle_Powertrain_CombustionEngine_CompressionRatio"`
	// VehiclePowertrainCombustionEngineConfiguration Engine configuration.
	VehiclePowertrainCombustionEngineConfiguration string `ch:"Vehicle_Powertrain_CombustionEngine_Configuration"` 
	// VehiclePowertrainCombustionEngineDieselExhaustFluidCapacity Capacity in liters of the Diesel Exhaust Fluid Tank.
	VehiclePowertrainCombustionEngineDieselExhaustFluidCapacity float32 `ch:"Vehicle_Powertrain_CombustionEngine_DieselExhaustFluid_Capacity"`
	// VehiclePowertrainCombustionEngineDieselExhaustFluidIsLevelLow Indicates if the Diesel Exhaust Fluid level is low. True if level is low. Definition of low is vehicle dependent.
	VehiclePowertrainCombustionEngineDieselExhaustFluidIsLevelLow bool `ch:"Vehicle_Powertrain_CombustionEngine_DieselExhaustFluid_IsLevelLow"`
	// VehiclePowertrainCombustionEngineDieselExhaustFluidLevel Level of the Diesel Exhaust Fluid tank as percent of capacity. 0 = empty. 100 = full.
	VehiclePowertrainCombustionEngineDieselExhaustFluidLevel uint8 `ch:"Vehicle_Powertrain_CombustionEngine_DieselExhaustFluid_Level"`
	// VehiclePowertrainCombustionEngineDieselExhaustFluidRange Remaining range in meters of the Diesel Exhaust Fluid present in the vehicle.
	VehiclePowertrainCombustionEngineDieselExhaustFluidRange uint32 `ch:"Vehicle_Powertrain_CombustionEngine_DieselExhaustFluid_Range"` 
	// VehiclePowertrainCombustionEngineDieselParticulateFilterDeltaPressure Delta Pressure of Diesel Particulate Filter.
	VehiclePowertrainCombustionEngineDieselParticulateFilterDeltaPressure float32 `ch:"Vehicle_Powertrain_CombustionEngine_DieselParticulateFilter_DeltaPressure"`
	// VehiclePowertrainCombustionEngineDieselParticulateFilterInletTemperature Inlet temperature of Diesel Particulate Filter.
	VehiclePowertrainCombustionEngineDieselParticulateFilterInletTemperature float32 `ch:"Vehicle_Powertrain_CombustionEngine_DieselParticulateFilter_InletTemperature"`
	// VehiclePowertrainCombustionEngineDieselParticulateFilterOutletTemperature Outlet temperature of Diesel Particulate Filter.
	VehiclePowertrainCombustionEngineDieselParticulateFilterOutletTemperature float32 `ch:"Vehicle_Powertrain_CombustionEngine_DieselParticulateFilter_OutletTemperature"`
	// VehiclePowertrainCombustionEngineDisplacement Displacement in cubic centimetres.
	VehiclePowertrainCombustionEngineDisplacement uint16 `ch:"Vehicle_Powertrain_CombustionEngine_Displacement"`
	// VehiclePowertrainCombustionEngineECT Engine coolant temperature.
	VehiclePowertrainCombustionEngineECT float32 `ch:"Vehicle_Powertrain_CombustionEngine_ECT"`
	// VehiclePowertrainCombustionEngineEOP Engine oil pressure.
	VehiclePowertrainCombustionEngineEOP uint16 `ch:"Vehicle_Powertrain_CombustionEngine_EOP"`
	// VehiclePowertrainCombustionEngineEOT Engine oil temperature.
	VehiclePowertrainCombustionEngineEOT float32 `ch:"Vehicle_Powertrain_CombustionEngine_EOT"`
	// VehiclePowertrainCombustionEngineEngineCode Engine code designation, as specified by vehicle manufacturer.
	VehiclePowertrainCombustionEngineEngineCode string `ch:"Vehicle_Powertrain_CombustionEngine_EngineCode"`
	// VehiclePowertrainCombustionEngineEngineCoolantCapacity Engine coolant capacity in liters.
	VehiclePowertrainCombustionEngineEngineCoolantCapacity float32 `ch:"Vehicle_Powertrain_CombustionEngine_EngineCoolantCapacity"`
	// VehiclePowertrainCombustionEngineEngineHours Accumulated time during engine lifetime with 'engine speed (rpm) > 0'.
	VehiclePowertrainCombustionEngineEngineHours float32 `ch:"Vehicle_Powertrain_CombustionEngine_EngineHours"`
	// VehiclePowertrainCombustionEngineEngineOilCapacity Engine oil capacity in liters.
	VehiclePowertrainCombustionEngineEngineOilCapacity float32 `ch:"Vehicle_Powertrain_CombustionEngine_EngineOilCapacity"`
	// VehiclePowertrainCombustionEngineEngineOilLevel Engine oil level.
	VehiclePowertrainCombustionEngineEngineOilLevel string `ch:"Vehicle_Powertrain_CombustionEngine_EngineOilLevel"`
	// VehiclePowertrainCombustionEngineIdleHours Accumulated idling time during engine lifetime. Definition of idling is not standardized.
	VehiclePowertrainCombustionEngineIdleHours float32 `ch:"Vehicle_Powertrain_CombustionEngine_IdleHours"`
	// VehiclePowertrainCombustionEngineIsRunning Engine Running. True if engine is rotating (Speed > 0).
	VehiclePowertrainCombustionEngineIsRunning bool `ch:"Vehicle_Powertrain_CombustionEngine_IsRunning"`
	// VehiclePowertrainCombustionEngineMAF Grams of air drawn into engine per second.
	VehiclePowertrainCombustionEngineMAF uint16 `ch:"Vehicle_Powertrain_CombustionEngine_MAF"`
	// VehiclePowertrainCombustionEngineMAP Manifold absolute pressure possibly boosted using forced induction.
	VehiclePowertrainCombustionEngineMAP uint16 `ch:"Vehicle_Powertrain_CombustionEngine_MAP"`
	// VehiclePowertrainCombustionEngineMaxPower Peak power, in kilowatts, that engine can generate.
	VehiclePowertrainCombustionEngineMaxPower uint16 `ch:"Vehicle_Powertrain_CombustionEngine_MaxPower"`
	// VehiclePowertrainCombustionEngineMaxTorque Peak torque, in newton meter, that the engine can generate.
	VehiclePowertrainCombustionEngineMaxTorque uint16 `ch:"Vehicle_Powertrain_CombustionEngine_MaxTorque"`
	// VehiclePowertrainCombustionEngineNumberOfCylinders Number of cylinders.
	VehiclePowertrainCombustionEngineNumberOfCylinders uint16 `ch:"Vehicle_Powertrain_CombustionEngine_NumberOfCylinders"`
	// VehiclePowertrainCombustionEngineNumberOfValvesPerCylinder Number of valves per cylinder.
	VehiclePowertrainCombustionEngineNumberOfValvesPerCylinder uint16 `ch:"Vehicle_Powertrain_CombustionEngine_NumberOfValvesPerCylinder"`
	// VehiclePowertrainCombustionEngineOilLifeRemaining Remaining engine oil life in seconds. Negative values can be used to indicate that lifetime has been exceeded.
	VehiclePowertrainCombustionEngineOilLifeRemaining int32 `ch:"Vehicle_Powertrain_CombustionEngine_OilLifeRemaining"`
	// VehiclePowertrainCombustionEnginePower Current engine power output. Shall be reported as 0 during engine breaking.
	VehiclePowertrainCombustionEnginePower uint16 `ch:"Vehicle_Powertrain_CombustionEngine_Power"`
	// VehiclePowertrainCombustionEngineSpeed Engine speed measured as rotations per minute.
	VehiclePowertrainCombustionEngineSpeed uint16 `ch:"Vehicle_Powertrain_CombustionEngine_Speed"`
	// VehiclePowertrainCombustionEngineStrokeLength Stroke length in millimetres.
	VehiclePowertrainCombustionEngineStrokeLength float32 `ch:"Vehicle_Powertrain_CombustionEngine_StrokeLength"`
	// VehiclePowertrainCombustionEngineTPS Current throttle position.
	VehiclePowertrainCombustionEngineTPS uint8 `ch:"Vehicle_Powertrain_CombustionEngine_TPS"`
	// VehiclePowertrainCombustionEngineTorque Current engine torque. Shall be reported as a negative number during engine breaking.
	VehiclePowertrainCombustionEngineTorque int16 `ch:"Vehicle_Powertrain_CombustionEngine_Torque"` 
	// VehiclePowertrainElectricMotorCoolantTemperature Motor coolant temperature (if applicable).
	VehiclePowertrainElectricMotorCoolantTemperature float32 `ch:"Vehicle_Powertrain_ElectricMotor_CoolantTemperature"`
	// VehiclePowertrainElectricMotorEngineCode Engine code designation, as specified by vehicle manufacturer.
	VehiclePowertrainElectricMotorEngineCode string `ch:"Vehicle_Powertrain_ElectricMotor_EngineCode"`
	// VehiclePowertrainElectricMotorMaxPower Peak power, in kilowatts, that motor(s) can generate.
	VehiclePowertrainElectricMotorMaxPower uint16 `ch:"Vehicle_Powertrain_ElectricMotor_MaxPower"`
	// VehiclePowertrainElectricMotorMaxRegenPower Peak regen/brake power, in kilowatts, that motor(s) can generate.
	VehiclePowertrainElectricMotorMaxRegenPower uint16 `ch:"Vehicle_Powertrain_ElectricMotor_MaxRegenPower"`
	// VehiclePowertrainElectricMotorMaxRegenTorque Peak regen/brake torque, in newton meter, that the motor(s) can generate.
	VehiclePowertrainElectricMotorMaxRegenTorque uint16 `ch:"Vehicle_Powertrain_ElectricMotor_MaxRegenTorque"`
	// VehiclePowertrainElectricMotorMaxTorque Peak power, in newton meter, that the motor(s) can generate.
	VehiclePowertrainElectricMotorMaxTorque uint16 `ch:"Vehicle_Powertrain_ElectricMotor_MaxTorque"`
	// VehiclePowertrainElectricMotorPower Current motor power output. Negative values indicate regen mode.
	VehiclePowertrainElectricMotorPower int16 `ch:"Vehicle_Powertrain_ElectricMotor_Power"`
	// VehiclePowertrainElectricMotorSpeed Motor rotational speed measured as rotations per minute. Negative values indicate reverse driving mode.
	VehiclePowertrainElectricMotorSpeed int32 `ch:"Vehicle_Powertrain_ElectricMotor_Speed"`
	// VehiclePowertrainElectricMotorTemperature Motor temperature.
	VehiclePowertrainElectricMotorTemperature float32 `ch:"Vehicle_Powertrain_ElectricMotor_Temperature"`
	// VehiclePowertrainElectricMotorTorque Current motor torque. Negative values indicate regen mode.
	VehiclePowertrainElectricMotorTorque int16 `ch:"Vehicle_Powertrain_ElectricMotor_Torque"` 
	// VehiclePowertrainFuelSystemAbsoluteLevel Current available fuel in the fuel tank expressed in liters.
	VehiclePowertrainFuelSystemAbsoluteLevel float32 `ch:"Vehicle_Powertrain_FuelSystem_AbsoluteLevel"`
	// VehiclePowertrainFuelSystemAverageConsumption Average consumption in liters per 100 km.
	VehiclePowertrainFuelSystemAverageConsumption float32 `ch:"Vehicle_Powertrain_FuelSystem_AverageConsumption"`
	// VehiclePowertrainFuelSystemConsumptionSinceStart Fuel amount in liters consumed since start of current trip.
	VehiclePowertrainFuelSystemConsumptionSinceStart float32 `ch:"Vehicle_Powertrain_FuelSystem_ConsumptionSinceStart"`
	// VehiclePowertrainFuelSystemHybridType Defines the hybrid type of the vehicle.
	VehiclePowertrainFuelSystemHybridType string `ch:"Vehicle_Powertrain_FuelSystem_HybridType"`
	// VehiclePowertrainFuelSystemInstantConsumption Current consumption in liters per 100 km.
	VehiclePowertrainFuelSystemInstantConsumption float32 `ch:"Vehicle_Powertrain_FuelSystem_InstantConsumption"`
	// VehiclePowertrainFuelSystemIsEngineStopStartEnabled Indicates whether eco start stop is currently enabled.
	VehiclePowertrainFuelSystemIsEngineStopStartEnabled bool `ch:"Vehicle_Powertrain_FuelSystem_IsEngineStopStartEnabled"`
	// VehiclePowertrainFuelSystemIsFuelLevelLow Indicates that the fuel level is low (e.g. <50km range).
	VehiclePowertrainFuelSystemIsFuelLevelLow bool `ch:"Vehicle_Powertrain_FuelSystem_IsFuelLevelLow"`
	// VehiclePowertrainFuelSystemIsFuelPortFlapOpen Status of the fuel port flap(s). True if at least one is open.
	VehiclePowertrainFuelSystemIsFuelPortFlapOpen bool `ch:"Vehicle_Powertrain_FuelSystem_IsFuelPortFlapOpen"`
	// VehiclePowertrainFuelSystemRange Remaining range in meters using only liquid fuel.
	VehiclePowertrainFuelSystemRange uint32 `ch:"Vehicle_Powertrain_FuelSystem_Range"`
	// VehiclePowertrainFuelSystemRefuelPortPosition Position of refuel port(s). First part indicates side of vehicle, second part relative position on that side.
	VehiclePowertrainFuelSystemRefuelPortPosition []string `ch:"Vehicle_Powertrain_FuelSystem_RefuelPortPosition"`
	// VehiclePowertrainFuelSystemRelativeLevel Level in fuel tank as percent of capacity. 0 = empty. 100 = full.
	VehiclePowertrainFuelSystemRelativeLevel uint8 `ch:"Vehicle_Powertrain_FuelSystem_RelativeLevel"`
	// VehiclePowertrainFuelSystemSupportedFuel Detailed information on fuels supported by the vehicle. Identifiers originating from DIN EN 16942:2021-08, appendix B, with additional suffix for octane (RON) where relevant.
	VehiclePowertrainFuelSystemSupportedFuel []string `ch:"Vehicle_Powertrain_FuelSystem_SupportedFuel"`
	// VehiclePowertrainFuelSystemSupportedFuelTypes High level information of fuel types supported
	VehiclePowertrainFuelSystemSupportedFuelTypes []string `ch:"Vehicle_Powertrain_FuelSystem_SupportedFuelTypes"`
	// VehiclePowertrainFuelSystemTankCapacity Capacity of the fuel tank in liters.
	VehiclePowertrainFuelSystemTankCapacity float32 `ch:"Vehicle_Powertrain_FuelSystem_TankCapacity"`
	// VehiclePowertrainFuelSystemTimeRemaining Time remaining in seconds before the fuel tank is empty.
	VehiclePowertrainFuelSystemTimeRemaining uint32 `ch:"Vehicle_Powertrain_FuelSystem_TimeRemaining"`
	// VehiclePowertrainIsAutoPowerOptimize Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.
	VehiclePowertrainIsAutoPowerOptimize bool `ch:"Vehicle_Powertrain_IsAutoPowerOptimize"`
	// VehiclePowertrainPowerOptimizeLevel Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.
	VehiclePowertrainPowerOptimizeLevel uint8 `ch:"Vehicle_Powertrain_PowerOptimizeLevel"`
	// VehiclePowertrainRange Remaining range in meters using all energy sources available in the vehicle.
	VehiclePowertrainRange uint32 `ch:"Vehicle_Powertrain_Range"`
	// VehiclePowertrainTimeRemaining Time remaining in seconds before all energy sources available in the vehicle are empty.
	VehiclePowertrainTimeRemaining uint32 `ch:"Vehicle_Powertrain_TimeRemaining"` 
	// VehiclePowertrainTractionBatteryAccumulatedChargedEnergy The accumulated energy delivered to the battery during charging over lifetime of the battery.
	VehiclePowertrainTractionBatteryAccumulatedChargedEnergy float32 `ch:"Vehicle_Powertrain_TractionBattery_AccumulatedChargedEnergy"`
	// VehiclePowertrainTractionBatteryAccumulatedChargedThroughput The accumulated charge throughput delivered to the battery during charging over lifetime of the battery.
	VehiclePowertrainTractionBatteryAccumulatedChargedThroughput float32 `ch:"Vehicle_Powertrain_TractionBattery_AccumulatedChargedThroughput"`
	// VehiclePowertrainTractionBatteryAccumulatedConsumedEnergy The accumulated energy leaving HV battery for propulsion and auxiliary loads over lifetime of the battery.
	VehiclePowertrainTractionBatteryAccumulatedConsumedEnergy float32 `ch:"Vehicle_Powertrain_TractionBattery_AccumulatedConsumedEnergy"`
	// VehiclePowertrainTractionBatteryAccumulatedConsumedThroughput The accumulated charge throughput leaving HV battery for propulsion and auxiliary loads over lifetime of the battery.
	VehiclePowertrainTractionBatteryAccumulatedConsumedThroughput float32 `ch:"Vehicle_Powertrain_TractionBattery_AccumulatedConsumedThroughput"` 
	// VehiclePowertrainTractionBatteryCellVoltageCellVoltages Array of cell voltages. Length or array shall correspond to number of cells in vehicle.
	VehiclePowertrainTractionBatteryCellVoltageCellVoltages []float32 `ch:"Vehicle_Powertrain_TractionBattery_CellVoltage_CellVoltages"`
	// VehiclePowertrainTractionBatteryCellVoltageIdMax Identifier of the battery cell with highest voltage.
	VehiclePowertrainTractionBatteryCellVoltageIdMax uint16 `ch:"Vehicle_Powertrain_TractionBattery_CellVoltage_IdMax"`
	// VehiclePowertrainTractionBatteryCellVoltageIdMin Identifier of the battery cell with lowest voltage.
	VehiclePowertrainTractionBatteryCellVoltageIdMin uint16 `ch:"Vehicle_Powertrain_TractionBattery_CellVoltage_IdMin"`
	// VehiclePowertrainTractionBatteryCellVoltageMax Current voltage of the battery cell with highest voltage.
	VehiclePowertrainTractionBatteryCellVoltageMax float32 `ch:"Vehicle_Powertrain_TractionBattery_CellVoltage_Max"`
	// VehiclePowertrainTractionBatteryCellVoltageMin Current voltage of the battery cell with lowest voltage.
	VehiclePowertrainTractionBatteryCellVoltageMin float32 `ch:"Vehicle_Powertrain_TractionBattery_CellVoltage_Min"` 
	// VehiclePowertrainTractionBatteryChargingAveragePower Average charging power of last or current charging event.
	VehiclePowertrainTractionBatteryChargingAveragePower float32 `ch:"Vehicle_Powertrain_TractionBattery_Charging_AveragePower"` 
	// VehiclePowertrainTractionBatteryChargingChargeCurrentDC Current DC charging current at inlet. Negative if returning energy to grid.
	VehiclePowertrainTractionBatteryChargingChargeCurrentDC float32 `ch:"Vehicle_Powertrain_TractionBattery_Charging_ChargeCurrent_DC"`
	// VehiclePowertrainTractionBatteryChargingChargeCurrentPhase1 Current AC charging current (rms) at inlet for Phase 1. Negative if returning energy to grid.
	VehiclePowertrainTractionBatteryChargingChargeCurrentPhase1 float32 `ch:"Vehicle_Powertrain_TractionBattery_Charging_ChargeCurrent_Phase1"`
	// VehiclePowertrainTractionBatteryChargingChargeCurrentPhase2 Current AC charging current (rms) at inlet for Phase 2. Negative if returning energy to grid.
	VehiclePowertrainTractionBatteryChargingChargeCurrentPhase2 float32 `ch:"Vehicle_Powertrain_TractionBattery_Charging_ChargeCurrent_Phase2"`
	// VehiclePowertrainTractionBatteryChargingChargeCurrentPhase3 Current AC charging current (rms) at inlet for Phase 3. Negative if returning energy to grid.
	VehiclePowertrainTractionBatteryChargingChargeCurrentPhase3 float32 `ch:"Vehicle_Powertrain_TractionBattery_Charging_ChargeCurrent_Phase3"`
	// VehiclePowertrainTractionBatteryChargingChargeLimit Target charge limit (state of charge) for battery.
	VehiclePowertrainTractionBatteryChargingChargeLimit uint8 `ch:"Vehicle_Powertrain_TractionBattery_Charging_ChargeLimit"`
	// VehiclePowertrainTractionBatteryChargingChargePlugType Type of charge plugs (charging inlet) available on the vehicle. A charge plug type may occur multiple times in the list if there are multiple instances of that charge plug type. IEC types refer to IEC 62196,  GBT refers to  GB/T 20234.
	VehiclePowertrainTractionBatteryChargingChargePlugType []string `ch:"Vehicle_Powertrain_TractionBattery_Charging_ChargePlugType"`
	// VehiclePowertrainTractionBatteryChargingChargePortFlap Status of the charge port cover(s), can potentially be controlled manually. OPEN if at least one is open.
	VehiclePowertrainTractionBatteryChargingChargePortFlap string `ch:"Vehicle_Powertrain_TractionBattery_Charging_ChargePortFlap"`
	// VehiclePowertrainTractionBatteryChargingChargePortPosition Location of the charge port(s). First part indicates side of vehicle, second part relative position on that side. If supported, the list in this attribute shall have the same length as Charging.ChargePortType, and use same the relative order.
	VehiclePowertrainTractionBatteryChargingChargePortPosition []string `ch:"Vehicle_Powertrain_TractionBattery_Charging_ChargePortPosition"`
	// VehiclePowertrainTractionBatteryChargingChargePortType Type of charge ports (charging inlet) available on the vehicle. A charge port type may occur multiple times in the list if there are multiple instances of that charge port type. IEC types refer to IEC 62196,  GBT refers to  GB/T 20234.
	VehiclePowertrainTractionBatteryChargingChargePortType []string `ch:"Vehicle_Powertrain_TractionBattery_Charging_ChargePortType"`
	// VehiclePowertrainTractionBatteryChargingChargeRate Current charging rate, as in kilometers of range added per hour.
	VehiclePowertrainTractionBatteryChargingChargeRate float32 `ch:"Vehicle_Powertrain_TractionBattery_Charging_ChargeRate"` 
	// VehiclePowertrainTractionBatteryChargingChargeVoltageDC Current DC charging voltage at charging inlet.
	VehiclePowertrainTractionBatteryChargingChargeVoltageDC float32 `ch:"Vehicle_Powertrain_TractionBattery_Charging_ChargeVoltage_DC"`
	// VehiclePowertrainTractionBatteryChargingChargeVoltagePhase1 Current AC charging voltage (rms) at inlet for Phase 1.
	VehiclePowertrainTractionBatteryChargingChargeVoltagePhase1 float32 `ch:"Vehicle_Powertrain_TractionBattery_Charging_ChargeVoltage_Phase1"`
	// VehiclePowertrainTractionBatteryChargingChargeVoltagePhase2 Current AC charging voltage (rms) at inlet for Phase 2.
	VehiclePowertrainTractionBatteryChargingChargeVoltagePhase2 float32 `ch:"Vehicle_Powertrain_TractionBattery_Charging_ChargeVoltage_Phase2"`
	// VehiclePowertrainTractionBatteryChargingChargeVoltagePhase3 Current AC charging voltage (rms) at inlet for Phase 3.
	VehiclePowertrainTractionBatteryChargingChargeVoltagePhase3 float32 `ch:"Vehicle_Powertrain_TractionBattery_Charging_ChargeVoltage_Phase3"`
	// VehiclePowertrainTractionBatteryChargingEvseId EVSE charging point ID (without separators) of last or current charging event according to ISO 15118-2 Annex H.
	VehiclePowertrainTractionBatteryChargingEvseId string `ch:"Vehicle_Powertrain_TractionBattery_Charging_EvseId"`
	// VehiclePowertrainTractionBatteryChargingIsChargePortFlapOpen Status of the charge port flap(s), can potentially be controlled manually. True if at least one is open.
	VehiclePowertrainTractionBatteryChargingIsChargePortFlapOpen bool `ch:"Vehicle_Powertrain_TractionBattery_Charging_IsChargePortFlapOpen"`
	// VehiclePowertrainTractionBatteryChargingIsCharging True if charging is ongoing. Charging is considered to be ongoing if energy is flowing from charger to vehicle.
	VehiclePowertrainTractionBatteryChargingIsCharging bool `ch:"Vehicle_Powertrain_TractionBattery_Charging_IsCharging"`
	// VehiclePowertrainTractionBatteryChargingIsChargingCableConnected Indicates if a charging cable is physically connected to the vehicle or not.
	VehiclePowertrainTractionBatteryChargingIsChargingCableConnected bool `ch:"Vehicle_Powertrain_TractionBattery_Charging_IsChargingCableConnected"`
	// VehiclePowertrainTractionBatteryChargingIsChargingCableLocked Is charging cable locked to prevent removal.
	VehiclePowertrainTractionBatteryChargingIsChargingCableLocked bool `ch:"Vehicle_Powertrain_TractionBattery_Charging_IsChargingCableLocked"`
	// VehiclePowertrainTractionBatteryChargingIsDischarging True if discharging (vehicle to grid) is ongoing. Discharging is considered to be ongoing if energy is flowing from vehicle to charger/grid.
	VehiclePowertrainTractionBatteryChargingIsDischarging bool `ch:"Vehicle_Powertrain_TractionBattery_Charging_IsDischarging"` 
	// VehiclePowertrainTractionBatteryChargingLocationAltitude Altitude relative to WGS 84 reference ellipsoid of last or current charging event.
	VehiclePowertrainTractionBatteryChargingLocationAltitude float64 `ch:"Vehicle_Powertrain_TractionBattery_Charging_Location_Altitude"`
	// VehiclePowertrainTractionBatteryChargingLocationLatitude Latitude of last or current charging event in WGS 84 geodetic coordinates.
	VehiclePowertrainTractionBatteryChargingLocationLatitude float64 `ch:"Vehicle_Powertrain_TractionBattery_Charging_Location_Latitude"`
	// VehiclePowertrainTractionBatteryChargingLocationLongitude Longitude of last or current charging event in WGS 84 geodetic coordinates.
	VehiclePowertrainTractionBatteryChargingLocationLongitude float64 `ch:"Vehicle_Powertrain_TractionBattery_Charging_Location_Longitude"`
	// VehiclePowertrainTractionBatteryChargingMaxPower Maximum charging power of last or current charging event.
	VehiclePowertrainTractionBatteryChargingMaxPower float32 `ch:"Vehicle_Powertrain_TractionBattery_Charging_MaxPower"` 
	// VehiclePowertrainTractionBatteryChargingMaximumChargingCurrentDC Maximum DC charging current at inlet that can be accepted by the system.
	VehiclePowertrainTractionBatteryChargingMaximumChargingCurrentDC float32 `ch:"Vehicle_Powertrain_TractionBattery_Charging_MaximumChargingCurrent_DC"`
	// VehiclePowertrainTractionBatteryChargingMaximumChargingCurrentPhase1 Maximum AC charging current (rms) at inlet for Phase 1 that can be accepted by the system.
	VehiclePowertrainTractionBatteryChargingMaximumChargingCurrentPhase1 float32 `ch:"Vehicle_Powertrain_TractionBattery_Charging_MaximumChargingCurrent_Phase1"`
	// VehiclePowertrainTractionBatteryChargingMaximumChargingCurrentPhase2 Maximum AC charging current (rms) at inlet for Phase 2 that can be accepted by the system.
	VehiclePowertrainTractionBatteryChargingMaximumChargingCurrentPhase2 float32 `ch:"Vehicle_Powertrain_TractionBattery_Charging_MaximumChargingCurrent_Phase2"`
	// VehiclePowertrainTractionBatteryChargingMaximumChargingCurrentPhase3 Maximum AC charging current (rms) at inlet for Phase 3 that can be accepted by the system.
	VehiclePowertrainTractionBatteryChargingMaximumChargingCurrentPhase3 float32 `ch:"Vehicle_Powertrain_TractionBattery_Charging_MaximumChargingCurrent_Phase3"`
	// VehiclePowertrainTractionBatteryChargingMode Describes how the charging process is controlled. DEACTIVATED means that charging and discharging is deactivated, nothing will happen if charger is connected. AUTOMATIC means charging will be initiated as soon as charger is connected. TRIGGERED means charging will be initiated when triggered by user. TIMER means charging is timer-based. PROFILE means charging is controlled by profile downloaded to vehicle. EXTERNAL_ENTITY means charging/discharging is controlled by the external entity connected to the vehicle. This includes GRID-controlled charging (e.g. ISO 15118), but also other cases where vehicle is connected to an arbitrary load that is powered by the vehicle. MANUAL means manually initiated (plug-in event, companion app, etc). GRID means grid-controlled (e.g. ISO 15118).
	VehiclePowertrainTractionBatteryChargingMode string `ch:"Vehicle_Powertrain_TractionBattery_Charging_Mode"`
	// VehiclePowertrainTractionBatteryChargingPowerLoss Electrical energy lost by power dissipation to heat inside the AC/DC converter.
	VehiclePowertrainTractionBatteryChargingPowerLoss float32 `ch:"Vehicle_Powertrain_TractionBattery_Charging_PowerLoss"`
	// VehiclePowertrainTractionBatteryChargingStartStopCharging Start or stop the charging process.
	VehiclePowertrainTractionBatteryChargingStartStopCharging string `ch:"Vehicle_Powertrain_TractionBattery_Charging_StartStopCharging"`
	// VehiclePowertrainTractionBatteryChargingTemperature Current temperature of AC/DC converter converting grid voltage to battery voltage.
	VehiclePowertrainTractionBatteryChargingTemperature float32 `ch:"Vehicle_Powertrain_TractionBattery_Charging_Temperature"`
	// VehiclePowertrainTractionBatteryChargingTimeToComplete The time needed for the current charging process to reach Charging.ChargeLimit. 0 if charging is complete or no charging process is active or planned.
	VehiclePowertrainTractionBatteryChargingTimeToComplete uint32 `ch:"Vehicle_Powertrain_TractionBattery_Charging_TimeToComplete"` 
	// VehiclePowertrainTractionBatteryChargingTimerMode Defines timer mode for charging: INACTIVE - no timer set, charging may start as soon as battery is connected to a charger. START_TIME - charging shall start at Charging.Timer.Time. END_TIME - charging shall be finished (reach Charging.ChargeLimit) at Charging.Timer.Time. When charging is completed the vehicle shall change mode to 'inactive' or set a new Charging.Timer.Time. Charging shall start immediately if mode is 'starttime' or 'endtime' and Charging.Timer.Time is a time in the past.
	VehiclePowertrainTractionBatteryChargingTimerMode string `ch:"Vehicle_Powertrain_TractionBattery_Charging_Timer_Mode"`
	// VehiclePowertrainTractionBatteryChargingTimerTime Time for next charging-related action, formatted according to ISO 8601 with UTC time zone. Value has no significance if Charging.Timer.Mode is 'inactive'.
	VehiclePowertrainTractionBatteryChargingTimerTime string `ch:"Vehicle_Powertrain_TractionBattery_Charging_Timer_Time"`
	// VehiclePowertrainTractionBatteryCurrentCurrent Current current flowing in/out of battery. Positive = Current flowing in to battery, e.g. during charging. Negative = Current flowing out of battery, e.g. during driving.
	VehiclePowertrainTractionBatteryCurrentCurrent float32 `ch:"Vehicle_Powertrain_TractionBattery_CurrentCurrent"`
	// VehiclePowertrainTractionBatteryCurrentPower Current electrical energy flowing in/out of battery. Positive = Energy flowing in to battery, e.g. during charging. Negative = Energy flowing out of battery, e.g. during driving.
	VehiclePowertrainTractionBatteryCurrentPower float32 `ch:"Vehicle_Powertrain_TractionBattery_CurrentPower"`
	// VehiclePowertrainTractionBatteryCurrentVoltage Current Voltage of the battery.
	VehiclePowertrainTractionBatteryCurrentVoltage float32 `ch:"Vehicle_Powertrain_TractionBattery_CurrentVoltage"` 
	// VehiclePowertrainTractionBatteryDCDCPowerLoss Electrical energy lost by power dissipation to heat inside DC/DC converter.
	VehiclePowertrainTractionBatteryDCDCPowerLoss float32 `ch:"Vehicle_Powertrain_TractionBattery_DCDC_PowerLoss"`
	// VehiclePowertrainTractionBatteryDCDCTemperature Current temperature of DC/DC converter converting battery high voltage to vehicle low voltage (typically 12 Volts).
	VehiclePowertrainTractionBatteryDCDCTemperature float32 `ch:"Vehicle_Powertrain_TractionBattery_DCDC_Temperature"`
	// VehiclePowertrainTractionBatteryErrorCodes Current error codes related to the battery, if any.
	VehiclePowertrainTractionBatteryErrorCodes []string `ch:"Vehicle_Powertrain_TractionBattery_ErrorCodes"`
	// VehiclePowertrainTractionBatteryGrossCapacity Gross capacity of the battery.
	VehiclePowertrainTractionBatteryGrossCapacity uint16 `ch:"Vehicle_Powertrain_TractionBattery_GrossCapacity"`
	// VehiclePowertrainTractionBatteryId Battery Identification Number as assigned by OEM.
	VehiclePowertrainTractionBatteryId string `ch:"Vehicle_Powertrain_TractionBattery_Id"`
	// VehiclePowertrainTractionBatteryIsGroundConnected Indicating if the ground (negative terminator) of the traction battery is connected to the powertrain.
	VehiclePowertrainTractionBatteryIsGroundConnected bool `ch:"Vehicle_Powertrain_TractionBattery_IsGroundConnected"`
	// VehiclePowertrainTractionBatteryIsPowerConnected Indicating if the power (positive terminator) of the traction battery is connected to the powertrain.
	VehiclePowertrainTractionBatteryIsPowerConnected bool `ch:"Vehicle_Powertrain_TractionBattery_IsPowerConnected"`
	// VehiclePowertrainTractionBatteryMaxVoltage Max allowed voltage of the battery, e.g. during charging.
	VehiclePowertrainTractionBatteryMaxVoltage uint16 `ch:"Vehicle_Powertrain_TractionBattery_MaxVoltage"`
	// VehiclePowertrainTractionBatteryNetCapacity Total net capacity of the battery considering aging.
	VehiclePowertrainTractionBatteryNetCapacity uint16 `ch:"Vehicle_Powertrain_TractionBattery_NetCapacity"`
	// VehiclePowertrainTractionBatteryNominalVoltage Nominal Voltage of the battery.
	VehiclePowertrainTractionBatteryNominalVoltage uint16 `ch:"Vehicle_Powertrain_TractionBattery_NominalVoltage"`
	// VehiclePowertrainTractionBatteryPowerLoss Electrical energy lost by power dissipation to heat inside the battery.
	VehiclePowertrainTractionBatteryPowerLoss float32 `ch:"Vehicle_Powertrain_TractionBattery_PowerLoss"`
	// VehiclePowertrainTractionBatteryProductionDate Production date of battery in ISO8601 format, e.g. YYYY-MM-DD.
	VehiclePowertrainTractionBatteryProductionDate string `ch:"Vehicle_Powertrain_TractionBattery_ProductionDate"`
	// VehiclePowertrainTractionBatteryRange Remaining range in meters using only battery.
	VehiclePowertrainTractionBatteryRange uint32 `ch:"Vehicle_Powertrain_TractionBattery_Range"` 
	// VehiclePowertrainTractionBatteryStateOfChargeCurrent Physical state of charge of the high voltage battery, relative to net capacity. This is not necessarily the state of charge being displayed to the customer.
	VehiclePowertrainTractionBatteryStateOfChargeCurrent float32 `ch:"Vehicle_Powertrain_TractionBattery_StateOfCharge_Current"`
	// VehiclePowertrainTractionBatteryStateOfChargeCurrentEnergy Physical state of charge of high voltage battery expressed in kWh.
	VehiclePowertrainTractionBatteryStateOfChargeCurrentEnergy float32 `ch:"Vehicle_Powertrain_TractionBattery_StateOfCharge_CurrentEnergy"`
	// VehiclePowertrainTractionBatteryStateOfChargeDisplayed State of charge displayed to the customer.
	VehiclePowertrainTractionBatteryStateOfChargeDisplayed float32 `ch:"Vehicle_Powertrain_TractionBattery_StateOfCharge_Displayed"`
	// VehiclePowertrainTractionBatteryStateOfHealth Calculated battery state of health at standard conditions.
	VehiclePowertrainTractionBatteryStateOfHealth float32 `ch:"Vehicle_Powertrain_TractionBattery_StateOfHealth"` 
	// VehiclePowertrainTractionBatteryTemperatureAverage Current average temperature of the battery cells.
	VehiclePowertrainTractionBatteryTemperatureAverage float32 `ch:"Vehicle_Powertrain_TractionBattery_Temperature_Average"`
	// VehiclePowertrainTractionBatteryTemperatureCellTemperature Array of cell temperatures. Length or array shall correspond to number of cells in vehicle.
	VehiclePowertrainTractionBatteryTemperatureCellTemperature []float32 `ch:"Vehicle_Powertrain_TractionBattery_Temperature_CellTemperature"`
	// VehiclePowertrainTractionBatteryTemperatureMax Current maximum temperature of the battery cells, i.e. temperature of the hottest cell.
	VehiclePowertrainTractionBatteryTemperatureMax float32 `ch:"Vehicle_Powertrain_TractionBattery_Temperature_Max"`
	// VehiclePowertrainTractionBatteryTemperatureMin Current minimum temperature of the battery cells, i.e. temperature of the coldest cell.
	VehiclePowertrainTractionBatteryTemperatureMin float32 `ch:"Vehicle_Powertrain_TractionBattery_Temperature_Min"`
	// VehiclePowertrainTractionBatteryTimeRemaining Time remaining in seconds before the battery is empty.
	VehiclePowertrainTractionBatteryTimeRemaining uint32 `ch:"Vehicle_Powertrain_TractionBattery_TimeRemaining"` 
	// VehiclePowertrainTransmissionClutchEngagement Clutch engagement. 0% = Clutch fully disengaged. 100% = Clutch fully engaged.
	VehiclePowertrainTransmissionClutchEngagement float32 `ch:"Vehicle_Powertrain_Transmission_ClutchEngagement"`
	// VehiclePowertrainTransmissionClutchWear Clutch wear as a percent. 0 = no wear. 100 = worn.
	VehiclePowertrainTransmissionClutchWear uint8 `ch:"Vehicle_Powertrain_Transmission_ClutchWear"`
	// VehiclePowertrainTransmissionCurrentGear The current gear. 0=Neutral, 1/2/..=Forward, -1/-2/..=Reverse.
	VehiclePowertrainTransmissionCurrentGear int8 `ch:"Vehicle_Powertrain_Transmission_CurrentGear"`
	// VehiclePowertrainTransmissionDiffLockFrontEngagement Front Diff Lock engagement. 0% = Diff lock fully disengaged. 100% = Diff lock fully engaged.
	VehiclePowertrainTransmissionDiffLockFrontEngagement float32 `ch:"Vehicle_Powertrain_Transmission_DiffLockFrontEngagement"`
	// VehiclePowertrainTransmissionDiffLockRearEngagement Rear Diff Lock engagement. 0% = Diff lock fully disengaged. 100% = Diff lock fully engaged.
	VehiclePowertrainTransmissionDiffLockRearEngagement float32 `ch:"Vehicle_Powertrain_Transmission_DiffLockRearEngagement"`
	// VehiclePowertrainTransmissionDriveType Drive type.
	VehiclePowertrainTransmissionDriveType string `ch:"Vehicle_Powertrain_Transmission_DriveType"`
	// VehiclePowertrainTransmissionGearChangeMode Is the gearbox in automatic or manual (paddle) mode.
	VehiclePowertrainTransmissionGearChangeMode string `ch:"Vehicle_Powertrain_Transmission_GearChangeMode"`
	// VehiclePowertrainTransmissionGearCount Number of forward gears in the transmission. -1 = CVT.
	VehiclePowertrainTransmissionGearCount int8 `ch:"Vehicle_Powertrain_Transmission_GearCount"`
	// VehiclePowertrainTransmissionIsElectricalPowertrainEngaged Is electrical powertrain mechanically connected/engaged to the drivetrain or not. False = Disconnected/Disengaged. True = Connected/Engaged.
	VehiclePowertrainTransmissionIsElectricalPowertrainEngaged bool `ch:"Vehicle_Powertrain_Transmission_IsElectricalPowertrainEngaged"`
	// VehiclePowertrainTransmissionIsLowRangeEngaged Is gearbox in low range mode or not. False = Normal/High range engaged. True = Low range engaged.
	VehiclePowertrainTransmissionIsLowRangeEngaged bool `ch:"Vehicle_Powertrain_Transmission_IsLowRangeEngaged"`
	// VehiclePowertrainTransmissionIsParkLockEngaged Is the transmission park lock engaged or not. False = Disengaged. True = Engaged.
	VehiclePowertrainTransmissionIsParkLockEngaged bool `ch:"Vehicle_Powertrain_Transmission_IsParkLockEngaged"`
	// VehiclePowertrainTransmissionPerformanceMode Current gearbox performance mode.
	VehiclePowertrainTransmissionPerformanceMode string `ch:"Vehicle_Powertrain_Transmission_PerformanceMode"`
	// VehiclePowertrainTransmissionSelectedGear The selected gear. 0=Neutral, 1/2/..=Forward, -1/-2/..=Reverse, 126=Park, 127=Drive.
	VehiclePowertrainTransmissionSelectedGear int8 `ch:"Vehicle_Powertrain_Transmission_SelectedGear"`
	// VehiclePowertrainTransmissionTemperature The current gearbox temperature.
	VehiclePowertrainTransmissionTemperature float32 `ch:"Vehicle_Powertrain_Transmission_Temperature"`
	// VehiclePowertrainTransmissionTorqueDistribution Torque distribution between front and rear axle in percent. -100% = Full torque to front axle, 0% = 50:50 Front/Rear, 100% = Full torque to rear axle.
	VehiclePowertrainTransmissionTorqueDistribution float32 `ch:"Vehicle_Powertrain_Transmission_TorqueDistribution"`
	// VehiclePowertrainTransmissionTravelledDistance Odometer reading, total distance travelled during the lifetime of the transmission.
	VehiclePowertrainTransmissionTravelledDistance float32 `ch:"Vehicle_Powertrain_Transmission_TravelledDistance"`
	// VehiclePowertrainTransmissionType Transmission type.
	VehiclePowertrainTransmissionType string `ch:"Vehicle_Powertrain_Transmission_Type"`
	// VehiclePowertrainType Defines the powertrain type of the vehicle.
	VehiclePowertrainType string `ch:"Vehicle_Powertrain_Type"`
	// VehicleRoofLoad The permitted total weight of cargo and installations (e.g. a roof rack) on top of the vehicle.
	VehicleRoofLoad int16 `ch:"Vehicle_RoofLoad"` 
	// VehicleServiceDistanceToService Remaining distance to service (of any kind). Negative values indicate service overdue.
	VehicleServiceDistanceToService float32 `ch:"Vehicle_Service_DistanceToService"`
	// VehicleServiceIsServiceDue Indicates if vehicle needs service (of any kind). True = Service needed now or in the near future. False = No known need for service.
	VehicleServiceIsServiceDue bool `ch:"Vehicle_Service_IsServiceDue"`
	// VehicleServiceTimeToService Remaining time to service (of any kind). Negative values indicate service overdue.
	VehicleServiceTimeToService int32 `ch:"Vehicle_Service_TimeToService"`
	// VehicleSpeed Vehicle speed.
	VehicleSpeed float32 `ch:"Vehicle_Speed"`
	// VehicleStartTime Start time of current or latest trip, formatted according to ISO 8601 with UTC time zone.
	VehicleStartTime string `ch:"Vehicle_StartTime"` 
	// VehicleTrailerIsConnected Signal indicating if trailer is connected or not.
	VehicleTrailerIsConnected bool `ch:"Vehicle_Trailer_IsConnected"`
	// VehicleTraveledDistance Odometer reading, total distance traveled during the lifetime of the vehicle.
	VehicleTraveledDistance float32 `ch:"Vehicle_TraveledDistance"`
	// VehicleTraveledDistanceSinceStart Distance traveled since start of current trip.
	VehicleTraveledDistanceSinceStart float32 `ch:"Vehicle_TraveledDistanceSinceStart"`
	// VehicleTripDuration Duration of latest trip.
	VehicleTripDuration float32 `ch:"Vehicle_TripDuration"`
	// VehicleTripMeterReading Trip meter reading.
	VehicleTripMeterReading float32 `ch:"Vehicle_TripMeterReading"`
	// VehicleTurningDiameter Minimum turning diameter, Wall-to-Wall, as defined by SAE J1100-2009 D102.
	VehicleTurningDiameter uint16 `ch:"Vehicle_TurningDiameter"` 
	// VehicleVehicleIdentificationAcrissCode The ACRISS Car Classification Code is a code used by many car rental companies.
	VehicleVehicleIdentificationAcrissCode string `ch:"Vehicle_VehicleIdentification_AcrissCode"`
	// VehicleVehicleIdentificationBodyType Indicates the design and body style of the vehicle (e.g. station wagon, hatchback, etc.).
	VehicleVehicleIdentificationBodyType string `ch:"Vehicle_VehicleIdentification_BodyType"`
	// VehicleVehicleIdentificationBrand Vehicle brand or manufacturer.
	VehicleVehicleIdentificationBrand string `ch:"Vehicle_VehicleIdentification_Brand"`
	// VehicleVehicleIdentificationDateVehicleFirstRegistered The date in ISO 8601 format of the first registration of the vehicle with the respective public authorities.
	VehicleVehicleIdentificationDateVehicleFirstRegistered string `ch:"Vehicle_VehicleIdentification_DateVehicleFirstRegistered"`
	// VehicleVehicleIdentificationKnownVehicleDamages A textual description of known damages, both repaired and unrepaired.
	VehicleVehicleIdentificationKnownVehicleDamages string `ch:"Vehicle_VehicleIdentification_KnownVehicleDamages"`
	// VehicleVehicleIdentificationLicensePlate The license plate of the vehicle.
	VehicleVehicleIdentificationLicensePlate string `ch:"Vehicle_VehicleIdentification_LicensePlate"`
	// VehicleVehicleIdentificationMeetsEmissionStandard Indicates that the vehicle meets the respective emission standard.
	VehicleVehicleIdentificationMeetsEmissionStandard string `ch:"Vehicle_VehicleIdentification_MeetsEmissionStandard"`
	// VehicleVehicleIdentificationModel Vehicle model.
	VehicleVehicleIdentificationModel string `ch:"Vehicle_VehicleIdentification_Model"`
	// VehicleVehicleIdentificationOptionalExtras Optional extras refers to all car equipment options that are not installed as standard by the manufacturer.
	VehicleVehicleIdentificationOptionalExtras []string `ch:"Vehicle_VehicleIdentification_OptionalExtras"`
	// VehicleVehicleIdentificationProductionDate The date in ISO 8601 format of production of the item, e.g. vehicle.
	VehicleVehicleIdentificationProductionDate string `ch:"Vehicle_VehicleIdentification_ProductionDate"`
	// VehicleVehicleIdentificationPurchaseDate The date in ISO 8601 format of the item e.g. vehicle was purchased by the current owner.
	VehicleVehicleIdentificationPurchaseDate string `ch:"Vehicle_VehicleIdentification_PurchaseDate"`
	// VehicleVehicleIdentificationVIN 17-character Vehicle Identification Number (VIN) as defined by ISO 3779.
	VehicleVehicleIdentificationVIN string `ch:"Vehicle_VehicleIdentification_VIN"`
	// VehicleVehicleIdentificationVehicleConfiguration A short text indicating the configuration of the vehicle, e.g. '5dr hatchback ST 2.5 MT 225 hp' or 'limited edition'.
	VehicleVehicleIdentificationVehicleConfiguration string `ch:"Vehicle_VehicleIdentification_VehicleConfiguration"`
	// VehicleVehicleIdentificationVehicleExteriorColor The main color of the exterior within the basic color palette (eg. red, blue, black, white, ...).
	VehicleVehicleIdentificationVehicleExteriorColor string `ch:"Vehicle_VehicleIdentification_VehicleExteriorColor"`
	// VehicleVehicleIdentificationVehicleInteriorColor The color or color combination of the interior of the vehicle.
	VehicleVehicleIdentificationVehicleInteriorColor string `ch:"Vehicle_VehicleIdentification_VehicleInteriorColor"`
	// VehicleVehicleIdentificationVehicleInteriorType The type or material of the interior of the vehicle (e.g. synthetic fabric, leather, wood, etc.).
	VehicleVehicleIdentificationVehicleInteriorType string `ch:"Vehicle_VehicleIdentification_VehicleInteriorType"`
	// VehicleVehicleIdentificationVehicleModelDate The release date in ISO 8601 format of a vehicle model (often used to differentiate versions of the same make and model).
	VehicleVehicleIdentificationVehicleModelDate string `ch:"Vehicle_VehicleIdentification_VehicleModelDate"`
	// VehicleVehicleIdentificationVehicleSeatingCapacity The number of passengers that can be seated in the vehicle, both in terms of the physical space available, and in terms of limitations set by law.
	VehicleVehicleIdentificationVehicleSeatingCapacity uint16 `ch:"Vehicle_VehicleIdentification_VehicleSeatingCapacity"`
	// VehicleVehicleIdentificationVehicleSpecialUsage Indicates whether the vehicle has been used for special purposes, like commercial rental, driving school.
	VehicleVehicleIdentificationVehicleSpecialUsage string `ch:"Vehicle_VehicleIdentification_VehicleSpecialUsage"`
	// VehicleVehicleIdentificationWMI 3-character World Manufacturer Identification (WMI) as defined by ISO 3780.
	VehicleVehicleIdentificationWMI string `ch:"Vehicle_VehicleIdentification_WMI"`
	// VehicleVehicleIdentificationYear Model year of the vehicle.
	VehicleVehicleIdentificationYear uint16 `ch:"Vehicle_VehicleIdentification_Year"` 
	// VehicleVersionVSSLabel Label to further describe the version.
	VehicleVersionVSSLabel string `ch:"Vehicle_VersionVSS_Label"`
	// VehicleVersionVSSMajor Supported Version of VSS - Major version.
	VehicleVersionVSSMajor uint32 `ch:"Vehicle_VersionVSS_Major"`
	// VehicleVersionVSSMinor Supported Version of VSS - Minor version.
	VehicleVersionVSSMinor uint32 `ch:"Vehicle_VersionVSS_Minor"`
	// VehicleVersionVSSPatch Supported Version of VSS - Patch version.
	VehicleVersionVSSPatch uint32 `ch:"Vehicle_VersionVSS_Patch"`
	// VehicleWidth Overall vehicle width.
	VehicleWidth uint16 `ch:"Vehicle_Width"`
	// VehicleWidthExcludingMirrors Overall vehicle width excluding mirrors, as defined by SAE J1100-2009 W103.
	VehicleWidthExcludingMirrors uint16 `ch:"Vehicle_WidthExcludingMirrors"`
	// VehicleWidthFoldedMirrors Overall vehicle width with mirrors folded, as defined by SAE J1100-2009 W145.
	VehicleWidthFoldedMirrors uint16 `ch:"Vehicle_WidthFoldedMirrors"`
	// VehicleWidthIncludingMirrors Overall vehicle width including mirrors, as defined by SAE J1100-2009 W144.
	VehicleWidthIncludingMirrors uint16 `ch:"Vehicle_WidthIncludingMirrors"`
}